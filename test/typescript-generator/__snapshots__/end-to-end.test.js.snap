// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`end-to-end test generates the same code for pet store that it did on the last test run 1`] = `
Map {
  "paths/pet.ts" => Script {
    "cache": Map {
      "OperationCoder@petstore.yaml#/paths/~1pet/post@[object Object]:false" => "POST",
      "OperationTypeCoder@petstore.yaml#/paths/~1pet/post@path-types/pet.types.ts:true" => "HTTP_POST",
      "OperationCoder@petstore.yaml#/paths/~1pet/put@[object Object]:false" => "PUT",
      "OperationTypeCoder@petstore.yaml#/paths/~1pet/put@path-types/pet.types.ts:true" => "HTTP_PUT",
      "SchemaTypeCoder@undefined@components/Pet.ts:true" => "Pet",
      "SchemaCoder@undefined@components/Pet.ts:false" => "PetSchema",
    },
    "exports": Map {
      "POST" => Object {
        "code": "({ body, context, tools }) => {
      const statusCode = tools.oneOf([\\"200\\",\\"405\\"]);

      if (statusCode === \\"200\\") { 
        if (tools.accepts(\\"application/xml\\")) { 
      

      

 

      return {
        status: 200,
        contentType: \\"application/xml\\",
        body: tools.randomFromSchema(PetSchema) as Pet
      };
    }
if (tools.accepts(\\"application/json\\")) { 
      

      

 

      return {
        status: 200,
        contentType: \\"application/json\\",
        body: tools.randomFromSchema(PetSchema) as Pet
      };
    }
      }
if (statusCode === \\"405\\") { 
        return { 
        status: 405 
      }
      }
 
      return {
        status: 415,
        contentType: \\"text/plain\\",
        body: \\"HTTP 415: Unsupported Media Type\\",
      }
    }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1pet/post",
        "isType": false,
        "name": "POST",
        "promise": Promise {},
        "typeDeclaration": "HTTP_POST",
      },
      "PUT" => Object {
        "code": "({ body, context, tools }) => {
      const statusCode = tools.oneOf([\\"200\\",\\"400\\",\\"404\\",\\"405\\"]);

      if (statusCode === \\"200\\") { 
        if (tools.accepts(\\"application/xml\\")) { 
      

      

 

      return {
        status: 200,
        contentType: \\"application/xml\\",
        body: tools.randomFromSchema(PetSchema) as Pet
      };
    }
if (tools.accepts(\\"application/json\\")) { 
      

      

 

      return {
        status: 200,
        contentType: \\"application/json\\",
        body: tools.randomFromSchema(PetSchema) as Pet
      };
    }
      }
if (statusCode === \\"400\\") { 
        return { 
        status: 400 
      }
      }
if (statusCode === \\"404\\") { 
        return { 
        status: 404 
      }
      }
if (statusCode === \\"405\\") { 
        return { 
        status: 405 
      }
      }
 
      return {
        status: 415,
        contentType: \\"text/plain\\",
        body: \\"HTTP 415: Unsupported Media Type\\",
      }
    }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1pet/put",
        "isType": false,
        "name": "PUT",
        "promise": Promise {},
        "typeDeclaration": "HTTP_PUT",
      },
    },
    "externalImports": Map {},
    "imports": Map {
      "HTTP_POST" => Object {
        "isType": true,
        "name": "HTTP_POST",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1pet/post@[object Object]:true" => "HTTP_POST",
            "OperationTypeCoder@petstore.yaml#/paths/~1pet/put@[object Object]:true" => "HTTP_PUT",
            "SchemaTypeCoder@undefined@components/Pet.ts:true" => "Pet",
            "tools@internal/tools.ts:true" => "Tools",
          },
          "exports": Map {
            "HTTP_POST" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: undefined, path: undefined, header: undefined, body: Pet, context: Context, tools: Tools}) => {  
            status: 200, 
          contentType?: \\"application/xml\\",
          body?: Pet
          
        } | {  
            status: 200, 
          contentType?: \\"application/json\\",
          body?: Pet
          
        } | {  
            status: 405, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet/post",
              "isType": true,
              "name": "HTTP_POST",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_PUT" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: undefined, path: undefined, header: undefined, body: Pet, context: Context, tools: Tools}) => {  
            status: 200, 
          contentType?: \\"application/xml\\",
          body?: Pet
          
        } | {  
            status: 200, 
          contentType?: \\"application/json\\",
          body?: Pet
          
        } | {  
            status: 400, 
          
          
          
        } | {  
            status: 404, 
          
          
          
        } | {  
            status: 405, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet/put",
              "isType": true,
              "name": "HTTP_PUT",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "Context" => Object {
              "isType": true,
              "modulePath": "../context/context.js",
            },
          },
          "imports": Map {
            "Pet" => Object {
              "isType": true,
              "name": "Pet",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
                  "SchemaCoder@undefined@[object Object]:false" => "PetSchema",
                  "SchemaTypeCoder@undefined@components/Category.ts:true" => "Category",
                  "SchemaTypeCoder@undefined@components/Tag.ts:true" => "Tag",
                  "SchemaCoder@undefined@components/Category.ts:false" => "CategorySchema",
                  "SchemaCoder@undefined@components/Tag.ts:false" => "TagSchema",
                },
                "exports": Map {
                  "Pet" => Object {
                    "code": "{id: number,name: string,category: Category,photoUrls: Array<string>,tags: Array<Tag>,status: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Pet",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "PetSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [\\"name\\",\\"photoUrls\\"],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"}, \\"category\\": CategorySchema, \\"photoUrls\\": {
        type: \\"array\\",     
        items: {\\"type\\":\\"string\\"}
      }, \\"tags\\": {
        type: \\"array\\",     
        items: TagSchema
      }, \\"status\\": {\\"type\\":\\"string\\",\\"description\\":\\"pet status in the store\\",\\"enum\\":[\\"available\\",\\"pending\\",\\"sold\\"]} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "PetSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {
                  "Category" => Object {
                    "isType": true,
                    "name": "Category",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                        "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                      },
                      "exports": Map {
                        "Category" => Object {
                          "code": "{id: number,name: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isType": true,
                          "name": "Category",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                        "CategorySchema" => Object {
                          "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                          "done": true,
                          "id": "SchemaCoder@undefined",
                          "isType": false,
                          "name": "CategorySchema",
                          "promise": Promise {},
                          "typeDeclaration": "JSONSchema6",
                        },
                      },
                      "externalImports": Map {
                        "JSONSchema6" => Object {
                          "isType": true,
                          "modulePath": "json-schema",
                        },
                      },
                      "imports": Map {},
                      "path": "components/Category.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "Tag" => Object {
                    "isType": true,
                    "name": "Tag",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                        "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                      },
                      "exports": Map {
                        "Tag" => Object {
                          "code": "{id: number,name: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isType": true,
                          "name": "Tag",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                        "TagSchema" => Object {
                          "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                          "done": true,
                          "id": "SchemaCoder@undefined",
                          "isType": false,
                          "name": "TagSchema",
                          "promise": Promise {},
                          "typeDeclaration": "JSONSchema6",
                        },
                      },
                      "externalImports": Map {
                        "JSONSchema6" => Object {
                          "isType": true,
                          "modulePath": "json-schema",
                        },
                      },
                      "imports": Map {},
                      "path": "components/Tag.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "CategorySchema" => Object {
                    "isType": false,
                    "name": "CategorySchema",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                        "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                      },
                      "exports": Map {
                        "Category" => Object {
                          "code": "{id: number,name: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isType": true,
                          "name": "Category",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                        "CategorySchema" => Object {
                          "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                          "done": true,
                          "id": "SchemaCoder@undefined",
                          "isType": false,
                          "name": "CategorySchema",
                          "promise": Promise {},
                          "typeDeclaration": "JSONSchema6",
                        },
                      },
                      "externalImports": Map {
                        "JSONSchema6" => Object {
                          "isType": true,
                          "modulePath": "json-schema",
                        },
                      },
                      "imports": Map {},
                      "path": "components/Category.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "TagSchema" => Object {
                    "isType": false,
                    "name": "TagSchema",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                        "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                      },
                      "exports": Map {
                        "Tag" => Object {
                          "code": "{id: number,name: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isType": true,
                          "name": "Tag",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                        "TagSchema" => Object {
                          "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                          "done": true,
                          "id": "SchemaCoder@undefined",
                          "isType": false,
                          "name": "TagSchema",
                          "promise": Promise {},
                          "typeDeclaration": "JSONSchema6",
                        },
                      },
                      "externalImports": Map {
                        "JSONSchema6" => Object {
                          "isType": true,
                          "modulePath": "json-schema",
                        },
                      },
                      "imports": Map {},
                      "path": "components/Tag.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                },
                "path": "components/Pet.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Tools" => Object {
              "isType": true,
              "name": "Tools",
              "script": Script {
                "cache": Map {
                  "tools@[object Object]:true" => "Tools",
                },
                "exports": Map {
                  "Tools" => Object {
                    "code": "
    {
        oneOf: (array: string[]) => string;
        randomFromSchema: (schema: JSONSchema6 ) => unknown;
        accepts: (contentType: string) => boolean;
    }",
                    "done": true,
                    "id": "tools",
                    "isType": true,
                    "name": "Tools",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": false,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "internal/tools.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/pet.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "HTTP_PUT" => Object {
        "isType": true,
        "name": "HTTP_PUT",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1pet/post@[object Object]:true" => "HTTP_POST",
            "OperationTypeCoder@petstore.yaml#/paths/~1pet/put@[object Object]:true" => "HTTP_PUT",
            "SchemaTypeCoder@undefined@components/Pet.ts:true" => "Pet",
            "tools@internal/tools.ts:true" => "Tools",
          },
          "exports": Map {
            "HTTP_POST" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: undefined, path: undefined, header: undefined, body: Pet, context: Context, tools: Tools}) => {  
            status: 200, 
          contentType?: \\"application/xml\\",
          body?: Pet
          
        } | {  
            status: 200, 
          contentType?: \\"application/json\\",
          body?: Pet
          
        } | {  
            status: 405, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet/post",
              "isType": true,
              "name": "HTTP_POST",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_PUT" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: undefined, path: undefined, header: undefined, body: Pet, context: Context, tools: Tools}) => {  
            status: 200, 
          contentType?: \\"application/xml\\",
          body?: Pet
          
        } | {  
            status: 200, 
          contentType?: \\"application/json\\",
          body?: Pet
          
        } | {  
            status: 400, 
          
          
          
        } | {  
            status: 404, 
          
          
          
        } | {  
            status: 405, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet/put",
              "isType": true,
              "name": "HTTP_PUT",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "Context" => Object {
              "isType": true,
              "modulePath": "../context/context.js",
            },
          },
          "imports": Map {
            "Pet" => Object {
              "isType": true,
              "name": "Pet",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
                  "SchemaCoder@undefined@[object Object]:false" => "PetSchema",
                  "SchemaTypeCoder@undefined@components/Category.ts:true" => "Category",
                  "SchemaTypeCoder@undefined@components/Tag.ts:true" => "Tag",
                  "SchemaCoder@undefined@components/Category.ts:false" => "CategorySchema",
                  "SchemaCoder@undefined@components/Tag.ts:false" => "TagSchema",
                },
                "exports": Map {
                  "Pet" => Object {
                    "code": "{id: number,name: string,category: Category,photoUrls: Array<string>,tags: Array<Tag>,status: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Pet",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "PetSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [\\"name\\",\\"photoUrls\\"],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"}, \\"category\\": CategorySchema, \\"photoUrls\\": {
        type: \\"array\\",     
        items: {\\"type\\":\\"string\\"}
      }, \\"tags\\": {
        type: \\"array\\",     
        items: TagSchema
      }, \\"status\\": {\\"type\\":\\"string\\",\\"description\\":\\"pet status in the store\\",\\"enum\\":[\\"available\\",\\"pending\\",\\"sold\\"]} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "PetSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {
                  "Category" => Object {
                    "isType": true,
                    "name": "Category",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                        "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                      },
                      "exports": Map {
                        "Category" => Object {
                          "code": "{id: number,name: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isType": true,
                          "name": "Category",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                        "CategorySchema" => Object {
                          "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                          "done": true,
                          "id": "SchemaCoder@undefined",
                          "isType": false,
                          "name": "CategorySchema",
                          "promise": Promise {},
                          "typeDeclaration": "JSONSchema6",
                        },
                      },
                      "externalImports": Map {
                        "JSONSchema6" => Object {
                          "isType": true,
                          "modulePath": "json-schema",
                        },
                      },
                      "imports": Map {},
                      "path": "components/Category.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "Tag" => Object {
                    "isType": true,
                    "name": "Tag",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                        "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                      },
                      "exports": Map {
                        "Tag" => Object {
                          "code": "{id: number,name: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isType": true,
                          "name": "Tag",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                        "TagSchema" => Object {
                          "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                          "done": true,
                          "id": "SchemaCoder@undefined",
                          "isType": false,
                          "name": "TagSchema",
                          "promise": Promise {},
                          "typeDeclaration": "JSONSchema6",
                        },
                      },
                      "externalImports": Map {
                        "JSONSchema6" => Object {
                          "isType": true,
                          "modulePath": "json-schema",
                        },
                      },
                      "imports": Map {},
                      "path": "components/Tag.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "CategorySchema" => Object {
                    "isType": false,
                    "name": "CategorySchema",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                        "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                      },
                      "exports": Map {
                        "Category" => Object {
                          "code": "{id: number,name: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isType": true,
                          "name": "Category",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                        "CategorySchema" => Object {
                          "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                          "done": true,
                          "id": "SchemaCoder@undefined",
                          "isType": false,
                          "name": "CategorySchema",
                          "promise": Promise {},
                          "typeDeclaration": "JSONSchema6",
                        },
                      },
                      "externalImports": Map {
                        "JSONSchema6" => Object {
                          "isType": true,
                          "modulePath": "json-schema",
                        },
                      },
                      "imports": Map {},
                      "path": "components/Category.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "TagSchema" => Object {
                    "isType": false,
                    "name": "TagSchema",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                        "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                      },
                      "exports": Map {
                        "Tag" => Object {
                          "code": "{id: number,name: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isType": true,
                          "name": "Tag",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                        "TagSchema" => Object {
                          "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                          "done": true,
                          "id": "SchemaCoder@undefined",
                          "isType": false,
                          "name": "TagSchema",
                          "promise": Promise {},
                          "typeDeclaration": "JSONSchema6",
                        },
                      },
                      "externalImports": Map {
                        "JSONSchema6" => Object {
                          "isType": true,
                          "modulePath": "json-schema",
                        },
                      },
                      "imports": Map {},
                      "path": "components/Tag.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                },
                "path": "components/Pet.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Tools" => Object {
              "isType": true,
              "name": "Tools",
              "script": Script {
                "cache": Map {
                  "tools@[object Object]:true" => "Tools",
                },
                "exports": Map {
                  "Tools" => Object {
                    "code": "
    {
        oneOf: (array: string[]) => string;
        randomFromSchema: (schema: JSONSchema6 ) => unknown;
        accepts: (contentType: string) => boolean;
    }",
                    "done": true,
                    "id": "tools",
                    "isType": true,
                    "name": "Tools",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": false,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "internal/tools.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/pet.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Pet" => Object {
        "isType": true,
        "name": "Pet",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
            "SchemaCoder@undefined@[object Object]:false" => "PetSchema",
            "SchemaTypeCoder@undefined@components/Category.ts:true" => "Category",
            "SchemaTypeCoder@undefined@components/Tag.ts:true" => "Tag",
            "SchemaCoder@undefined@components/Category.ts:false" => "CategorySchema",
            "SchemaCoder@undefined@components/Tag.ts:false" => "TagSchema",
          },
          "exports": Map {
            "Pet" => Object {
              "code": "{id: number,name: string,category: Category,photoUrls: Array<string>,tags: Array<Tag>,status: string}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isType": true,
              "name": "Pet",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "PetSchema" => Object {
              "code": "
      {
        type: \\"object\\",
        required: [\\"name\\",\\"photoUrls\\"],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"}, \\"category\\": CategorySchema, \\"photoUrls\\": {
        type: \\"array\\",     
        items: {\\"type\\":\\"string\\"}
      }, \\"tags\\": {
        type: \\"array\\",     
        items: TagSchema
      }, \\"status\\": {\\"type\\":\\"string\\",\\"description\\":\\"pet status in the store\\",\\"enum\\":[\\"available\\",\\"pending\\",\\"sold\\"]} }
      }
    ",
              "done": true,
              "id": "SchemaCoder@undefined",
              "isType": false,
              "name": "PetSchema",
              "promise": Promise {},
              "typeDeclaration": "JSONSchema6",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": true,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {
            "Category" => Object {
              "isType": true,
              "name": "Category",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                  "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                },
                "exports": Map {
                  "Category" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Category",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "CategorySchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "CategorySchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Category.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Tag" => Object {
              "isType": true,
              "name": "Tag",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                  "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                },
                "exports": Map {
                  "Tag" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Tag",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "TagSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "TagSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Tag.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "CategorySchema" => Object {
              "isType": false,
              "name": "CategorySchema",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                  "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                },
                "exports": Map {
                  "Category" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Category",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "CategorySchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "CategorySchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Category.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "TagSchema" => Object {
              "isType": false,
              "name": "TagSchema",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                  "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                },
                "exports": Map {
                  "Tag" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Tag",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "TagSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "TagSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Tag.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "components/Pet.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "PetSchema" => Object {
        "isType": false,
        "name": "PetSchema",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
            "SchemaCoder@undefined@[object Object]:false" => "PetSchema",
            "SchemaTypeCoder@undefined@components/Category.ts:true" => "Category",
            "SchemaTypeCoder@undefined@components/Tag.ts:true" => "Tag",
            "SchemaCoder@undefined@components/Category.ts:false" => "CategorySchema",
            "SchemaCoder@undefined@components/Tag.ts:false" => "TagSchema",
          },
          "exports": Map {
            "Pet" => Object {
              "code": "{id: number,name: string,category: Category,photoUrls: Array<string>,tags: Array<Tag>,status: string}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isType": true,
              "name": "Pet",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "PetSchema" => Object {
              "code": "
      {
        type: \\"object\\",
        required: [\\"name\\",\\"photoUrls\\"],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"}, \\"category\\": CategorySchema, \\"photoUrls\\": {
        type: \\"array\\",     
        items: {\\"type\\":\\"string\\"}
      }, \\"tags\\": {
        type: \\"array\\",     
        items: TagSchema
      }, \\"status\\": {\\"type\\":\\"string\\",\\"description\\":\\"pet status in the store\\",\\"enum\\":[\\"available\\",\\"pending\\",\\"sold\\"]} }
      }
    ",
              "done": true,
              "id": "SchemaCoder@undefined",
              "isType": false,
              "name": "PetSchema",
              "promise": Promise {},
              "typeDeclaration": "JSONSchema6",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": true,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {
            "Category" => Object {
              "isType": true,
              "name": "Category",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                  "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                },
                "exports": Map {
                  "Category" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Category",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "CategorySchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "CategorySchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Category.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Tag" => Object {
              "isType": true,
              "name": "Tag",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                  "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                },
                "exports": Map {
                  "Tag" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Tag",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "TagSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "TagSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Tag.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "CategorySchema" => Object {
              "isType": false,
              "name": "CategorySchema",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                  "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                },
                "exports": Map {
                  "Category" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Category",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "CategorySchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "CategorySchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Category.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "TagSchema" => Object {
              "isType": false,
              "name": "TagSchema",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                  "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                },
                "exports": Map {
                  "Tag" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Tag",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "TagSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "TagSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Tag.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "components/Pet.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/pet.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/pet.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@petstore.yaml#/paths/~1pet/post@[object Object]:true" => "HTTP_POST",
      "OperationTypeCoder@petstore.yaml#/paths/~1pet/put@[object Object]:true" => "HTTP_PUT",
      "SchemaTypeCoder@undefined@components/Pet.ts:true" => "Pet",
      "tools@internal/tools.ts:true" => "Tools",
    },
    "exports": Map {
      "HTTP_POST" => Object {
        "code": "({ query, path, header, body, context, tools }: { query: undefined, path: undefined, header: undefined, body: Pet, context: Context, tools: Tools}) => {  
            status: 200, 
          contentType?: \\"application/xml\\",
          body?: Pet
          
        } | {  
            status: 200, 
          contentType?: \\"application/json\\",
          body?: Pet
          
        } | {  
            status: 405, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet/post",
        "isType": true,
        "name": "HTTP_POST",
        "promise": Promise {},
        "typeDeclaration": "",
      },
      "HTTP_PUT" => Object {
        "code": "({ query, path, header, body, context, tools }: { query: undefined, path: undefined, header: undefined, body: Pet, context: Context, tools: Tools}) => {  
            status: 200, 
          contentType?: \\"application/xml\\",
          body?: Pet
          
        } | {  
            status: 200, 
          contentType?: \\"application/json\\",
          body?: Pet
          
        } | {  
            status: 400, 
          
          
          
        } | {  
            status: 404, 
          
          
          
        } | {  
            status: 405, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet/put",
        "isType": true,
        "name": "HTTP_PUT",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {
      "Context" => Object {
        "isType": true,
        "modulePath": "../context/context.js",
      },
    },
    "imports": Map {
      "Pet" => Object {
        "isType": true,
        "name": "Pet",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
            "SchemaCoder@undefined@[object Object]:false" => "PetSchema",
            "SchemaTypeCoder@undefined@components/Category.ts:true" => "Category",
            "SchemaTypeCoder@undefined@components/Tag.ts:true" => "Tag",
            "SchemaCoder@undefined@components/Category.ts:false" => "CategorySchema",
            "SchemaCoder@undefined@components/Tag.ts:false" => "TagSchema",
          },
          "exports": Map {
            "Pet" => Object {
              "code": "{id: number,name: string,category: Category,photoUrls: Array<string>,tags: Array<Tag>,status: string}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isType": true,
              "name": "Pet",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "PetSchema" => Object {
              "code": "
      {
        type: \\"object\\",
        required: [\\"name\\",\\"photoUrls\\"],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"}, \\"category\\": CategorySchema, \\"photoUrls\\": {
        type: \\"array\\",     
        items: {\\"type\\":\\"string\\"}
      }, \\"tags\\": {
        type: \\"array\\",     
        items: TagSchema
      }, \\"status\\": {\\"type\\":\\"string\\",\\"description\\":\\"pet status in the store\\",\\"enum\\":[\\"available\\",\\"pending\\",\\"sold\\"]} }
      }
    ",
              "done": true,
              "id": "SchemaCoder@undefined",
              "isType": false,
              "name": "PetSchema",
              "promise": Promise {},
              "typeDeclaration": "JSONSchema6",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": true,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {
            "Category" => Object {
              "isType": true,
              "name": "Category",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                  "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                },
                "exports": Map {
                  "Category" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Category",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "CategorySchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "CategorySchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Category.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Tag" => Object {
              "isType": true,
              "name": "Tag",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                  "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                },
                "exports": Map {
                  "Tag" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Tag",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "TagSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "TagSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Tag.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "CategorySchema" => Object {
              "isType": false,
              "name": "CategorySchema",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                  "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                },
                "exports": Map {
                  "Category" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Category",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "CategorySchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "CategorySchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Category.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "TagSchema" => Object {
              "isType": false,
              "name": "TagSchema",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                  "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                },
                "exports": Map {
                  "Tag" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Tag",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "TagSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "TagSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Tag.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "components/Pet.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Tools" => Object {
        "isType": true,
        "name": "Tools",
        "script": Script {
          "cache": Map {
            "tools@[object Object]:true" => "Tools",
          },
          "exports": Map {
            "Tools" => Object {
              "code": "
    {
        oneOf: (array: string[]) => string;
        randomFromSchema: (schema: JSONSchema6 ) => unknown;
        accepts: (contentType: string) => boolean;
    }",
              "done": true,
              "id": "tools",
              "isType": true,
              "name": "Tools",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": false,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "internal/tools.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/pet.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/pet/findByStatus.ts" => Script {
    "cache": Map {
      "OperationCoder@petstore.yaml#/paths/~1pet~1findByStatus/get@[object Object]:false" => "GET",
      "OperationTypeCoder@petstore.yaml#/paths/~1pet~1findByStatus/get@path-types/pet/findByStatus.types.ts:true" => "HTTP_GET",
      "SchemaTypeCoder@undefined@components/Pet.ts:true" => "Pet",
      "SchemaCoder@undefined@components/Pet.ts:false" => "PetSchema",
    },
    "exports": Map {
      "GET" => Object {
        "code": "({ query, context, tools }) => {
      const statusCode = tools.oneOf([\\"200\\",\\"400\\"]);

      if (statusCode === \\"200\\") { 
        if (tools.accepts(\\"application/xml\\")) { 
      

      

 

      return {
        status: 200,
        contentType: \\"application/xml\\",
        body: tools.randomFromSchema({
        type: \\"array\\",     
        items: PetSchema
      }) as Array<Pet>
      };
    }
if (tools.accepts(\\"application/json\\")) { 
      

      

 

      return {
        status: 200,
        contentType: \\"application/json\\",
        body: tools.randomFromSchema({
        type: \\"array\\",     
        items: PetSchema
      }) as Array<Pet>
      };
    }
      }
if (statusCode === \\"400\\") { 
        return { 
        status: 400 
      }
      }
 
      return {
        status: 415,
        contentType: \\"text/plain\\",
        body: \\"HTTP 415: Unsupported Media Type\\",
      }
    }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1pet~1findByStatus/get",
        "isType": false,
        "name": "GET",
        "promise": Promise {},
        "typeDeclaration": "HTTP_GET",
      },
    },
    "externalImports": Map {},
    "imports": Map {
      "HTTP_GET" => Object {
        "isType": true,
        "name": "HTTP_GET",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1pet~1findByStatus/get@[object Object]:true" => "HTTP_GET",
            "tools@internal/tools.ts:true" => "Tools",
            "SchemaTypeCoder@undefined@components/Pet.ts:true" => "Pet",
          },
          "exports": Map {
            "HTTP_GET" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: {status?: string}, path: never, header: never, body: undefined, context: Context, tools: Tools}) => {  
            status: 200, 
          contentType?: \\"application/xml\\",
          body?: Array<Pet>
          
        } | {  
            status: 200, 
          contentType?: \\"application/json\\",
          body?: Array<Pet>
          
        } | {  
            status: 400, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1findByStatus/get",
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "Context" => Object {
              "isType": true,
              "modulePath": "../../context/context.js",
            },
          },
          "imports": Map {
            "Tools" => Object {
              "isType": true,
              "name": "Tools",
              "script": Script {
                "cache": Map {
                  "tools@[object Object]:true" => "Tools",
                },
                "exports": Map {
                  "Tools" => Object {
                    "code": "
    {
        oneOf: (array: string[]) => string;
        randomFromSchema: (schema: JSONSchema6 ) => unknown;
        accepts: (contentType: string) => boolean;
    }",
                    "done": true,
                    "id": "tools",
                    "isType": true,
                    "name": "Tools",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": false,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "internal/tools.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Pet" => Object {
              "isType": true,
              "name": "Pet",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
                  "SchemaCoder@undefined@[object Object]:false" => "PetSchema",
                  "SchemaTypeCoder@undefined@components/Category.ts:true" => "Category",
                  "SchemaTypeCoder@undefined@components/Tag.ts:true" => "Tag",
                  "SchemaCoder@undefined@components/Category.ts:false" => "CategorySchema",
                  "SchemaCoder@undefined@components/Tag.ts:false" => "TagSchema",
                },
                "exports": Map {
                  "Pet" => Object {
                    "code": "{id: number,name: string,category: Category,photoUrls: Array<string>,tags: Array<Tag>,status: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Pet",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "PetSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [\\"name\\",\\"photoUrls\\"],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"}, \\"category\\": CategorySchema, \\"photoUrls\\": {
        type: \\"array\\",     
        items: {\\"type\\":\\"string\\"}
      }, \\"tags\\": {
        type: \\"array\\",     
        items: TagSchema
      }, \\"status\\": {\\"type\\":\\"string\\",\\"description\\":\\"pet status in the store\\",\\"enum\\":[\\"available\\",\\"pending\\",\\"sold\\"]} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "PetSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {
                  "Category" => Object {
                    "isType": true,
                    "name": "Category",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                        "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                      },
                      "exports": Map {
                        "Category" => Object {
                          "code": "{id: number,name: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isType": true,
                          "name": "Category",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                        "CategorySchema" => Object {
                          "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                          "done": true,
                          "id": "SchemaCoder@undefined",
                          "isType": false,
                          "name": "CategorySchema",
                          "promise": Promise {},
                          "typeDeclaration": "JSONSchema6",
                        },
                      },
                      "externalImports": Map {
                        "JSONSchema6" => Object {
                          "isType": true,
                          "modulePath": "json-schema",
                        },
                      },
                      "imports": Map {},
                      "path": "components/Category.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "Tag" => Object {
                    "isType": true,
                    "name": "Tag",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                        "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                      },
                      "exports": Map {
                        "Tag" => Object {
                          "code": "{id: number,name: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isType": true,
                          "name": "Tag",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                        "TagSchema" => Object {
                          "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                          "done": true,
                          "id": "SchemaCoder@undefined",
                          "isType": false,
                          "name": "TagSchema",
                          "promise": Promise {},
                          "typeDeclaration": "JSONSchema6",
                        },
                      },
                      "externalImports": Map {
                        "JSONSchema6" => Object {
                          "isType": true,
                          "modulePath": "json-schema",
                        },
                      },
                      "imports": Map {},
                      "path": "components/Tag.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "CategorySchema" => Object {
                    "isType": false,
                    "name": "CategorySchema",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                        "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                      },
                      "exports": Map {
                        "Category" => Object {
                          "code": "{id: number,name: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isType": true,
                          "name": "Category",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                        "CategorySchema" => Object {
                          "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                          "done": true,
                          "id": "SchemaCoder@undefined",
                          "isType": false,
                          "name": "CategorySchema",
                          "promise": Promise {},
                          "typeDeclaration": "JSONSchema6",
                        },
                      },
                      "externalImports": Map {
                        "JSONSchema6" => Object {
                          "isType": true,
                          "modulePath": "json-schema",
                        },
                      },
                      "imports": Map {},
                      "path": "components/Category.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "TagSchema" => Object {
                    "isType": false,
                    "name": "TagSchema",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                        "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                      },
                      "exports": Map {
                        "Tag" => Object {
                          "code": "{id: number,name: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isType": true,
                          "name": "Tag",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                        "TagSchema" => Object {
                          "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                          "done": true,
                          "id": "SchemaCoder@undefined",
                          "isType": false,
                          "name": "TagSchema",
                          "promise": Promise {},
                          "typeDeclaration": "JSONSchema6",
                        },
                      },
                      "externalImports": Map {
                        "JSONSchema6" => Object {
                          "isType": true,
                          "modulePath": "json-schema",
                        },
                      },
                      "imports": Map {},
                      "path": "components/Tag.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                },
                "path": "components/Pet.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/pet/findByStatus.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Pet" => Object {
        "isType": true,
        "name": "Pet",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
            "SchemaCoder@undefined@[object Object]:false" => "PetSchema",
            "SchemaTypeCoder@undefined@components/Category.ts:true" => "Category",
            "SchemaTypeCoder@undefined@components/Tag.ts:true" => "Tag",
            "SchemaCoder@undefined@components/Category.ts:false" => "CategorySchema",
            "SchemaCoder@undefined@components/Tag.ts:false" => "TagSchema",
          },
          "exports": Map {
            "Pet" => Object {
              "code": "{id: number,name: string,category: Category,photoUrls: Array<string>,tags: Array<Tag>,status: string}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isType": true,
              "name": "Pet",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "PetSchema" => Object {
              "code": "
      {
        type: \\"object\\",
        required: [\\"name\\",\\"photoUrls\\"],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"}, \\"category\\": CategorySchema, \\"photoUrls\\": {
        type: \\"array\\",     
        items: {\\"type\\":\\"string\\"}
      }, \\"tags\\": {
        type: \\"array\\",     
        items: TagSchema
      }, \\"status\\": {\\"type\\":\\"string\\",\\"description\\":\\"pet status in the store\\",\\"enum\\":[\\"available\\",\\"pending\\",\\"sold\\"]} }
      }
    ",
              "done": true,
              "id": "SchemaCoder@undefined",
              "isType": false,
              "name": "PetSchema",
              "promise": Promise {},
              "typeDeclaration": "JSONSchema6",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": true,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {
            "Category" => Object {
              "isType": true,
              "name": "Category",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                  "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                },
                "exports": Map {
                  "Category" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Category",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "CategorySchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "CategorySchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Category.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Tag" => Object {
              "isType": true,
              "name": "Tag",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                  "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                },
                "exports": Map {
                  "Tag" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Tag",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "TagSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "TagSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Tag.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "CategorySchema" => Object {
              "isType": false,
              "name": "CategorySchema",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                  "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                },
                "exports": Map {
                  "Category" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Category",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "CategorySchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "CategorySchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Category.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "TagSchema" => Object {
              "isType": false,
              "name": "TagSchema",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                  "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                },
                "exports": Map {
                  "Tag" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Tag",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "TagSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "TagSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Tag.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "components/Pet.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "PetSchema" => Object {
        "isType": false,
        "name": "PetSchema",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
            "SchemaCoder@undefined@[object Object]:false" => "PetSchema",
            "SchemaTypeCoder@undefined@components/Category.ts:true" => "Category",
            "SchemaTypeCoder@undefined@components/Tag.ts:true" => "Tag",
            "SchemaCoder@undefined@components/Category.ts:false" => "CategorySchema",
            "SchemaCoder@undefined@components/Tag.ts:false" => "TagSchema",
          },
          "exports": Map {
            "Pet" => Object {
              "code": "{id: number,name: string,category: Category,photoUrls: Array<string>,tags: Array<Tag>,status: string}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isType": true,
              "name": "Pet",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "PetSchema" => Object {
              "code": "
      {
        type: \\"object\\",
        required: [\\"name\\",\\"photoUrls\\"],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"}, \\"category\\": CategorySchema, \\"photoUrls\\": {
        type: \\"array\\",     
        items: {\\"type\\":\\"string\\"}
      }, \\"tags\\": {
        type: \\"array\\",     
        items: TagSchema
      }, \\"status\\": {\\"type\\":\\"string\\",\\"description\\":\\"pet status in the store\\",\\"enum\\":[\\"available\\",\\"pending\\",\\"sold\\"]} }
      }
    ",
              "done": true,
              "id": "SchemaCoder@undefined",
              "isType": false,
              "name": "PetSchema",
              "promise": Promise {},
              "typeDeclaration": "JSONSchema6",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": true,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {
            "Category" => Object {
              "isType": true,
              "name": "Category",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                  "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                },
                "exports": Map {
                  "Category" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Category",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "CategorySchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "CategorySchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Category.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Tag" => Object {
              "isType": true,
              "name": "Tag",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                  "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                },
                "exports": Map {
                  "Tag" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Tag",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "TagSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "TagSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Tag.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "CategorySchema" => Object {
              "isType": false,
              "name": "CategorySchema",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                  "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                },
                "exports": Map {
                  "Category" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Category",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "CategorySchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "CategorySchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Category.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "TagSchema" => Object {
              "isType": false,
              "name": "TagSchema",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                  "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                },
                "exports": Map {
                  "Tag" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Tag",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "TagSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "TagSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Tag.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "components/Pet.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/pet/findByStatus.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/pet/findByStatus.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@petstore.yaml#/paths/~1pet~1findByStatus/get@[object Object]:true" => "HTTP_GET",
      "tools@internal/tools.ts:true" => "Tools",
      "SchemaTypeCoder@undefined@components/Pet.ts:true" => "Pet",
    },
    "exports": Map {
      "HTTP_GET" => Object {
        "code": "({ query, path, header, body, context, tools }: { query: {status?: string}, path: never, header: never, body: undefined, context: Context, tools: Tools}) => {  
            status: 200, 
          contentType?: \\"application/xml\\",
          body?: Array<Pet>
          
        } | {  
            status: 200, 
          contentType?: \\"application/json\\",
          body?: Array<Pet>
          
        } | {  
            status: 400, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1findByStatus/get",
        "isType": true,
        "name": "HTTP_GET",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {
      "Context" => Object {
        "isType": true,
        "modulePath": "../../context/context.js",
      },
    },
    "imports": Map {
      "Tools" => Object {
        "isType": true,
        "name": "Tools",
        "script": Script {
          "cache": Map {
            "tools@[object Object]:true" => "Tools",
          },
          "exports": Map {
            "Tools" => Object {
              "code": "
    {
        oneOf: (array: string[]) => string;
        randomFromSchema: (schema: JSONSchema6 ) => unknown;
        accepts: (contentType: string) => boolean;
    }",
              "done": true,
              "id": "tools",
              "isType": true,
              "name": "Tools",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": false,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "internal/tools.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Pet" => Object {
        "isType": true,
        "name": "Pet",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
            "SchemaCoder@undefined@[object Object]:false" => "PetSchema",
            "SchemaTypeCoder@undefined@components/Category.ts:true" => "Category",
            "SchemaTypeCoder@undefined@components/Tag.ts:true" => "Tag",
            "SchemaCoder@undefined@components/Category.ts:false" => "CategorySchema",
            "SchemaCoder@undefined@components/Tag.ts:false" => "TagSchema",
          },
          "exports": Map {
            "Pet" => Object {
              "code": "{id: number,name: string,category: Category,photoUrls: Array<string>,tags: Array<Tag>,status: string}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isType": true,
              "name": "Pet",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "PetSchema" => Object {
              "code": "
      {
        type: \\"object\\",
        required: [\\"name\\",\\"photoUrls\\"],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"}, \\"category\\": CategorySchema, \\"photoUrls\\": {
        type: \\"array\\",     
        items: {\\"type\\":\\"string\\"}
      }, \\"tags\\": {
        type: \\"array\\",     
        items: TagSchema
      }, \\"status\\": {\\"type\\":\\"string\\",\\"description\\":\\"pet status in the store\\",\\"enum\\":[\\"available\\",\\"pending\\",\\"sold\\"]} }
      }
    ",
              "done": true,
              "id": "SchemaCoder@undefined",
              "isType": false,
              "name": "PetSchema",
              "promise": Promise {},
              "typeDeclaration": "JSONSchema6",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": true,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {
            "Category" => Object {
              "isType": true,
              "name": "Category",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                  "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                },
                "exports": Map {
                  "Category" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Category",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "CategorySchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "CategorySchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Category.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Tag" => Object {
              "isType": true,
              "name": "Tag",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                  "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                },
                "exports": Map {
                  "Tag" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Tag",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "TagSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "TagSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Tag.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "CategorySchema" => Object {
              "isType": false,
              "name": "CategorySchema",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                  "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                },
                "exports": Map {
                  "Category" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Category",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "CategorySchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "CategorySchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Category.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "TagSchema" => Object {
              "isType": false,
              "name": "TagSchema",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                  "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                },
                "exports": Map {
                  "Tag" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Tag",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "TagSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "TagSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Tag.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "components/Pet.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/pet/findByStatus.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/pet/findByTags.ts" => Script {
    "cache": Map {
      "OperationCoder@petstore.yaml#/paths/~1pet~1findByTags/get@[object Object]:false" => "GET",
      "OperationTypeCoder@petstore.yaml#/paths/~1pet~1findByTags/get@path-types/pet/findByTags.types.ts:true" => "HTTP_GET",
      "SchemaTypeCoder@undefined@components/Pet.ts:true" => "Pet",
      "SchemaCoder@undefined@components/Pet.ts:false" => "PetSchema",
    },
    "exports": Map {
      "GET" => Object {
        "code": "({ query, context, tools }) => {
      const statusCode = tools.oneOf([\\"200\\",\\"400\\"]);

      if (statusCode === \\"200\\") { 
        if (tools.accepts(\\"application/xml\\")) { 
      

      

 

      return {
        status: 200,
        contentType: \\"application/xml\\",
        body: tools.randomFromSchema({
        type: \\"array\\",     
        items: PetSchema
      }) as Array<Pet>
      };
    }
if (tools.accepts(\\"application/json\\")) { 
      

      

 

      return {
        status: 200,
        contentType: \\"application/json\\",
        body: tools.randomFromSchema({
        type: \\"array\\",     
        items: PetSchema
      }) as Array<Pet>
      };
    }
      }
if (statusCode === \\"400\\") { 
        return { 
        status: 400 
      }
      }
 
      return {
        status: 415,
        contentType: \\"text/plain\\",
        body: \\"HTTP 415: Unsupported Media Type\\",
      }
    }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1pet~1findByTags/get",
        "isType": false,
        "name": "GET",
        "promise": Promise {},
        "typeDeclaration": "HTTP_GET",
      },
    },
    "externalImports": Map {},
    "imports": Map {
      "HTTP_GET" => Object {
        "isType": true,
        "name": "HTTP_GET",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1pet~1findByTags/get@[object Object]:true" => "HTTP_GET",
            "tools@internal/tools.ts:true" => "Tools",
            "SchemaTypeCoder@undefined@components/Pet.ts:true" => "Pet",
          },
          "exports": Map {
            "HTTP_GET" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: {tags?: Array<string>}, path: never, header: never, body: undefined, context: Context, tools: Tools}) => {  
            status: 200, 
          contentType?: \\"application/xml\\",
          body?: Array<Pet>
          
        } | {  
            status: 200, 
          contentType?: \\"application/json\\",
          body?: Array<Pet>
          
        } | {  
            status: 400, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1findByTags/get",
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "Context" => Object {
              "isType": true,
              "modulePath": "../../context/context.js",
            },
          },
          "imports": Map {
            "Tools" => Object {
              "isType": true,
              "name": "Tools",
              "script": Script {
                "cache": Map {
                  "tools@[object Object]:true" => "Tools",
                },
                "exports": Map {
                  "Tools" => Object {
                    "code": "
    {
        oneOf: (array: string[]) => string;
        randomFromSchema: (schema: JSONSchema6 ) => unknown;
        accepts: (contentType: string) => boolean;
    }",
                    "done": true,
                    "id": "tools",
                    "isType": true,
                    "name": "Tools",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": false,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "internal/tools.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Pet" => Object {
              "isType": true,
              "name": "Pet",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
                  "SchemaCoder@undefined@[object Object]:false" => "PetSchema",
                  "SchemaTypeCoder@undefined@components/Category.ts:true" => "Category",
                  "SchemaTypeCoder@undefined@components/Tag.ts:true" => "Tag",
                  "SchemaCoder@undefined@components/Category.ts:false" => "CategorySchema",
                  "SchemaCoder@undefined@components/Tag.ts:false" => "TagSchema",
                },
                "exports": Map {
                  "Pet" => Object {
                    "code": "{id: number,name: string,category: Category,photoUrls: Array<string>,tags: Array<Tag>,status: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Pet",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "PetSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [\\"name\\",\\"photoUrls\\"],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"}, \\"category\\": CategorySchema, \\"photoUrls\\": {
        type: \\"array\\",     
        items: {\\"type\\":\\"string\\"}
      }, \\"tags\\": {
        type: \\"array\\",     
        items: TagSchema
      }, \\"status\\": {\\"type\\":\\"string\\",\\"description\\":\\"pet status in the store\\",\\"enum\\":[\\"available\\",\\"pending\\",\\"sold\\"]} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "PetSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {
                  "Category" => Object {
                    "isType": true,
                    "name": "Category",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                        "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                      },
                      "exports": Map {
                        "Category" => Object {
                          "code": "{id: number,name: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isType": true,
                          "name": "Category",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                        "CategorySchema" => Object {
                          "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                          "done": true,
                          "id": "SchemaCoder@undefined",
                          "isType": false,
                          "name": "CategorySchema",
                          "promise": Promise {},
                          "typeDeclaration": "JSONSchema6",
                        },
                      },
                      "externalImports": Map {
                        "JSONSchema6" => Object {
                          "isType": true,
                          "modulePath": "json-schema",
                        },
                      },
                      "imports": Map {},
                      "path": "components/Category.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "Tag" => Object {
                    "isType": true,
                    "name": "Tag",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                        "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                      },
                      "exports": Map {
                        "Tag" => Object {
                          "code": "{id: number,name: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isType": true,
                          "name": "Tag",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                        "TagSchema" => Object {
                          "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                          "done": true,
                          "id": "SchemaCoder@undefined",
                          "isType": false,
                          "name": "TagSchema",
                          "promise": Promise {},
                          "typeDeclaration": "JSONSchema6",
                        },
                      },
                      "externalImports": Map {
                        "JSONSchema6" => Object {
                          "isType": true,
                          "modulePath": "json-schema",
                        },
                      },
                      "imports": Map {},
                      "path": "components/Tag.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "CategorySchema" => Object {
                    "isType": false,
                    "name": "CategorySchema",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                        "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                      },
                      "exports": Map {
                        "Category" => Object {
                          "code": "{id: number,name: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isType": true,
                          "name": "Category",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                        "CategorySchema" => Object {
                          "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                          "done": true,
                          "id": "SchemaCoder@undefined",
                          "isType": false,
                          "name": "CategorySchema",
                          "promise": Promise {},
                          "typeDeclaration": "JSONSchema6",
                        },
                      },
                      "externalImports": Map {
                        "JSONSchema6" => Object {
                          "isType": true,
                          "modulePath": "json-schema",
                        },
                      },
                      "imports": Map {},
                      "path": "components/Category.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "TagSchema" => Object {
                    "isType": false,
                    "name": "TagSchema",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                        "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                      },
                      "exports": Map {
                        "Tag" => Object {
                          "code": "{id: number,name: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isType": true,
                          "name": "Tag",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                        "TagSchema" => Object {
                          "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                          "done": true,
                          "id": "SchemaCoder@undefined",
                          "isType": false,
                          "name": "TagSchema",
                          "promise": Promise {},
                          "typeDeclaration": "JSONSchema6",
                        },
                      },
                      "externalImports": Map {
                        "JSONSchema6" => Object {
                          "isType": true,
                          "modulePath": "json-schema",
                        },
                      },
                      "imports": Map {},
                      "path": "components/Tag.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                },
                "path": "components/Pet.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/pet/findByTags.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Pet" => Object {
        "isType": true,
        "name": "Pet",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
            "SchemaCoder@undefined@[object Object]:false" => "PetSchema",
            "SchemaTypeCoder@undefined@components/Category.ts:true" => "Category",
            "SchemaTypeCoder@undefined@components/Tag.ts:true" => "Tag",
            "SchemaCoder@undefined@components/Category.ts:false" => "CategorySchema",
            "SchemaCoder@undefined@components/Tag.ts:false" => "TagSchema",
          },
          "exports": Map {
            "Pet" => Object {
              "code": "{id: number,name: string,category: Category,photoUrls: Array<string>,tags: Array<Tag>,status: string}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isType": true,
              "name": "Pet",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "PetSchema" => Object {
              "code": "
      {
        type: \\"object\\",
        required: [\\"name\\",\\"photoUrls\\"],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"}, \\"category\\": CategorySchema, \\"photoUrls\\": {
        type: \\"array\\",     
        items: {\\"type\\":\\"string\\"}
      }, \\"tags\\": {
        type: \\"array\\",     
        items: TagSchema
      }, \\"status\\": {\\"type\\":\\"string\\",\\"description\\":\\"pet status in the store\\",\\"enum\\":[\\"available\\",\\"pending\\",\\"sold\\"]} }
      }
    ",
              "done": true,
              "id": "SchemaCoder@undefined",
              "isType": false,
              "name": "PetSchema",
              "promise": Promise {},
              "typeDeclaration": "JSONSchema6",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": true,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {
            "Category" => Object {
              "isType": true,
              "name": "Category",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                  "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                },
                "exports": Map {
                  "Category" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Category",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "CategorySchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "CategorySchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Category.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Tag" => Object {
              "isType": true,
              "name": "Tag",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                  "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                },
                "exports": Map {
                  "Tag" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Tag",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "TagSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "TagSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Tag.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "CategorySchema" => Object {
              "isType": false,
              "name": "CategorySchema",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                  "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                },
                "exports": Map {
                  "Category" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Category",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "CategorySchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "CategorySchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Category.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "TagSchema" => Object {
              "isType": false,
              "name": "TagSchema",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                  "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                },
                "exports": Map {
                  "Tag" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Tag",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "TagSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "TagSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Tag.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "components/Pet.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "PetSchema" => Object {
        "isType": false,
        "name": "PetSchema",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
            "SchemaCoder@undefined@[object Object]:false" => "PetSchema",
            "SchemaTypeCoder@undefined@components/Category.ts:true" => "Category",
            "SchemaTypeCoder@undefined@components/Tag.ts:true" => "Tag",
            "SchemaCoder@undefined@components/Category.ts:false" => "CategorySchema",
            "SchemaCoder@undefined@components/Tag.ts:false" => "TagSchema",
          },
          "exports": Map {
            "Pet" => Object {
              "code": "{id: number,name: string,category: Category,photoUrls: Array<string>,tags: Array<Tag>,status: string}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isType": true,
              "name": "Pet",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "PetSchema" => Object {
              "code": "
      {
        type: \\"object\\",
        required: [\\"name\\",\\"photoUrls\\"],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"}, \\"category\\": CategorySchema, \\"photoUrls\\": {
        type: \\"array\\",     
        items: {\\"type\\":\\"string\\"}
      }, \\"tags\\": {
        type: \\"array\\",     
        items: TagSchema
      }, \\"status\\": {\\"type\\":\\"string\\",\\"description\\":\\"pet status in the store\\",\\"enum\\":[\\"available\\",\\"pending\\",\\"sold\\"]} }
      }
    ",
              "done": true,
              "id": "SchemaCoder@undefined",
              "isType": false,
              "name": "PetSchema",
              "promise": Promise {},
              "typeDeclaration": "JSONSchema6",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": true,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {
            "Category" => Object {
              "isType": true,
              "name": "Category",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                  "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                },
                "exports": Map {
                  "Category" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Category",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "CategorySchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "CategorySchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Category.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Tag" => Object {
              "isType": true,
              "name": "Tag",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                  "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                },
                "exports": Map {
                  "Tag" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Tag",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "TagSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "TagSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Tag.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "CategorySchema" => Object {
              "isType": false,
              "name": "CategorySchema",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                  "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                },
                "exports": Map {
                  "Category" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Category",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "CategorySchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "CategorySchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Category.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "TagSchema" => Object {
              "isType": false,
              "name": "TagSchema",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                  "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                },
                "exports": Map {
                  "Tag" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Tag",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "TagSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "TagSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Tag.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "components/Pet.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/pet/findByTags.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/pet/findByTags.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@petstore.yaml#/paths/~1pet~1findByTags/get@[object Object]:true" => "HTTP_GET",
      "tools@internal/tools.ts:true" => "Tools",
      "SchemaTypeCoder@undefined@components/Pet.ts:true" => "Pet",
    },
    "exports": Map {
      "HTTP_GET" => Object {
        "code": "({ query, path, header, body, context, tools }: { query: {tags?: Array<string>}, path: never, header: never, body: undefined, context: Context, tools: Tools}) => {  
            status: 200, 
          contentType?: \\"application/xml\\",
          body?: Array<Pet>
          
        } | {  
            status: 200, 
          contentType?: \\"application/json\\",
          body?: Array<Pet>
          
        } | {  
            status: 400, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1findByTags/get",
        "isType": true,
        "name": "HTTP_GET",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {
      "Context" => Object {
        "isType": true,
        "modulePath": "../../context/context.js",
      },
    },
    "imports": Map {
      "Tools" => Object {
        "isType": true,
        "name": "Tools",
        "script": Script {
          "cache": Map {
            "tools@[object Object]:true" => "Tools",
          },
          "exports": Map {
            "Tools" => Object {
              "code": "
    {
        oneOf: (array: string[]) => string;
        randomFromSchema: (schema: JSONSchema6 ) => unknown;
        accepts: (contentType: string) => boolean;
    }",
              "done": true,
              "id": "tools",
              "isType": true,
              "name": "Tools",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": false,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "internal/tools.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Pet" => Object {
        "isType": true,
        "name": "Pet",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
            "SchemaCoder@undefined@[object Object]:false" => "PetSchema",
            "SchemaTypeCoder@undefined@components/Category.ts:true" => "Category",
            "SchemaTypeCoder@undefined@components/Tag.ts:true" => "Tag",
            "SchemaCoder@undefined@components/Category.ts:false" => "CategorySchema",
            "SchemaCoder@undefined@components/Tag.ts:false" => "TagSchema",
          },
          "exports": Map {
            "Pet" => Object {
              "code": "{id: number,name: string,category: Category,photoUrls: Array<string>,tags: Array<Tag>,status: string}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isType": true,
              "name": "Pet",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "PetSchema" => Object {
              "code": "
      {
        type: \\"object\\",
        required: [\\"name\\",\\"photoUrls\\"],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"}, \\"category\\": CategorySchema, \\"photoUrls\\": {
        type: \\"array\\",     
        items: {\\"type\\":\\"string\\"}
      }, \\"tags\\": {
        type: \\"array\\",     
        items: TagSchema
      }, \\"status\\": {\\"type\\":\\"string\\",\\"description\\":\\"pet status in the store\\",\\"enum\\":[\\"available\\",\\"pending\\",\\"sold\\"]} }
      }
    ",
              "done": true,
              "id": "SchemaCoder@undefined",
              "isType": false,
              "name": "PetSchema",
              "promise": Promise {},
              "typeDeclaration": "JSONSchema6",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": true,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {
            "Category" => Object {
              "isType": true,
              "name": "Category",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                  "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                },
                "exports": Map {
                  "Category" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Category",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "CategorySchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "CategorySchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Category.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Tag" => Object {
              "isType": true,
              "name": "Tag",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                  "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                },
                "exports": Map {
                  "Tag" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Tag",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "TagSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "TagSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Tag.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "CategorySchema" => Object {
              "isType": false,
              "name": "CategorySchema",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                  "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                },
                "exports": Map {
                  "Category" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Category",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "CategorySchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "CategorySchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Category.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "TagSchema" => Object {
              "isType": false,
              "name": "TagSchema",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                  "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                },
                "exports": Map {
                  "Tag" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Tag",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "TagSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "TagSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Tag.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "components/Pet.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/pet/findByTags.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/pet/{petId}.ts" => Script {
    "cache": Map {
      "OperationCoder@petstore.yaml#/paths/~1pet~1{petId}/get@[object Object]:false" => "GET",
      "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/get@path-types/pet/{petId}.types.ts:true" => "HTTP_GET",
      "OperationCoder@petstore.yaml#/paths/~1pet~1{petId}/post@[object Object]:false" => "POST",
      "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/post@path-types/pet/{petId}.types.ts:true" => "HTTP_POST",
      "OperationCoder@petstore.yaml#/paths/~1pet~1{petId}/delete@[object Object]:false" => "DELETE",
      "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/delete@path-types/pet/{petId}.types.ts:true" => "HTTP_DELETE",
      "SchemaTypeCoder@undefined@components/Pet.ts:true" => "Pet",
      "SchemaCoder@undefined@components/Pet.ts:false" => "PetSchema",
    },
    "exports": Map {
      "GET" => Object {
        "code": "({ path, context, tools }) => {
      const statusCode = tools.oneOf([\\"200\\",\\"400\\",\\"404\\"]);

      if (statusCode === \\"200\\") { 
        if (tools.accepts(\\"application/xml\\")) { 
      

      

 

      return {
        status: 200,
        contentType: \\"application/xml\\",
        body: tools.randomFromSchema(PetSchema) as Pet
      };
    }
if (tools.accepts(\\"application/json\\")) { 
      

      

 

      return {
        status: 200,
        contentType: \\"application/json\\",
        body: tools.randomFromSchema(PetSchema) as Pet
      };
    }
      }
if (statusCode === \\"400\\") { 
        return { 
        status: 400 
      }
      }
if (statusCode === \\"404\\") { 
        return { 
        status: 404 
      }
      }
 
      return {
        status: 415,
        contentType: \\"text/plain\\",
        body: \\"HTTP 415: Unsupported Media Type\\",
      }
    }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1pet~1{petId}/get",
        "isType": false,
        "name": "GET",
        "promise": Promise {},
        "typeDeclaration": "HTTP_GET",
      },
      "POST" => Object {
        "code": "({ path, query, body, context, tools }) => {
      const statusCode = tools.oneOf([\\"405\\"]);

      if (statusCode === \\"405\\") { 
        return { 
        status: 405 
      }
      }
 
      return {
        status: 415,
        contentType: \\"text/plain\\",
        body: \\"HTTP 415: Unsupported Media Type\\",
      }
    }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1pet~1{petId}/post",
        "isType": false,
        "name": "POST",
        "promise": Promise {},
        "typeDeclaration": "HTTP_POST",
      },
      "DELETE" => Object {
        "code": "({ header, path, body, context, tools }) => {
      const statusCode = tools.oneOf([\\"400\\"]);

      if (statusCode === \\"400\\") { 
        return { 
        status: 400 
      }
      }
 
      return {
        status: 415,
        contentType: \\"text/plain\\",
        body: \\"HTTP 415: Unsupported Media Type\\",
      }
    }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1pet~1{petId}/delete",
        "isType": false,
        "name": "DELETE",
        "promise": Promise {},
        "typeDeclaration": "HTTP_DELETE",
      },
    },
    "externalImports": Map {},
    "imports": Map {
      "HTTP_GET" => Object {
        "isType": true,
        "name": "HTTP_GET",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/get@[object Object]:true" => "HTTP_GET",
            "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/post@[object Object]:true" => "HTTP_POST",
            "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/delete@[object Object]:true" => "HTTP_DELETE",
            "tools@internal/tools.ts:true" => "Tools",
            "SchemaTypeCoder@undefined@components/Pet.ts:true" => "Pet",
          },
          "exports": Map {
            "HTTP_GET" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: never, path: {petId: number}, header: never, body: undefined, context: Context, tools: Tools}) => {  
            status: 200, 
          contentType?: \\"application/xml\\",
          body?: Pet
          
        } | {  
            status: 200, 
          contentType?: \\"application/json\\",
          body?: Pet
          
        } | {  
            status: 400, 
          
          
          
        } | {  
            status: 404, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/get",
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_POST" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: {name?: number, status?: string}, path: {petId: number}, header: never, body: undefined, context: Context, tools: Tools}) => {  
            status: 405, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/post",
              "isType": true,
              "name": "HTTP_POST",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_DELETE" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: never, path: {petId: string}, header: {api_key?: string}, body: undefined, context: Context, tools: Tools}) => {  
            status: 400, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/delete",
              "isType": true,
              "name": "HTTP_DELETE",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "Context" => Object {
              "isType": true,
              "modulePath": "../../context/context.js",
            },
          },
          "imports": Map {
            "Tools" => Object {
              "isType": true,
              "name": "Tools",
              "script": Script {
                "cache": Map {
                  "tools@[object Object]:true" => "Tools",
                },
                "exports": Map {
                  "Tools" => Object {
                    "code": "
    {
        oneOf: (array: string[]) => string;
        randomFromSchema: (schema: JSONSchema6 ) => unknown;
        accepts: (contentType: string) => boolean;
    }",
                    "done": true,
                    "id": "tools",
                    "isType": true,
                    "name": "Tools",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": false,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "internal/tools.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Pet" => Object {
              "isType": true,
              "name": "Pet",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
                  "SchemaCoder@undefined@[object Object]:false" => "PetSchema",
                  "SchemaTypeCoder@undefined@components/Category.ts:true" => "Category",
                  "SchemaTypeCoder@undefined@components/Tag.ts:true" => "Tag",
                  "SchemaCoder@undefined@components/Category.ts:false" => "CategorySchema",
                  "SchemaCoder@undefined@components/Tag.ts:false" => "TagSchema",
                },
                "exports": Map {
                  "Pet" => Object {
                    "code": "{id: number,name: string,category: Category,photoUrls: Array<string>,tags: Array<Tag>,status: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Pet",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "PetSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [\\"name\\",\\"photoUrls\\"],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"}, \\"category\\": CategorySchema, \\"photoUrls\\": {
        type: \\"array\\",     
        items: {\\"type\\":\\"string\\"}
      }, \\"tags\\": {
        type: \\"array\\",     
        items: TagSchema
      }, \\"status\\": {\\"type\\":\\"string\\",\\"description\\":\\"pet status in the store\\",\\"enum\\":[\\"available\\",\\"pending\\",\\"sold\\"]} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "PetSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {
                  "Category" => Object {
                    "isType": true,
                    "name": "Category",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                        "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                      },
                      "exports": Map {
                        "Category" => Object {
                          "code": "{id: number,name: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isType": true,
                          "name": "Category",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                        "CategorySchema" => Object {
                          "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                          "done": true,
                          "id": "SchemaCoder@undefined",
                          "isType": false,
                          "name": "CategorySchema",
                          "promise": Promise {},
                          "typeDeclaration": "JSONSchema6",
                        },
                      },
                      "externalImports": Map {
                        "JSONSchema6" => Object {
                          "isType": true,
                          "modulePath": "json-schema",
                        },
                      },
                      "imports": Map {},
                      "path": "components/Category.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "Tag" => Object {
                    "isType": true,
                    "name": "Tag",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                        "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                      },
                      "exports": Map {
                        "Tag" => Object {
                          "code": "{id: number,name: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isType": true,
                          "name": "Tag",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                        "TagSchema" => Object {
                          "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                          "done": true,
                          "id": "SchemaCoder@undefined",
                          "isType": false,
                          "name": "TagSchema",
                          "promise": Promise {},
                          "typeDeclaration": "JSONSchema6",
                        },
                      },
                      "externalImports": Map {
                        "JSONSchema6" => Object {
                          "isType": true,
                          "modulePath": "json-schema",
                        },
                      },
                      "imports": Map {},
                      "path": "components/Tag.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "CategorySchema" => Object {
                    "isType": false,
                    "name": "CategorySchema",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                        "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                      },
                      "exports": Map {
                        "Category" => Object {
                          "code": "{id: number,name: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isType": true,
                          "name": "Category",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                        "CategorySchema" => Object {
                          "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                          "done": true,
                          "id": "SchemaCoder@undefined",
                          "isType": false,
                          "name": "CategorySchema",
                          "promise": Promise {},
                          "typeDeclaration": "JSONSchema6",
                        },
                      },
                      "externalImports": Map {
                        "JSONSchema6" => Object {
                          "isType": true,
                          "modulePath": "json-schema",
                        },
                      },
                      "imports": Map {},
                      "path": "components/Category.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "TagSchema" => Object {
                    "isType": false,
                    "name": "TagSchema",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                        "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                      },
                      "exports": Map {
                        "Tag" => Object {
                          "code": "{id: number,name: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isType": true,
                          "name": "Tag",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                        "TagSchema" => Object {
                          "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                          "done": true,
                          "id": "SchemaCoder@undefined",
                          "isType": false,
                          "name": "TagSchema",
                          "promise": Promise {},
                          "typeDeclaration": "JSONSchema6",
                        },
                      },
                      "externalImports": Map {
                        "JSONSchema6" => Object {
                          "isType": true,
                          "modulePath": "json-schema",
                        },
                      },
                      "imports": Map {},
                      "path": "components/Tag.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                },
                "path": "components/Pet.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/pet/{petId}.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "HTTP_POST" => Object {
        "isType": true,
        "name": "HTTP_POST",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/get@[object Object]:true" => "HTTP_GET",
            "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/post@[object Object]:true" => "HTTP_POST",
            "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/delete@[object Object]:true" => "HTTP_DELETE",
            "tools@internal/tools.ts:true" => "Tools",
            "SchemaTypeCoder@undefined@components/Pet.ts:true" => "Pet",
          },
          "exports": Map {
            "HTTP_GET" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: never, path: {petId: number}, header: never, body: undefined, context: Context, tools: Tools}) => {  
            status: 200, 
          contentType?: \\"application/xml\\",
          body?: Pet
          
        } | {  
            status: 200, 
          contentType?: \\"application/json\\",
          body?: Pet
          
        } | {  
            status: 400, 
          
          
          
        } | {  
            status: 404, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/get",
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_POST" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: {name?: number, status?: string}, path: {petId: number}, header: never, body: undefined, context: Context, tools: Tools}) => {  
            status: 405, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/post",
              "isType": true,
              "name": "HTTP_POST",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_DELETE" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: never, path: {petId: string}, header: {api_key?: string}, body: undefined, context: Context, tools: Tools}) => {  
            status: 400, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/delete",
              "isType": true,
              "name": "HTTP_DELETE",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "Context" => Object {
              "isType": true,
              "modulePath": "../../context/context.js",
            },
          },
          "imports": Map {
            "Tools" => Object {
              "isType": true,
              "name": "Tools",
              "script": Script {
                "cache": Map {
                  "tools@[object Object]:true" => "Tools",
                },
                "exports": Map {
                  "Tools" => Object {
                    "code": "
    {
        oneOf: (array: string[]) => string;
        randomFromSchema: (schema: JSONSchema6 ) => unknown;
        accepts: (contentType: string) => boolean;
    }",
                    "done": true,
                    "id": "tools",
                    "isType": true,
                    "name": "Tools",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": false,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "internal/tools.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Pet" => Object {
              "isType": true,
              "name": "Pet",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
                  "SchemaCoder@undefined@[object Object]:false" => "PetSchema",
                  "SchemaTypeCoder@undefined@components/Category.ts:true" => "Category",
                  "SchemaTypeCoder@undefined@components/Tag.ts:true" => "Tag",
                  "SchemaCoder@undefined@components/Category.ts:false" => "CategorySchema",
                  "SchemaCoder@undefined@components/Tag.ts:false" => "TagSchema",
                },
                "exports": Map {
                  "Pet" => Object {
                    "code": "{id: number,name: string,category: Category,photoUrls: Array<string>,tags: Array<Tag>,status: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Pet",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "PetSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [\\"name\\",\\"photoUrls\\"],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"}, \\"category\\": CategorySchema, \\"photoUrls\\": {
        type: \\"array\\",     
        items: {\\"type\\":\\"string\\"}
      }, \\"tags\\": {
        type: \\"array\\",     
        items: TagSchema
      }, \\"status\\": {\\"type\\":\\"string\\",\\"description\\":\\"pet status in the store\\",\\"enum\\":[\\"available\\",\\"pending\\",\\"sold\\"]} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "PetSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {
                  "Category" => Object {
                    "isType": true,
                    "name": "Category",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                        "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                      },
                      "exports": Map {
                        "Category" => Object {
                          "code": "{id: number,name: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isType": true,
                          "name": "Category",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                        "CategorySchema" => Object {
                          "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                          "done": true,
                          "id": "SchemaCoder@undefined",
                          "isType": false,
                          "name": "CategorySchema",
                          "promise": Promise {},
                          "typeDeclaration": "JSONSchema6",
                        },
                      },
                      "externalImports": Map {
                        "JSONSchema6" => Object {
                          "isType": true,
                          "modulePath": "json-schema",
                        },
                      },
                      "imports": Map {},
                      "path": "components/Category.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "Tag" => Object {
                    "isType": true,
                    "name": "Tag",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                        "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                      },
                      "exports": Map {
                        "Tag" => Object {
                          "code": "{id: number,name: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isType": true,
                          "name": "Tag",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                        "TagSchema" => Object {
                          "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                          "done": true,
                          "id": "SchemaCoder@undefined",
                          "isType": false,
                          "name": "TagSchema",
                          "promise": Promise {},
                          "typeDeclaration": "JSONSchema6",
                        },
                      },
                      "externalImports": Map {
                        "JSONSchema6" => Object {
                          "isType": true,
                          "modulePath": "json-schema",
                        },
                      },
                      "imports": Map {},
                      "path": "components/Tag.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "CategorySchema" => Object {
                    "isType": false,
                    "name": "CategorySchema",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                        "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                      },
                      "exports": Map {
                        "Category" => Object {
                          "code": "{id: number,name: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isType": true,
                          "name": "Category",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                        "CategorySchema" => Object {
                          "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                          "done": true,
                          "id": "SchemaCoder@undefined",
                          "isType": false,
                          "name": "CategorySchema",
                          "promise": Promise {},
                          "typeDeclaration": "JSONSchema6",
                        },
                      },
                      "externalImports": Map {
                        "JSONSchema6" => Object {
                          "isType": true,
                          "modulePath": "json-schema",
                        },
                      },
                      "imports": Map {},
                      "path": "components/Category.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "TagSchema" => Object {
                    "isType": false,
                    "name": "TagSchema",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                        "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                      },
                      "exports": Map {
                        "Tag" => Object {
                          "code": "{id: number,name: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isType": true,
                          "name": "Tag",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                        "TagSchema" => Object {
                          "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                          "done": true,
                          "id": "SchemaCoder@undefined",
                          "isType": false,
                          "name": "TagSchema",
                          "promise": Promise {},
                          "typeDeclaration": "JSONSchema6",
                        },
                      },
                      "externalImports": Map {
                        "JSONSchema6" => Object {
                          "isType": true,
                          "modulePath": "json-schema",
                        },
                      },
                      "imports": Map {},
                      "path": "components/Tag.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                },
                "path": "components/Pet.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/pet/{petId}.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "HTTP_DELETE" => Object {
        "isType": true,
        "name": "HTTP_DELETE",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/get@[object Object]:true" => "HTTP_GET",
            "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/post@[object Object]:true" => "HTTP_POST",
            "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/delete@[object Object]:true" => "HTTP_DELETE",
            "tools@internal/tools.ts:true" => "Tools",
            "SchemaTypeCoder@undefined@components/Pet.ts:true" => "Pet",
          },
          "exports": Map {
            "HTTP_GET" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: never, path: {petId: number}, header: never, body: undefined, context: Context, tools: Tools}) => {  
            status: 200, 
          contentType?: \\"application/xml\\",
          body?: Pet
          
        } | {  
            status: 200, 
          contentType?: \\"application/json\\",
          body?: Pet
          
        } | {  
            status: 400, 
          
          
          
        } | {  
            status: 404, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/get",
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_POST" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: {name?: number, status?: string}, path: {petId: number}, header: never, body: undefined, context: Context, tools: Tools}) => {  
            status: 405, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/post",
              "isType": true,
              "name": "HTTP_POST",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_DELETE" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: never, path: {petId: string}, header: {api_key?: string}, body: undefined, context: Context, tools: Tools}) => {  
            status: 400, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/delete",
              "isType": true,
              "name": "HTTP_DELETE",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "Context" => Object {
              "isType": true,
              "modulePath": "../../context/context.js",
            },
          },
          "imports": Map {
            "Tools" => Object {
              "isType": true,
              "name": "Tools",
              "script": Script {
                "cache": Map {
                  "tools@[object Object]:true" => "Tools",
                },
                "exports": Map {
                  "Tools" => Object {
                    "code": "
    {
        oneOf: (array: string[]) => string;
        randomFromSchema: (schema: JSONSchema6 ) => unknown;
        accepts: (contentType: string) => boolean;
    }",
                    "done": true,
                    "id": "tools",
                    "isType": true,
                    "name": "Tools",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": false,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "internal/tools.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Pet" => Object {
              "isType": true,
              "name": "Pet",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
                  "SchemaCoder@undefined@[object Object]:false" => "PetSchema",
                  "SchemaTypeCoder@undefined@components/Category.ts:true" => "Category",
                  "SchemaTypeCoder@undefined@components/Tag.ts:true" => "Tag",
                  "SchemaCoder@undefined@components/Category.ts:false" => "CategorySchema",
                  "SchemaCoder@undefined@components/Tag.ts:false" => "TagSchema",
                },
                "exports": Map {
                  "Pet" => Object {
                    "code": "{id: number,name: string,category: Category,photoUrls: Array<string>,tags: Array<Tag>,status: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Pet",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "PetSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [\\"name\\",\\"photoUrls\\"],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"}, \\"category\\": CategorySchema, \\"photoUrls\\": {
        type: \\"array\\",     
        items: {\\"type\\":\\"string\\"}
      }, \\"tags\\": {
        type: \\"array\\",     
        items: TagSchema
      }, \\"status\\": {\\"type\\":\\"string\\",\\"description\\":\\"pet status in the store\\",\\"enum\\":[\\"available\\",\\"pending\\",\\"sold\\"]} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "PetSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {
                  "Category" => Object {
                    "isType": true,
                    "name": "Category",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                        "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                      },
                      "exports": Map {
                        "Category" => Object {
                          "code": "{id: number,name: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isType": true,
                          "name": "Category",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                        "CategorySchema" => Object {
                          "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                          "done": true,
                          "id": "SchemaCoder@undefined",
                          "isType": false,
                          "name": "CategorySchema",
                          "promise": Promise {},
                          "typeDeclaration": "JSONSchema6",
                        },
                      },
                      "externalImports": Map {
                        "JSONSchema6" => Object {
                          "isType": true,
                          "modulePath": "json-schema",
                        },
                      },
                      "imports": Map {},
                      "path": "components/Category.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "Tag" => Object {
                    "isType": true,
                    "name": "Tag",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                        "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                      },
                      "exports": Map {
                        "Tag" => Object {
                          "code": "{id: number,name: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isType": true,
                          "name": "Tag",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                        "TagSchema" => Object {
                          "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                          "done": true,
                          "id": "SchemaCoder@undefined",
                          "isType": false,
                          "name": "TagSchema",
                          "promise": Promise {},
                          "typeDeclaration": "JSONSchema6",
                        },
                      },
                      "externalImports": Map {
                        "JSONSchema6" => Object {
                          "isType": true,
                          "modulePath": "json-schema",
                        },
                      },
                      "imports": Map {},
                      "path": "components/Tag.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "CategorySchema" => Object {
                    "isType": false,
                    "name": "CategorySchema",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                        "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                      },
                      "exports": Map {
                        "Category" => Object {
                          "code": "{id: number,name: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isType": true,
                          "name": "Category",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                        "CategorySchema" => Object {
                          "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                          "done": true,
                          "id": "SchemaCoder@undefined",
                          "isType": false,
                          "name": "CategorySchema",
                          "promise": Promise {},
                          "typeDeclaration": "JSONSchema6",
                        },
                      },
                      "externalImports": Map {
                        "JSONSchema6" => Object {
                          "isType": true,
                          "modulePath": "json-schema",
                        },
                      },
                      "imports": Map {},
                      "path": "components/Category.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "TagSchema" => Object {
                    "isType": false,
                    "name": "TagSchema",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                        "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                      },
                      "exports": Map {
                        "Tag" => Object {
                          "code": "{id: number,name: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isType": true,
                          "name": "Tag",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                        "TagSchema" => Object {
                          "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                          "done": true,
                          "id": "SchemaCoder@undefined",
                          "isType": false,
                          "name": "TagSchema",
                          "promise": Promise {},
                          "typeDeclaration": "JSONSchema6",
                        },
                      },
                      "externalImports": Map {
                        "JSONSchema6" => Object {
                          "isType": true,
                          "modulePath": "json-schema",
                        },
                      },
                      "imports": Map {},
                      "path": "components/Tag.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                },
                "path": "components/Pet.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/pet/{petId}.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Pet" => Object {
        "isType": true,
        "name": "Pet",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
            "SchemaCoder@undefined@[object Object]:false" => "PetSchema",
            "SchemaTypeCoder@undefined@components/Category.ts:true" => "Category",
            "SchemaTypeCoder@undefined@components/Tag.ts:true" => "Tag",
            "SchemaCoder@undefined@components/Category.ts:false" => "CategorySchema",
            "SchemaCoder@undefined@components/Tag.ts:false" => "TagSchema",
          },
          "exports": Map {
            "Pet" => Object {
              "code": "{id: number,name: string,category: Category,photoUrls: Array<string>,tags: Array<Tag>,status: string}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isType": true,
              "name": "Pet",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "PetSchema" => Object {
              "code": "
      {
        type: \\"object\\",
        required: [\\"name\\",\\"photoUrls\\"],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"}, \\"category\\": CategorySchema, \\"photoUrls\\": {
        type: \\"array\\",     
        items: {\\"type\\":\\"string\\"}
      }, \\"tags\\": {
        type: \\"array\\",     
        items: TagSchema
      }, \\"status\\": {\\"type\\":\\"string\\",\\"description\\":\\"pet status in the store\\",\\"enum\\":[\\"available\\",\\"pending\\",\\"sold\\"]} }
      }
    ",
              "done": true,
              "id": "SchemaCoder@undefined",
              "isType": false,
              "name": "PetSchema",
              "promise": Promise {},
              "typeDeclaration": "JSONSchema6",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": true,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {
            "Category" => Object {
              "isType": true,
              "name": "Category",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                  "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                },
                "exports": Map {
                  "Category" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Category",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "CategorySchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "CategorySchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Category.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Tag" => Object {
              "isType": true,
              "name": "Tag",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                  "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                },
                "exports": Map {
                  "Tag" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Tag",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "TagSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "TagSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Tag.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "CategorySchema" => Object {
              "isType": false,
              "name": "CategorySchema",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                  "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                },
                "exports": Map {
                  "Category" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Category",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "CategorySchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "CategorySchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Category.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "TagSchema" => Object {
              "isType": false,
              "name": "TagSchema",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                  "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                },
                "exports": Map {
                  "Tag" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Tag",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "TagSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "TagSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Tag.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "components/Pet.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "PetSchema" => Object {
        "isType": false,
        "name": "PetSchema",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
            "SchemaCoder@undefined@[object Object]:false" => "PetSchema",
            "SchemaTypeCoder@undefined@components/Category.ts:true" => "Category",
            "SchemaTypeCoder@undefined@components/Tag.ts:true" => "Tag",
            "SchemaCoder@undefined@components/Category.ts:false" => "CategorySchema",
            "SchemaCoder@undefined@components/Tag.ts:false" => "TagSchema",
          },
          "exports": Map {
            "Pet" => Object {
              "code": "{id: number,name: string,category: Category,photoUrls: Array<string>,tags: Array<Tag>,status: string}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isType": true,
              "name": "Pet",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "PetSchema" => Object {
              "code": "
      {
        type: \\"object\\",
        required: [\\"name\\",\\"photoUrls\\"],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"}, \\"category\\": CategorySchema, \\"photoUrls\\": {
        type: \\"array\\",     
        items: {\\"type\\":\\"string\\"}
      }, \\"tags\\": {
        type: \\"array\\",     
        items: TagSchema
      }, \\"status\\": {\\"type\\":\\"string\\",\\"description\\":\\"pet status in the store\\",\\"enum\\":[\\"available\\",\\"pending\\",\\"sold\\"]} }
      }
    ",
              "done": true,
              "id": "SchemaCoder@undefined",
              "isType": false,
              "name": "PetSchema",
              "promise": Promise {},
              "typeDeclaration": "JSONSchema6",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": true,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {
            "Category" => Object {
              "isType": true,
              "name": "Category",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                  "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                },
                "exports": Map {
                  "Category" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Category",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "CategorySchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "CategorySchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Category.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Tag" => Object {
              "isType": true,
              "name": "Tag",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                  "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                },
                "exports": Map {
                  "Tag" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Tag",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "TagSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "TagSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Tag.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "CategorySchema" => Object {
              "isType": false,
              "name": "CategorySchema",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                  "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                },
                "exports": Map {
                  "Category" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Category",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "CategorySchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "CategorySchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Category.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "TagSchema" => Object {
              "isType": false,
              "name": "TagSchema",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                  "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                },
                "exports": Map {
                  "Tag" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Tag",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "TagSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "TagSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Tag.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "components/Pet.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/pet/{petId}.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/pet/{petId}.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/get@[object Object]:true" => "HTTP_GET",
      "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/post@[object Object]:true" => "HTTP_POST",
      "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/delete@[object Object]:true" => "HTTP_DELETE",
      "tools@internal/tools.ts:true" => "Tools",
      "SchemaTypeCoder@undefined@components/Pet.ts:true" => "Pet",
    },
    "exports": Map {
      "HTTP_GET" => Object {
        "code": "({ query, path, header, body, context, tools }: { query: never, path: {petId: number}, header: never, body: undefined, context: Context, tools: Tools}) => {  
            status: 200, 
          contentType?: \\"application/xml\\",
          body?: Pet
          
        } | {  
            status: 200, 
          contentType?: \\"application/json\\",
          body?: Pet
          
        } | {  
            status: 400, 
          
          
          
        } | {  
            status: 404, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/get",
        "isType": true,
        "name": "HTTP_GET",
        "promise": Promise {},
        "typeDeclaration": "",
      },
      "HTTP_POST" => Object {
        "code": "({ query, path, header, body, context, tools }: { query: {name?: number, status?: string}, path: {petId: number}, header: never, body: undefined, context: Context, tools: Tools}) => {  
            status: 405, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/post",
        "isType": true,
        "name": "HTTP_POST",
        "promise": Promise {},
        "typeDeclaration": "",
      },
      "HTTP_DELETE" => Object {
        "code": "({ query, path, header, body, context, tools }: { query: never, path: {petId: string}, header: {api_key?: string}, body: undefined, context: Context, tools: Tools}) => {  
            status: 400, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/delete",
        "isType": true,
        "name": "HTTP_DELETE",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {
      "Context" => Object {
        "isType": true,
        "modulePath": "../../context/context.js",
      },
    },
    "imports": Map {
      "Tools" => Object {
        "isType": true,
        "name": "Tools",
        "script": Script {
          "cache": Map {
            "tools@[object Object]:true" => "Tools",
          },
          "exports": Map {
            "Tools" => Object {
              "code": "
    {
        oneOf: (array: string[]) => string;
        randomFromSchema: (schema: JSONSchema6 ) => unknown;
        accepts: (contentType: string) => boolean;
    }",
              "done": true,
              "id": "tools",
              "isType": true,
              "name": "Tools",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": false,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "internal/tools.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Pet" => Object {
        "isType": true,
        "name": "Pet",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
            "SchemaCoder@undefined@[object Object]:false" => "PetSchema",
            "SchemaTypeCoder@undefined@components/Category.ts:true" => "Category",
            "SchemaTypeCoder@undefined@components/Tag.ts:true" => "Tag",
            "SchemaCoder@undefined@components/Category.ts:false" => "CategorySchema",
            "SchemaCoder@undefined@components/Tag.ts:false" => "TagSchema",
          },
          "exports": Map {
            "Pet" => Object {
              "code": "{id: number,name: string,category: Category,photoUrls: Array<string>,tags: Array<Tag>,status: string}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isType": true,
              "name": "Pet",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "PetSchema" => Object {
              "code": "
      {
        type: \\"object\\",
        required: [\\"name\\",\\"photoUrls\\"],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"}, \\"category\\": CategorySchema, \\"photoUrls\\": {
        type: \\"array\\",     
        items: {\\"type\\":\\"string\\"}
      }, \\"tags\\": {
        type: \\"array\\",     
        items: TagSchema
      }, \\"status\\": {\\"type\\":\\"string\\",\\"description\\":\\"pet status in the store\\",\\"enum\\":[\\"available\\",\\"pending\\",\\"sold\\"]} }
      }
    ",
              "done": true,
              "id": "SchemaCoder@undefined",
              "isType": false,
              "name": "PetSchema",
              "promise": Promise {},
              "typeDeclaration": "JSONSchema6",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": true,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {
            "Category" => Object {
              "isType": true,
              "name": "Category",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                  "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                },
                "exports": Map {
                  "Category" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Category",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "CategorySchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "CategorySchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Category.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Tag" => Object {
              "isType": true,
              "name": "Tag",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                  "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                },
                "exports": Map {
                  "Tag" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Tag",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "TagSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "TagSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Tag.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "CategorySchema" => Object {
              "isType": false,
              "name": "CategorySchema",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                  "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
                },
                "exports": Map {
                  "Category" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Category",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "CategorySchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "CategorySchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Category.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "TagSchema" => Object {
              "isType": false,
              "name": "TagSchema",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                  "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
                },
                "exports": Map {
                  "Tag" => Object {
                    "code": "{id: number,name: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Tag",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "TagSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "TagSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Tag.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "components/Pet.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/pet/{petId}.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/pet/{petId}/uploadImage.ts" => Script {
    "cache": Map {
      "OperationCoder@petstore.yaml#/paths/~1pet~1{petId}~1uploadImage/post@[object Object]:false" => "POST",
      "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}~1uploadImage/post@path-types/pet/{petId}/uploadImage.types.ts:true" => "HTTP_POST",
      "SchemaTypeCoder@undefined@components/ApiResponse.ts:true" => "ApiResponse",
      "SchemaCoder@undefined@components/ApiResponse.ts:false" => "ApiResponseSchema",
    },
    "exports": Map {
      "POST" => Object {
        "code": "({ path, query, body, context, tools }) => {
      const statusCode = tools.oneOf([\\"200\\"]);

      if (statusCode === \\"200\\") { 
        if (tools.accepts(\\"application/json\\")) { 
      

      

 

      return {
        status: 200,
        contentType: \\"application/json\\",
        body: tools.randomFromSchema(ApiResponseSchema) as ApiResponse
      };
    }
      }
 
      return {
        status: 415,
        contentType: \\"text/plain\\",
        body: \\"HTTP 415: Unsupported Media Type\\",
      }
    }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1pet~1{petId}~1uploadImage/post",
        "isType": false,
        "name": "POST",
        "promise": Promise {},
        "typeDeclaration": "HTTP_POST",
      },
    },
    "externalImports": Map {},
    "imports": Map {
      "HTTP_POST" => Object {
        "isType": true,
        "name": "HTTP_POST",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}~1uploadImage/post@[object Object]:true" => "HTTP_POST",
            "tools@internal/tools.ts:true" => "Tools",
            "SchemaTypeCoder@undefined@components/ApiResponse.ts:true" => "ApiResponse",
          },
          "exports": Map {
            "HTTP_POST" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: {additionalMetadata?: number}, path: {petId: number}, header: never, body: undefined, context: Context, tools: Tools}) => {  
            status: 200, 
          contentType?: \\"application/json\\",
          body?: ApiResponse
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}~1uploadImage/post",
              "isType": true,
              "name": "HTTP_POST",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "Context" => Object {
              "isType": true,
              "modulePath": "../../../context/context.js",
            },
          },
          "imports": Map {
            "Tools" => Object {
              "isType": true,
              "name": "Tools",
              "script": Script {
                "cache": Map {
                  "tools@[object Object]:true" => "Tools",
                },
                "exports": Map {
                  "Tools" => Object {
                    "code": "
    {
        oneOf: (array: string[]) => string;
        randomFromSchema: (schema: JSONSchema6 ) => unknown;
        accepts: (contentType: string) => boolean;
    }",
                    "done": true,
                    "id": "tools",
                    "isType": true,
                    "name": "Tools",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": false,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "internal/tools.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "ApiResponse" => Object {
              "isType": true,
              "name": "ApiResponse",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "ApiResponse",
                  "SchemaCoder@undefined@[object Object]:false" => "ApiResponseSchema",
                },
                "exports": Map {
                  "ApiResponse" => Object {
                    "code": "{code: number,type: string,message: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "ApiResponse",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "ApiResponseSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"code\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int32\\"}, \\"type\\": {\\"type\\":\\"string\\"}, \\"message\\": {\\"type\\":\\"string\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "ApiResponseSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/ApiResponse.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/pet/{petId}/uploadImage.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "ApiResponse" => Object {
        "isType": true,
        "name": "ApiResponse",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "ApiResponse",
            "SchemaCoder@undefined@[object Object]:false" => "ApiResponseSchema",
          },
          "exports": Map {
            "ApiResponse" => Object {
              "code": "{code: number,type: string,message: string}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isType": true,
              "name": "ApiResponse",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "ApiResponseSchema" => Object {
              "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"code\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int32\\"}, \\"type\\": {\\"type\\":\\"string\\"}, \\"message\\": {\\"type\\":\\"string\\"} }
      }
    ",
              "done": true,
              "id": "SchemaCoder@undefined",
              "isType": false,
              "name": "ApiResponseSchema",
              "promise": Promise {},
              "typeDeclaration": "JSONSchema6",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": true,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "components/ApiResponse.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "ApiResponseSchema" => Object {
        "isType": false,
        "name": "ApiResponseSchema",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "ApiResponse",
            "SchemaCoder@undefined@[object Object]:false" => "ApiResponseSchema",
          },
          "exports": Map {
            "ApiResponse" => Object {
              "code": "{code: number,type: string,message: string}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isType": true,
              "name": "ApiResponse",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "ApiResponseSchema" => Object {
              "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"code\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int32\\"}, \\"type\\": {\\"type\\":\\"string\\"}, \\"message\\": {\\"type\\":\\"string\\"} }
      }
    ",
              "done": true,
              "id": "SchemaCoder@undefined",
              "isType": false,
              "name": "ApiResponseSchema",
              "promise": Promise {},
              "typeDeclaration": "JSONSchema6",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": true,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "components/ApiResponse.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/pet/{petId}/uploadImage.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/pet/{petId}/uploadImage.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}~1uploadImage/post@[object Object]:true" => "HTTP_POST",
      "tools@internal/tools.ts:true" => "Tools",
      "SchemaTypeCoder@undefined@components/ApiResponse.ts:true" => "ApiResponse",
    },
    "exports": Map {
      "HTTP_POST" => Object {
        "code": "({ query, path, header, body, context, tools }: { query: {additionalMetadata?: number}, path: {petId: number}, header: never, body: undefined, context: Context, tools: Tools}) => {  
            status: 200, 
          contentType?: \\"application/json\\",
          body?: ApiResponse
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}~1uploadImage/post",
        "isType": true,
        "name": "HTTP_POST",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {
      "Context" => Object {
        "isType": true,
        "modulePath": "../../../context/context.js",
      },
    },
    "imports": Map {
      "Tools" => Object {
        "isType": true,
        "name": "Tools",
        "script": Script {
          "cache": Map {
            "tools@[object Object]:true" => "Tools",
          },
          "exports": Map {
            "Tools" => Object {
              "code": "
    {
        oneOf: (array: string[]) => string;
        randomFromSchema: (schema: JSONSchema6 ) => unknown;
        accepts: (contentType: string) => boolean;
    }",
              "done": true,
              "id": "tools",
              "isType": true,
              "name": "Tools",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": false,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "internal/tools.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "ApiResponse" => Object {
        "isType": true,
        "name": "ApiResponse",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "ApiResponse",
            "SchemaCoder@undefined@[object Object]:false" => "ApiResponseSchema",
          },
          "exports": Map {
            "ApiResponse" => Object {
              "code": "{code: number,type: string,message: string}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isType": true,
              "name": "ApiResponse",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "ApiResponseSchema" => Object {
              "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"code\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int32\\"}, \\"type\\": {\\"type\\":\\"string\\"}, \\"message\\": {\\"type\\":\\"string\\"} }
      }
    ",
              "done": true,
              "id": "SchemaCoder@undefined",
              "isType": false,
              "name": "ApiResponseSchema",
              "promise": Promise {},
              "typeDeclaration": "JSONSchema6",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": true,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "components/ApiResponse.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/pet/{petId}/uploadImage.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/store/inventory.ts" => Script {
    "cache": Map {
      "OperationCoder@petstore.yaml#/paths/~1store~1inventory/get@[object Object]:false" => "GET",
      "OperationTypeCoder@petstore.yaml#/paths/~1store~1inventory/get@path-types/store/inventory.types.ts:true" => "HTTP_GET",
    },
    "exports": Map {
      "GET" => Object {
        "code": "({ context, tools }) => {
      const statusCode = tools.oneOf([\\"200\\"]);

      if (statusCode === \\"200\\") { 
        if (tools.accepts(\\"application/json\\")) { 
      

      

 

      return {
        status: 200,
        contentType: \\"application/json\\",
        body: tools.randomFromSchema(
      {
        type: \\"object\\",
        required: [],
        properties: {  }
      }
    ) as {}
      };
    }
      }
 
      return {
        status: 415,
        contentType: \\"text/plain\\",
        body: \\"HTTP 415: Unsupported Media Type\\",
      }
    }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1store~1inventory/get",
        "isType": false,
        "name": "GET",
        "promise": Promise {},
        "typeDeclaration": "HTTP_GET",
      },
    },
    "externalImports": Map {},
    "imports": Map {
      "HTTP_GET" => Object {
        "isType": true,
        "name": "HTTP_GET",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1store~1inventory/get@[object Object]:true" => "HTTP_GET",
            "tools@internal/tools.ts:true" => "Tools",
          },
          "exports": Map {
            "HTTP_GET" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: undefined, path: undefined, header: undefined, body: undefined, context: Context, tools: Tools}) => {  
            status: 200, 
          contentType?: \\"application/json\\",
          body?: {}
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1store~1inventory/get",
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "Context" => Object {
              "isType": true,
              "modulePath": "../../context/context.js",
            },
          },
          "imports": Map {
            "Tools" => Object {
              "isType": true,
              "name": "Tools",
              "script": Script {
                "cache": Map {
                  "tools@[object Object]:true" => "Tools",
                },
                "exports": Map {
                  "Tools" => Object {
                    "code": "
    {
        oneOf: (array: string[]) => string;
        randomFromSchema: (schema: JSONSchema6 ) => unknown;
        accepts: (contentType: string) => boolean;
    }",
                    "done": true,
                    "id": "tools",
                    "isType": true,
                    "name": "Tools",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": false,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "internal/tools.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/store/inventory.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/store/inventory.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/store/inventory.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@petstore.yaml#/paths/~1store~1inventory/get@[object Object]:true" => "HTTP_GET",
      "tools@internal/tools.ts:true" => "Tools",
    },
    "exports": Map {
      "HTTP_GET" => Object {
        "code": "({ query, path, header, body, context, tools }: { query: undefined, path: undefined, header: undefined, body: undefined, context: Context, tools: Tools}) => {  
            status: 200, 
          contentType?: \\"application/json\\",
          body?: {}
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1store~1inventory/get",
        "isType": true,
        "name": "HTTP_GET",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {
      "Context" => Object {
        "isType": true,
        "modulePath": "../../context/context.js",
      },
    },
    "imports": Map {
      "Tools" => Object {
        "isType": true,
        "name": "Tools",
        "script": Script {
          "cache": Map {
            "tools@[object Object]:true" => "Tools",
          },
          "exports": Map {
            "Tools" => Object {
              "code": "
    {
        oneOf: (array: string[]) => string;
        randomFromSchema: (schema: JSONSchema6 ) => unknown;
        accepts: (contentType: string) => boolean;
    }",
              "done": true,
              "id": "tools",
              "isType": true,
              "name": "Tools",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": false,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "internal/tools.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/store/inventory.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/store/order.ts" => Script {
    "cache": Map {
      "OperationCoder@petstore.yaml#/paths/~1store~1order/post@[object Object]:false" => "POST",
      "OperationTypeCoder@petstore.yaml#/paths/~1store~1order/post@path-types/store/order.types.ts:true" => "HTTP_POST",
      "SchemaTypeCoder@undefined@components/Order.ts:true" => "Order",
      "SchemaCoder@undefined@components/Order.ts:false" => "OrderSchema",
    },
    "exports": Map {
      "POST" => Object {
        "code": "({ body, context, tools }) => {
      const statusCode = tools.oneOf([\\"200\\",\\"405\\"]);

      if (statusCode === \\"200\\") { 
        if (tools.accepts(\\"application/json\\")) { 
      

      

 

      return {
        status: 200,
        contentType: \\"application/json\\",
        body: tools.randomFromSchema(OrderSchema) as Order
      };
    }
      }
if (statusCode === \\"405\\") { 
        return { 
        status: 405 
      }
      }
 
      return {
        status: 415,
        contentType: \\"text/plain\\",
        body: \\"HTTP 415: Unsupported Media Type\\",
      }
    }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1store~1order/post",
        "isType": false,
        "name": "POST",
        "promise": Promise {},
        "typeDeclaration": "HTTP_POST",
      },
    },
    "externalImports": Map {},
    "imports": Map {
      "HTTP_POST" => Object {
        "isType": true,
        "name": "HTTP_POST",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1store~1order/post@[object Object]:true" => "HTTP_POST",
            "SchemaTypeCoder@undefined@components/Order.ts:true" => "Order",
            "tools@internal/tools.ts:true" => "Tools",
          },
          "exports": Map {
            "HTTP_POST" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: undefined, path: undefined, header: undefined, body: Order, context: Context, tools: Tools}) => {  
            status: 200, 
          contentType?: \\"application/json\\",
          body?: Order
          
        } | {  
            status: 405, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1store~1order/post",
              "isType": true,
              "name": "HTTP_POST",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "Context" => Object {
              "isType": true,
              "modulePath": "../../context/context.js",
            },
          },
          "imports": Map {
            "Order" => Object {
              "isType": true,
              "name": "Order",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Order",
                  "SchemaCoder@undefined@[object Object]:false" => "OrderSchema",
                },
                "exports": Map {
                  "Order" => Object {
                    "code": "{id: number,petId: number,quantity: number,shipDate: string,status: string,complete: boolean}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Order",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "OrderSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"petId\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"quantity\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int32\\"}, \\"shipDate\\": {\\"type\\":\\"string\\",\\"format\\":\\"date-time\\"}, \\"status\\": {\\"type\\":\\"string\\",\\"description\\":\\"Order Status\\",\\"enum\\":[\\"placed\\",\\"approved\\",\\"delivered\\"]}, \\"complete\\": {\\"type\\":\\"boolean\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "OrderSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Order.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Tools" => Object {
              "isType": true,
              "name": "Tools",
              "script": Script {
                "cache": Map {
                  "tools@[object Object]:true" => "Tools",
                },
                "exports": Map {
                  "Tools" => Object {
                    "code": "
    {
        oneOf: (array: string[]) => string;
        randomFromSchema: (schema: JSONSchema6 ) => unknown;
        accepts: (contentType: string) => boolean;
    }",
                    "done": true,
                    "id": "tools",
                    "isType": true,
                    "name": "Tools",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": false,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "internal/tools.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/store/order.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Order" => Object {
        "isType": true,
        "name": "Order",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Order",
            "SchemaCoder@undefined@[object Object]:false" => "OrderSchema",
          },
          "exports": Map {
            "Order" => Object {
              "code": "{id: number,petId: number,quantity: number,shipDate: string,status: string,complete: boolean}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isType": true,
              "name": "Order",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "OrderSchema" => Object {
              "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"petId\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"quantity\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int32\\"}, \\"shipDate\\": {\\"type\\":\\"string\\",\\"format\\":\\"date-time\\"}, \\"status\\": {\\"type\\":\\"string\\",\\"description\\":\\"Order Status\\",\\"enum\\":[\\"placed\\",\\"approved\\",\\"delivered\\"]}, \\"complete\\": {\\"type\\":\\"boolean\\"} }
      }
    ",
              "done": true,
              "id": "SchemaCoder@undefined",
              "isType": false,
              "name": "OrderSchema",
              "promise": Promise {},
              "typeDeclaration": "JSONSchema6",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": true,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "components/Order.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "OrderSchema" => Object {
        "isType": false,
        "name": "OrderSchema",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Order",
            "SchemaCoder@undefined@[object Object]:false" => "OrderSchema",
          },
          "exports": Map {
            "Order" => Object {
              "code": "{id: number,petId: number,quantity: number,shipDate: string,status: string,complete: boolean}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isType": true,
              "name": "Order",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "OrderSchema" => Object {
              "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"petId\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"quantity\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int32\\"}, \\"shipDate\\": {\\"type\\":\\"string\\",\\"format\\":\\"date-time\\"}, \\"status\\": {\\"type\\":\\"string\\",\\"description\\":\\"Order Status\\",\\"enum\\":[\\"placed\\",\\"approved\\",\\"delivered\\"]}, \\"complete\\": {\\"type\\":\\"boolean\\"} }
      }
    ",
              "done": true,
              "id": "SchemaCoder@undefined",
              "isType": false,
              "name": "OrderSchema",
              "promise": Promise {},
              "typeDeclaration": "JSONSchema6",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": true,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "components/Order.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/store/order.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/store/order.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@petstore.yaml#/paths/~1store~1order/post@[object Object]:true" => "HTTP_POST",
      "SchemaTypeCoder@undefined@components/Order.ts:true" => "Order",
      "tools@internal/tools.ts:true" => "Tools",
    },
    "exports": Map {
      "HTTP_POST" => Object {
        "code": "({ query, path, header, body, context, tools }: { query: undefined, path: undefined, header: undefined, body: Order, context: Context, tools: Tools}) => {  
            status: 200, 
          contentType?: \\"application/json\\",
          body?: Order
          
        } | {  
            status: 405, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1store~1order/post",
        "isType": true,
        "name": "HTTP_POST",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {
      "Context" => Object {
        "isType": true,
        "modulePath": "../../context/context.js",
      },
    },
    "imports": Map {
      "Order" => Object {
        "isType": true,
        "name": "Order",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Order",
            "SchemaCoder@undefined@[object Object]:false" => "OrderSchema",
          },
          "exports": Map {
            "Order" => Object {
              "code": "{id: number,petId: number,quantity: number,shipDate: string,status: string,complete: boolean}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isType": true,
              "name": "Order",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "OrderSchema" => Object {
              "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"petId\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"quantity\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int32\\"}, \\"shipDate\\": {\\"type\\":\\"string\\",\\"format\\":\\"date-time\\"}, \\"status\\": {\\"type\\":\\"string\\",\\"description\\":\\"Order Status\\",\\"enum\\":[\\"placed\\",\\"approved\\",\\"delivered\\"]}, \\"complete\\": {\\"type\\":\\"boolean\\"} }
      }
    ",
              "done": true,
              "id": "SchemaCoder@undefined",
              "isType": false,
              "name": "OrderSchema",
              "promise": Promise {},
              "typeDeclaration": "JSONSchema6",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": true,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "components/Order.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Tools" => Object {
        "isType": true,
        "name": "Tools",
        "script": Script {
          "cache": Map {
            "tools@[object Object]:true" => "Tools",
          },
          "exports": Map {
            "Tools" => Object {
              "code": "
    {
        oneOf: (array: string[]) => string;
        randomFromSchema: (schema: JSONSchema6 ) => unknown;
        accepts: (contentType: string) => boolean;
    }",
              "done": true,
              "id": "tools",
              "isType": true,
              "name": "Tools",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": false,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "internal/tools.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/store/order.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/store/order/{orderId}.ts" => Script {
    "cache": Map {
      "OperationCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/get@[object Object]:false" => "GET",
      "OperationTypeCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/get@path-types/store/order/{orderId}.types.ts:true" => "HTTP_GET",
      "OperationCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/delete@[object Object]:false" => "DELETE",
      "OperationTypeCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/delete@path-types/store/order/{orderId}.types.ts:true" => "HTTP_DELETE",
      "SchemaTypeCoder@undefined@components/Order.ts:true" => "Order",
      "SchemaCoder@undefined@components/Order.ts:false" => "OrderSchema",
    },
    "exports": Map {
      "GET" => Object {
        "code": "({ path, context, tools }) => {
      const statusCode = tools.oneOf([\\"200\\",\\"400\\",\\"404\\"]);

      if (statusCode === \\"200\\") { 
        if (tools.accepts(\\"application/xml\\")) { 
      

      

 

      return {
        status: 200,
        contentType: \\"application/xml\\",
        body: tools.randomFromSchema(OrderSchema) as Order
      };
    }
if (tools.accepts(\\"application/json\\")) { 
      

      

 

      return {
        status: 200,
        contentType: \\"application/json\\",
        body: tools.randomFromSchema(OrderSchema) as Order
      };
    }
      }
if (statusCode === \\"400\\") { 
        return { 
        status: 400 
      }
      }
if (statusCode === \\"404\\") { 
        return { 
        status: 404 
      }
      }
 
      return {
        status: 415,
        contentType: \\"text/plain\\",
        body: \\"HTTP 415: Unsupported Media Type\\",
      }
    }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/get",
        "isType": false,
        "name": "GET",
        "promise": Promise {},
        "typeDeclaration": "HTTP_GET",
      },
      "DELETE" => Object {
        "code": "({ path, body, context, tools }) => {
      const statusCode = tools.oneOf([\\"400\\",\\"404\\"]);

      if (statusCode === \\"400\\") { 
        return { 
        status: 400 
      }
      }
if (statusCode === \\"404\\") { 
        return { 
        status: 404 
      }
      }
 
      return {
        status: 415,
        contentType: \\"text/plain\\",
        body: \\"HTTP 415: Unsupported Media Type\\",
      }
    }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/delete",
        "isType": false,
        "name": "DELETE",
        "promise": Promise {},
        "typeDeclaration": "HTTP_DELETE",
      },
    },
    "externalImports": Map {},
    "imports": Map {
      "HTTP_GET" => Object {
        "isType": true,
        "name": "HTTP_GET",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/get@[object Object]:true" => "HTTP_GET",
            "OperationTypeCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/delete@[object Object]:true" => "HTTP_DELETE",
            "tools@internal/tools.ts:true" => "Tools",
            "SchemaTypeCoder@undefined@components/Order.ts:true" => "Order",
          },
          "exports": Map {
            "HTTP_GET" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: never, path: {orderId: number}, header: never, body: undefined, context: Context, tools: Tools}) => {  
            status: 200, 
          contentType?: \\"application/xml\\",
          body?: Order
          
        } | {  
            status: 200, 
          contentType?: \\"application/json\\",
          body?: Order
          
        } | {  
            status: 400, 
          
          
          
        } | {  
            status: 404, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/get",
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_DELETE" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: never, path: {orderId: number}, header: never, body: undefined, context: Context, tools: Tools}) => {  
            status: 400, 
          
          
          
        } | {  
            status: 404, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/delete",
              "isType": true,
              "name": "HTTP_DELETE",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "Context" => Object {
              "isType": true,
              "modulePath": "../../../context/context.js",
            },
          },
          "imports": Map {
            "Tools" => Object {
              "isType": true,
              "name": "Tools",
              "script": Script {
                "cache": Map {
                  "tools@[object Object]:true" => "Tools",
                },
                "exports": Map {
                  "Tools" => Object {
                    "code": "
    {
        oneOf: (array: string[]) => string;
        randomFromSchema: (schema: JSONSchema6 ) => unknown;
        accepts: (contentType: string) => boolean;
    }",
                    "done": true,
                    "id": "tools",
                    "isType": true,
                    "name": "Tools",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": false,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "internal/tools.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Order" => Object {
              "isType": true,
              "name": "Order",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Order",
                  "SchemaCoder@undefined@[object Object]:false" => "OrderSchema",
                },
                "exports": Map {
                  "Order" => Object {
                    "code": "{id: number,petId: number,quantity: number,shipDate: string,status: string,complete: boolean}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Order",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "OrderSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"petId\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"quantity\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int32\\"}, \\"shipDate\\": {\\"type\\":\\"string\\",\\"format\\":\\"date-time\\"}, \\"status\\": {\\"type\\":\\"string\\",\\"description\\":\\"Order Status\\",\\"enum\\":[\\"placed\\",\\"approved\\",\\"delivered\\"]}, \\"complete\\": {\\"type\\":\\"boolean\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "OrderSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Order.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/store/order/{orderId}.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "HTTP_DELETE" => Object {
        "isType": true,
        "name": "HTTP_DELETE",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/get@[object Object]:true" => "HTTP_GET",
            "OperationTypeCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/delete@[object Object]:true" => "HTTP_DELETE",
            "tools@internal/tools.ts:true" => "Tools",
            "SchemaTypeCoder@undefined@components/Order.ts:true" => "Order",
          },
          "exports": Map {
            "HTTP_GET" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: never, path: {orderId: number}, header: never, body: undefined, context: Context, tools: Tools}) => {  
            status: 200, 
          contentType?: \\"application/xml\\",
          body?: Order
          
        } | {  
            status: 200, 
          contentType?: \\"application/json\\",
          body?: Order
          
        } | {  
            status: 400, 
          
          
          
        } | {  
            status: 404, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/get",
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_DELETE" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: never, path: {orderId: number}, header: never, body: undefined, context: Context, tools: Tools}) => {  
            status: 400, 
          
          
          
        } | {  
            status: 404, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/delete",
              "isType": true,
              "name": "HTTP_DELETE",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "Context" => Object {
              "isType": true,
              "modulePath": "../../../context/context.js",
            },
          },
          "imports": Map {
            "Tools" => Object {
              "isType": true,
              "name": "Tools",
              "script": Script {
                "cache": Map {
                  "tools@[object Object]:true" => "Tools",
                },
                "exports": Map {
                  "Tools" => Object {
                    "code": "
    {
        oneOf: (array: string[]) => string;
        randomFromSchema: (schema: JSONSchema6 ) => unknown;
        accepts: (contentType: string) => boolean;
    }",
                    "done": true,
                    "id": "tools",
                    "isType": true,
                    "name": "Tools",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": false,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "internal/tools.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Order" => Object {
              "isType": true,
              "name": "Order",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Order",
                  "SchemaCoder@undefined@[object Object]:false" => "OrderSchema",
                },
                "exports": Map {
                  "Order" => Object {
                    "code": "{id: number,petId: number,quantity: number,shipDate: string,status: string,complete: boolean}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "Order",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "OrderSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"petId\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"quantity\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int32\\"}, \\"shipDate\\": {\\"type\\":\\"string\\",\\"format\\":\\"date-time\\"}, \\"status\\": {\\"type\\":\\"string\\",\\"description\\":\\"Order Status\\",\\"enum\\":[\\"placed\\",\\"approved\\",\\"delivered\\"]}, \\"complete\\": {\\"type\\":\\"boolean\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "OrderSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/Order.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/store/order/{orderId}.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Order" => Object {
        "isType": true,
        "name": "Order",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Order",
            "SchemaCoder@undefined@[object Object]:false" => "OrderSchema",
          },
          "exports": Map {
            "Order" => Object {
              "code": "{id: number,petId: number,quantity: number,shipDate: string,status: string,complete: boolean}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isType": true,
              "name": "Order",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "OrderSchema" => Object {
              "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"petId\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"quantity\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int32\\"}, \\"shipDate\\": {\\"type\\":\\"string\\",\\"format\\":\\"date-time\\"}, \\"status\\": {\\"type\\":\\"string\\",\\"description\\":\\"Order Status\\",\\"enum\\":[\\"placed\\",\\"approved\\",\\"delivered\\"]}, \\"complete\\": {\\"type\\":\\"boolean\\"} }
      }
    ",
              "done": true,
              "id": "SchemaCoder@undefined",
              "isType": false,
              "name": "OrderSchema",
              "promise": Promise {},
              "typeDeclaration": "JSONSchema6",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": true,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "components/Order.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "OrderSchema" => Object {
        "isType": false,
        "name": "OrderSchema",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Order",
            "SchemaCoder@undefined@[object Object]:false" => "OrderSchema",
          },
          "exports": Map {
            "Order" => Object {
              "code": "{id: number,petId: number,quantity: number,shipDate: string,status: string,complete: boolean}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isType": true,
              "name": "Order",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "OrderSchema" => Object {
              "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"petId\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"quantity\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int32\\"}, \\"shipDate\\": {\\"type\\":\\"string\\",\\"format\\":\\"date-time\\"}, \\"status\\": {\\"type\\":\\"string\\",\\"description\\":\\"Order Status\\",\\"enum\\":[\\"placed\\",\\"approved\\",\\"delivered\\"]}, \\"complete\\": {\\"type\\":\\"boolean\\"} }
      }
    ",
              "done": true,
              "id": "SchemaCoder@undefined",
              "isType": false,
              "name": "OrderSchema",
              "promise": Promise {},
              "typeDeclaration": "JSONSchema6",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": true,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "components/Order.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/store/order/{orderId}.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/store/order/{orderId}.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/get@[object Object]:true" => "HTTP_GET",
      "OperationTypeCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/delete@[object Object]:true" => "HTTP_DELETE",
      "tools@internal/tools.ts:true" => "Tools",
      "SchemaTypeCoder@undefined@components/Order.ts:true" => "Order",
    },
    "exports": Map {
      "HTTP_GET" => Object {
        "code": "({ query, path, header, body, context, tools }: { query: never, path: {orderId: number}, header: never, body: undefined, context: Context, tools: Tools}) => {  
            status: 200, 
          contentType?: \\"application/xml\\",
          body?: Order
          
        } | {  
            status: 200, 
          contentType?: \\"application/json\\",
          body?: Order
          
        } | {  
            status: 400, 
          
          
          
        } | {  
            status: 404, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/get",
        "isType": true,
        "name": "HTTP_GET",
        "promise": Promise {},
        "typeDeclaration": "",
      },
      "HTTP_DELETE" => Object {
        "code": "({ query, path, header, body, context, tools }: { query: never, path: {orderId: number}, header: never, body: undefined, context: Context, tools: Tools}) => {  
            status: 400, 
          
          
          
        } | {  
            status: 404, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/delete",
        "isType": true,
        "name": "HTTP_DELETE",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {
      "Context" => Object {
        "isType": true,
        "modulePath": "../../../context/context.js",
      },
    },
    "imports": Map {
      "Tools" => Object {
        "isType": true,
        "name": "Tools",
        "script": Script {
          "cache": Map {
            "tools@[object Object]:true" => "Tools",
          },
          "exports": Map {
            "Tools" => Object {
              "code": "
    {
        oneOf: (array: string[]) => string;
        randomFromSchema: (schema: JSONSchema6 ) => unknown;
        accepts: (contentType: string) => boolean;
    }",
              "done": true,
              "id": "tools",
              "isType": true,
              "name": "Tools",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": false,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "internal/tools.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Order" => Object {
        "isType": true,
        "name": "Order",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Order",
            "SchemaCoder@undefined@[object Object]:false" => "OrderSchema",
          },
          "exports": Map {
            "Order" => Object {
              "code": "{id: number,petId: number,quantity: number,shipDate: string,status: string,complete: boolean}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isType": true,
              "name": "Order",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "OrderSchema" => Object {
              "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"petId\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"quantity\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int32\\"}, \\"shipDate\\": {\\"type\\":\\"string\\",\\"format\\":\\"date-time\\"}, \\"status\\": {\\"type\\":\\"string\\",\\"description\\":\\"Order Status\\",\\"enum\\":[\\"placed\\",\\"approved\\",\\"delivered\\"]}, \\"complete\\": {\\"type\\":\\"boolean\\"} }
      }
    ",
              "done": true,
              "id": "SchemaCoder@undefined",
              "isType": false,
              "name": "OrderSchema",
              "promise": Promise {},
              "typeDeclaration": "JSONSchema6",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": true,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "components/Order.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/store/order/{orderId}.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/user.ts" => Script {
    "cache": Map {
      "OperationCoder@petstore.yaml#/paths/~1user/post@[object Object]:false" => "POST",
      "OperationTypeCoder@petstore.yaml#/paths/~1user/post@path-types/user.types.ts:true" => "HTTP_POST",
      "SchemaTypeCoder@undefined@components/User.ts:true" => "User",
      "SchemaCoder@undefined@components/User.ts:false" => "UserSchema",
    },
    "exports": Map {
      "POST" => Object {
        "code": "({ body, context, tools }) => {
      const statusCode = tools.oneOf([\\"default\\"]);

      if (tools.accepts(\\"application/json\\")) { 
      

      

 

      return {
        
        contentType: \\"application/json\\",
        body: tools.randomFromSchema(UserSchema) as User
      };
    }
if (tools.accepts(\\"application/xml\\")) { 
      

      

 

      return {
        
        contentType: \\"application/xml\\",
        body: tools.randomFromSchema(UserSchema) as User
      };
    }
 
      return {
        status: 415,
        contentType: \\"text/plain\\",
        body: \\"HTTP 415: Unsupported Media Type\\",
      }
    }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1user/post",
        "isType": false,
        "name": "POST",
        "promise": Promise {},
        "typeDeclaration": "HTTP_POST",
      },
    },
    "externalImports": Map {},
    "imports": Map {
      "HTTP_POST" => Object {
        "isType": true,
        "name": "HTTP_POST",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1user/post@[object Object]:true" => "HTTP_POST",
            "SchemaTypeCoder@undefined@components/User.ts:true" => "User",
            "tools@internal/tools.ts:true" => "Tools",
          },
          "exports": Map {
            "HTTP_POST" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: undefined, path: undefined, header: undefined, body: User, context: Context, tools: Tools}) => {  
            status: number | undefined, 
          contentType?: \\"application/json\\",
          body?: User
          
        } | {  
            status: number | undefined, 
          contentType?: \\"application/xml\\",
          body?: User
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1user/post",
              "isType": true,
              "name": "HTTP_POST",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "Context" => Object {
              "isType": true,
              "modulePath": "../context/context.js",
            },
          },
          "imports": Map {
            "User" => Object {
              "isType": true,
              "name": "User",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "User",
                  "SchemaCoder@undefined@[object Object]:false" => "UserSchema",
                },
                "exports": Map {
                  "User" => Object {
                    "code": "{id: number,username: string,firstName: string,lastName: string,email: string,password: string,phone: string,userStatus: number}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "User",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "UserSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"username\\": {\\"type\\":\\"string\\"}, \\"firstName\\": {\\"type\\":\\"string\\"}, \\"lastName\\": {\\"type\\":\\"string\\"}, \\"email\\": {\\"type\\":\\"string\\"}, \\"password\\": {\\"type\\":\\"string\\"}, \\"phone\\": {\\"type\\":\\"string\\"}, \\"userStatus\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int32\\",\\"description\\":\\"User Status\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "UserSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/User.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Tools" => Object {
              "isType": true,
              "name": "Tools",
              "script": Script {
                "cache": Map {
                  "tools@[object Object]:true" => "Tools",
                },
                "exports": Map {
                  "Tools" => Object {
                    "code": "
    {
        oneOf: (array: string[]) => string;
        randomFromSchema: (schema: JSONSchema6 ) => unknown;
        accepts: (contentType: string) => boolean;
    }",
                    "done": true,
                    "id": "tools",
                    "isType": true,
                    "name": "Tools",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": false,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "internal/tools.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/user.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "User" => Object {
        "isType": true,
        "name": "User",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "User",
            "SchemaCoder@undefined@[object Object]:false" => "UserSchema",
          },
          "exports": Map {
            "User" => Object {
              "code": "{id: number,username: string,firstName: string,lastName: string,email: string,password: string,phone: string,userStatus: number}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isType": true,
              "name": "User",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "UserSchema" => Object {
              "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"username\\": {\\"type\\":\\"string\\"}, \\"firstName\\": {\\"type\\":\\"string\\"}, \\"lastName\\": {\\"type\\":\\"string\\"}, \\"email\\": {\\"type\\":\\"string\\"}, \\"password\\": {\\"type\\":\\"string\\"}, \\"phone\\": {\\"type\\":\\"string\\"}, \\"userStatus\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int32\\",\\"description\\":\\"User Status\\"} }
      }
    ",
              "done": true,
              "id": "SchemaCoder@undefined",
              "isType": false,
              "name": "UserSchema",
              "promise": Promise {},
              "typeDeclaration": "JSONSchema6",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": true,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "components/User.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "UserSchema" => Object {
        "isType": false,
        "name": "UserSchema",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "User",
            "SchemaCoder@undefined@[object Object]:false" => "UserSchema",
          },
          "exports": Map {
            "User" => Object {
              "code": "{id: number,username: string,firstName: string,lastName: string,email: string,password: string,phone: string,userStatus: number}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isType": true,
              "name": "User",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "UserSchema" => Object {
              "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"username\\": {\\"type\\":\\"string\\"}, \\"firstName\\": {\\"type\\":\\"string\\"}, \\"lastName\\": {\\"type\\":\\"string\\"}, \\"email\\": {\\"type\\":\\"string\\"}, \\"password\\": {\\"type\\":\\"string\\"}, \\"phone\\": {\\"type\\":\\"string\\"}, \\"userStatus\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int32\\",\\"description\\":\\"User Status\\"} }
      }
    ",
              "done": true,
              "id": "SchemaCoder@undefined",
              "isType": false,
              "name": "UserSchema",
              "promise": Promise {},
              "typeDeclaration": "JSONSchema6",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": true,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "components/User.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/user.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/user.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@petstore.yaml#/paths/~1user/post@[object Object]:true" => "HTTP_POST",
      "SchemaTypeCoder@undefined@components/User.ts:true" => "User",
      "tools@internal/tools.ts:true" => "Tools",
    },
    "exports": Map {
      "HTTP_POST" => Object {
        "code": "({ query, path, header, body, context, tools }: { query: undefined, path: undefined, header: undefined, body: User, context: Context, tools: Tools}) => {  
            status: number | undefined, 
          contentType?: \\"application/json\\",
          body?: User
          
        } | {  
            status: number | undefined, 
          contentType?: \\"application/xml\\",
          body?: User
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1user/post",
        "isType": true,
        "name": "HTTP_POST",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {
      "Context" => Object {
        "isType": true,
        "modulePath": "../context/context.js",
      },
    },
    "imports": Map {
      "User" => Object {
        "isType": true,
        "name": "User",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "User",
            "SchemaCoder@undefined@[object Object]:false" => "UserSchema",
          },
          "exports": Map {
            "User" => Object {
              "code": "{id: number,username: string,firstName: string,lastName: string,email: string,password: string,phone: string,userStatus: number}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isType": true,
              "name": "User",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "UserSchema" => Object {
              "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"username\\": {\\"type\\":\\"string\\"}, \\"firstName\\": {\\"type\\":\\"string\\"}, \\"lastName\\": {\\"type\\":\\"string\\"}, \\"email\\": {\\"type\\":\\"string\\"}, \\"password\\": {\\"type\\":\\"string\\"}, \\"phone\\": {\\"type\\":\\"string\\"}, \\"userStatus\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int32\\",\\"description\\":\\"User Status\\"} }
      }
    ",
              "done": true,
              "id": "SchemaCoder@undefined",
              "isType": false,
              "name": "UserSchema",
              "promise": Promise {},
              "typeDeclaration": "JSONSchema6",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": true,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "components/User.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Tools" => Object {
        "isType": true,
        "name": "Tools",
        "script": Script {
          "cache": Map {
            "tools@[object Object]:true" => "Tools",
          },
          "exports": Map {
            "Tools" => Object {
              "code": "
    {
        oneOf: (array: string[]) => string;
        randomFromSchema: (schema: JSONSchema6 ) => unknown;
        accepts: (contentType: string) => boolean;
    }",
              "done": true,
              "id": "tools",
              "isType": true,
              "name": "Tools",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": false,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "internal/tools.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/user.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/user/createWithList.ts" => Script {
    "cache": Map {
      "OperationCoder@petstore.yaml#/paths/~1user~1createWithList/post@[object Object]:false" => "POST",
      "OperationTypeCoder@petstore.yaml#/paths/~1user~1createWithList/post@path-types/user/createWithList.types.ts:true" => "HTTP_POST",
      "SchemaTypeCoder@undefined@components/User.ts:true" => "User",
      "SchemaCoder@undefined@components/User.ts:false" => "UserSchema",
    },
    "exports": Map {
      "POST" => Object {
        "code": "({ body, context, tools }) => {
      const statusCode = tools.oneOf([\\"200\\",\\"default\\"]);

      if (statusCode === \\"200\\") { 
        if (tools.accepts(\\"application/xml\\")) { 
      

      

 

      return {
        status: 200,
        contentType: \\"application/xml\\",
        body: tools.randomFromSchema(UserSchema) as User
      };
    }
if (tools.accepts(\\"application/json\\")) { 
      

      

 

      return {
        status: 200,
        contentType: \\"application/json\\",
        body: tools.randomFromSchema(UserSchema) as User
      };
    }
      }
return { 
        status: undefined 
      }
 
      return {
        status: 415,
        contentType: \\"text/plain\\",
        body: \\"HTTP 415: Unsupported Media Type\\",
      }
    }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1user~1createWithList/post",
        "isType": false,
        "name": "POST",
        "promise": Promise {},
        "typeDeclaration": "HTTP_POST",
      },
    },
    "externalImports": Map {},
    "imports": Map {
      "HTTP_POST" => Object {
        "isType": true,
        "name": "HTTP_POST",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1user~1createWithList/post@[object Object]:true" => "HTTP_POST",
            "SchemaTypeCoder@undefined@components/User.ts:true" => "User",
            "tools@internal/tools.ts:true" => "Tools",
          },
          "exports": Map {
            "HTTP_POST" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: undefined, path: undefined, header: undefined, body: Array<User>, context: Context, tools: Tools}) => {  
            status: 200, 
          contentType?: \\"application/xml\\",
          body?: User
          
        } | {  
            status: 200, 
          contentType?: \\"application/json\\",
          body?: User
          
        } | {  
            status: number | undefined, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1createWithList/post",
              "isType": true,
              "name": "HTTP_POST",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "Context" => Object {
              "isType": true,
              "modulePath": "../../context/context.js",
            },
          },
          "imports": Map {
            "User" => Object {
              "isType": true,
              "name": "User",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "User",
                  "SchemaCoder@undefined@[object Object]:false" => "UserSchema",
                },
                "exports": Map {
                  "User" => Object {
                    "code": "{id: number,username: string,firstName: string,lastName: string,email: string,password: string,phone: string,userStatus: number}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "User",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "UserSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"username\\": {\\"type\\":\\"string\\"}, \\"firstName\\": {\\"type\\":\\"string\\"}, \\"lastName\\": {\\"type\\":\\"string\\"}, \\"email\\": {\\"type\\":\\"string\\"}, \\"password\\": {\\"type\\":\\"string\\"}, \\"phone\\": {\\"type\\":\\"string\\"}, \\"userStatus\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int32\\",\\"description\\":\\"User Status\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "UserSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/User.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Tools" => Object {
              "isType": true,
              "name": "Tools",
              "script": Script {
                "cache": Map {
                  "tools@[object Object]:true" => "Tools",
                },
                "exports": Map {
                  "Tools" => Object {
                    "code": "
    {
        oneOf: (array: string[]) => string;
        randomFromSchema: (schema: JSONSchema6 ) => unknown;
        accepts: (contentType: string) => boolean;
    }",
                    "done": true,
                    "id": "tools",
                    "isType": true,
                    "name": "Tools",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": false,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "internal/tools.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/user/createWithList.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "User" => Object {
        "isType": true,
        "name": "User",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "User",
            "SchemaCoder@undefined@[object Object]:false" => "UserSchema",
          },
          "exports": Map {
            "User" => Object {
              "code": "{id: number,username: string,firstName: string,lastName: string,email: string,password: string,phone: string,userStatus: number}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isType": true,
              "name": "User",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "UserSchema" => Object {
              "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"username\\": {\\"type\\":\\"string\\"}, \\"firstName\\": {\\"type\\":\\"string\\"}, \\"lastName\\": {\\"type\\":\\"string\\"}, \\"email\\": {\\"type\\":\\"string\\"}, \\"password\\": {\\"type\\":\\"string\\"}, \\"phone\\": {\\"type\\":\\"string\\"}, \\"userStatus\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int32\\",\\"description\\":\\"User Status\\"} }
      }
    ",
              "done": true,
              "id": "SchemaCoder@undefined",
              "isType": false,
              "name": "UserSchema",
              "promise": Promise {},
              "typeDeclaration": "JSONSchema6",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": true,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "components/User.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "UserSchema" => Object {
        "isType": false,
        "name": "UserSchema",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "User",
            "SchemaCoder@undefined@[object Object]:false" => "UserSchema",
          },
          "exports": Map {
            "User" => Object {
              "code": "{id: number,username: string,firstName: string,lastName: string,email: string,password: string,phone: string,userStatus: number}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isType": true,
              "name": "User",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "UserSchema" => Object {
              "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"username\\": {\\"type\\":\\"string\\"}, \\"firstName\\": {\\"type\\":\\"string\\"}, \\"lastName\\": {\\"type\\":\\"string\\"}, \\"email\\": {\\"type\\":\\"string\\"}, \\"password\\": {\\"type\\":\\"string\\"}, \\"phone\\": {\\"type\\":\\"string\\"}, \\"userStatus\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int32\\",\\"description\\":\\"User Status\\"} }
      }
    ",
              "done": true,
              "id": "SchemaCoder@undefined",
              "isType": false,
              "name": "UserSchema",
              "promise": Promise {},
              "typeDeclaration": "JSONSchema6",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": true,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "components/User.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/user/createWithList.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/user/createWithList.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@petstore.yaml#/paths/~1user~1createWithList/post@[object Object]:true" => "HTTP_POST",
      "SchemaTypeCoder@undefined@components/User.ts:true" => "User",
      "tools@internal/tools.ts:true" => "Tools",
    },
    "exports": Map {
      "HTTP_POST" => Object {
        "code": "({ query, path, header, body, context, tools }: { query: undefined, path: undefined, header: undefined, body: Array<User>, context: Context, tools: Tools}) => {  
            status: 200, 
          contentType?: \\"application/xml\\",
          body?: User
          
        } | {  
            status: 200, 
          contentType?: \\"application/json\\",
          body?: User
          
        } | {  
            status: number | undefined, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1createWithList/post",
        "isType": true,
        "name": "HTTP_POST",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {
      "Context" => Object {
        "isType": true,
        "modulePath": "../../context/context.js",
      },
    },
    "imports": Map {
      "User" => Object {
        "isType": true,
        "name": "User",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "User",
            "SchemaCoder@undefined@[object Object]:false" => "UserSchema",
          },
          "exports": Map {
            "User" => Object {
              "code": "{id: number,username: string,firstName: string,lastName: string,email: string,password: string,phone: string,userStatus: number}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isType": true,
              "name": "User",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "UserSchema" => Object {
              "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"username\\": {\\"type\\":\\"string\\"}, \\"firstName\\": {\\"type\\":\\"string\\"}, \\"lastName\\": {\\"type\\":\\"string\\"}, \\"email\\": {\\"type\\":\\"string\\"}, \\"password\\": {\\"type\\":\\"string\\"}, \\"phone\\": {\\"type\\":\\"string\\"}, \\"userStatus\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int32\\",\\"description\\":\\"User Status\\"} }
      }
    ",
              "done": true,
              "id": "SchemaCoder@undefined",
              "isType": false,
              "name": "UserSchema",
              "promise": Promise {},
              "typeDeclaration": "JSONSchema6",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": true,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "components/User.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Tools" => Object {
        "isType": true,
        "name": "Tools",
        "script": Script {
          "cache": Map {
            "tools@[object Object]:true" => "Tools",
          },
          "exports": Map {
            "Tools" => Object {
              "code": "
    {
        oneOf: (array: string[]) => string;
        randomFromSchema: (schema: JSONSchema6 ) => unknown;
        accepts: (contentType: string) => boolean;
    }",
              "done": true,
              "id": "tools",
              "isType": true,
              "name": "Tools",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": false,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "internal/tools.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/user/createWithList.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/user/login.ts" => Script {
    "cache": Map {
      "OperationCoder@petstore.yaml#/paths/~1user~1login/get@[object Object]:false" => "GET",
      "OperationTypeCoder@petstore.yaml#/paths/~1user~1login/get@path-types/user/login.types.ts:true" => "HTTP_GET",
    },
    "exports": Map {
      "GET" => Object {
        "code": "({ query, context, tools }) => {
      const statusCode = tools.oneOf([\\"200\\",\\"400\\"]);

      if (statusCode === \\"200\\") { 
        if (tools.accepts(\\"application/xml\\")) { 
      

      

 

      return {
        status: 200,
        contentType: \\"application/xml\\",
        body: tools.randomFromSchema({\\"type\\":\\"string\\"}) as string
      };
    }
if (tools.accepts(\\"application/json\\")) { 
      

      

 

      return {
        status: 200,
        contentType: \\"application/json\\",
        body: tools.randomFromSchema({\\"type\\":\\"string\\"}) as string
      };
    }
      }
if (statusCode === \\"400\\") { 
        return { 
        status: 400 
      }
      }
 
      return {
        status: 415,
        contentType: \\"text/plain\\",
        body: \\"HTTP 415: Unsupported Media Type\\",
      }
    }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1user~1login/get",
        "isType": false,
        "name": "GET",
        "promise": Promise {},
        "typeDeclaration": "HTTP_GET",
      },
    },
    "externalImports": Map {},
    "imports": Map {
      "HTTP_GET" => Object {
        "isType": true,
        "name": "HTTP_GET",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1user~1login/get@[object Object]:true" => "HTTP_GET",
            "tools@internal/tools.ts:true" => "Tools",
          },
          "exports": Map {
            "HTTP_GET" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: {username?: string, password?: string}, path: never, header: never, body: undefined, context: Context, tools: Tools}) => {  
            status: 200, 
          contentType?: \\"application/xml\\",
          body?: string
          
        } | {  
            status: 200, 
          contentType?: \\"application/json\\",
          body?: string
          
        } | {  
            status: 400, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1login/get",
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "Context" => Object {
              "isType": true,
              "modulePath": "../../context/context.js",
            },
          },
          "imports": Map {
            "Tools" => Object {
              "isType": true,
              "name": "Tools",
              "script": Script {
                "cache": Map {
                  "tools@[object Object]:true" => "Tools",
                },
                "exports": Map {
                  "Tools" => Object {
                    "code": "
    {
        oneOf: (array: string[]) => string;
        randomFromSchema: (schema: JSONSchema6 ) => unknown;
        accepts: (contentType: string) => boolean;
    }",
                    "done": true,
                    "id": "tools",
                    "isType": true,
                    "name": "Tools",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": false,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "internal/tools.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/user/login.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/user/login.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/user/login.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@petstore.yaml#/paths/~1user~1login/get@[object Object]:true" => "HTTP_GET",
      "tools@internal/tools.ts:true" => "Tools",
    },
    "exports": Map {
      "HTTP_GET" => Object {
        "code": "({ query, path, header, body, context, tools }: { query: {username?: string, password?: string}, path: never, header: never, body: undefined, context: Context, tools: Tools}) => {  
            status: 200, 
          contentType?: \\"application/xml\\",
          body?: string
          
        } | {  
            status: 200, 
          contentType?: \\"application/json\\",
          body?: string
          
        } | {  
            status: 400, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1login/get",
        "isType": true,
        "name": "HTTP_GET",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {
      "Context" => Object {
        "isType": true,
        "modulePath": "../../context/context.js",
      },
    },
    "imports": Map {
      "Tools" => Object {
        "isType": true,
        "name": "Tools",
        "script": Script {
          "cache": Map {
            "tools@[object Object]:true" => "Tools",
          },
          "exports": Map {
            "Tools" => Object {
              "code": "
    {
        oneOf: (array: string[]) => string;
        randomFromSchema: (schema: JSONSchema6 ) => unknown;
        accepts: (contentType: string) => boolean;
    }",
              "done": true,
              "id": "tools",
              "isType": true,
              "name": "Tools",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": false,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "internal/tools.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/user/login.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/user/logout.ts" => Script {
    "cache": Map {
      "OperationCoder@petstore.yaml#/paths/~1user~1logout/get@[object Object]:false" => "GET",
      "OperationTypeCoder@petstore.yaml#/paths/~1user~1logout/get@path-types/user/logout.types.ts:true" => "HTTP_GET",
    },
    "exports": Map {
      "GET" => Object {
        "code": "({ context, tools }) => {
      const statusCode = tools.oneOf([\\"default\\"]);

      return { 
        status: undefined 
      }
 
      return {
        status: 415,
        contentType: \\"text/plain\\",
        body: \\"HTTP 415: Unsupported Media Type\\",
      }
    }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1user~1logout/get",
        "isType": false,
        "name": "GET",
        "promise": Promise {},
        "typeDeclaration": "HTTP_GET",
      },
    },
    "externalImports": Map {},
    "imports": Map {
      "HTTP_GET" => Object {
        "isType": true,
        "name": "HTTP_GET",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1user~1logout/get@[object Object]:true" => "HTTP_GET",
            "tools@internal/tools.ts:true" => "Tools",
          },
          "exports": Map {
            "HTTP_GET" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: never, path: never, header: never, body: undefined, context: Context, tools: Tools}) => {  
            status: number | undefined, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1logout/get",
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "Context" => Object {
              "isType": true,
              "modulePath": "../../context/context.js",
            },
          },
          "imports": Map {
            "Tools" => Object {
              "isType": true,
              "name": "Tools",
              "script": Script {
                "cache": Map {
                  "tools@[object Object]:true" => "Tools",
                },
                "exports": Map {
                  "Tools" => Object {
                    "code": "
    {
        oneOf: (array: string[]) => string;
        randomFromSchema: (schema: JSONSchema6 ) => unknown;
        accepts: (contentType: string) => boolean;
    }",
                    "done": true,
                    "id": "tools",
                    "isType": true,
                    "name": "Tools",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": false,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "internal/tools.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/user/logout.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/user/logout.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/user/logout.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@petstore.yaml#/paths/~1user~1logout/get@[object Object]:true" => "HTTP_GET",
      "tools@internal/tools.ts:true" => "Tools",
    },
    "exports": Map {
      "HTTP_GET" => Object {
        "code": "({ query, path, header, body, context, tools }: { query: never, path: never, header: never, body: undefined, context: Context, tools: Tools}) => {  
            status: number | undefined, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1logout/get",
        "isType": true,
        "name": "HTTP_GET",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {
      "Context" => Object {
        "isType": true,
        "modulePath": "../../context/context.js",
      },
    },
    "imports": Map {
      "Tools" => Object {
        "isType": true,
        "name": "Tools",
        "script": Script {
          "cache": Map {
            "tools@[object Object]:true" => "Tools",
          },
          "exports": Map {
            "Tools" => Object {
              "code": "
    {
        oneOf: (array: string[]) => string;
        randomFromSchema: (schema: JSONSchema6 ) => unknown;
        accepts: (contentType: string) => boolean;
    }",
              "done": true,
              "id": "tools",
              "isType": true,
              "name": "Tools",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": false,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "internal/tools.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/user/logout.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/user/{username}.ts" => Script {
    "cache": Map {
      "OperationCoder@petstore.yaml#/paths/~1user~1{username}/get@[object Object]:false" => "GET",
      "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/get@path-types/user/{username}.types.ts:true" => "HTTP_GET",
      "OperationCoder@petstore.yaml#/paths/~1user~1{username}/put@[object Object]:false" => "PUT",
      "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/put@path-types/user/{username}.types.ts:true" => "HTTP_PUT",
      "OperationCoder@petstore.yaml#/paths/~1user~1{username}/delete@[object Object]:false" => "DELETE",
      "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/delete@path-types/user/{username}.types.ts:true" => "HTTP_DELETE",
      "SchemaTypeCoder@undefined@components/User.ts:true" => "User",
      "SchemaCoder@undefined@components/User.ts:false" => "UserSchema",
    },
    "exports": Map {
      "GET" => Object {
        "code": "({ path, context, tools }) => {
      const statusCode = tools.oneOf([\\"200\\",\\"400\\",\\"404\\"]);

      if (statusCode === \\"200\\") { 
        if (tools.accepts(\\"application/xml\\")) { 
      

      

 

      return {
        status: 200,
        contentType: \\"application/xml\\",
        body: tools.randomFromSchema(UserSchema) as User
      };
    }
if (tools.accepts(\\"application/json\\")) { 
      

      

 

      return {
        status: 200,
        contentType: \\"application/json\\",
        body: tools.randomFromSchema(UserSchema) as User
      };
    }
      }
if (statusCode === \\"400\\") { 
        return { 
        status: 400 
      }
      }
if (statusCode === \\"404\\") { 
        return { 
        status: 404 
      }
      }
 
      return {
        status: 415,
        contentType: \\"text/plain\\",
        body: \\"HTTP 415: Unsupported Media Type\\",
      }
    }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1user~1{username}/get",
        "isType": false,
        "name": "GET",
        "promise": Promise {},
        "typeDeclaration": "HTTP_GET",
      },
      "PUT" => Object {
        "code": "({ path, body, context, tools }) => {
      const statusCode = tools.oneOf([\\"default\\"]);

      return { 
        status: undefined 
      }
 
      return {
        status: 415,
        contentType: \\"text/plain\\",
        body: \\"HTTP 415: Unsupported Media Type\\",
      }
    }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1user~1{username}/put",
        "isType": false,
        "name": "PUT",
        "promise": Promise {},
        "typeDeclaration": "HTTP_PUT",
      },
      "DELETE" => Object {
        "code": "({ path, body, context, tools }) => {
      const statusCode = tools.oneOf([\\"400\\",\\"404\\"]);

      if (statusCode === \\"400\\") { 
        return { 
        status: 400 
      }
      }
if (statusCode === \\"404\\") { 
        return { 
        status: 404 
      }
      }
 
      return {
        status: 415,
        contentType: \\"text/plain\\",
        body: \\"HTTP 415: Unsupported Media Type\\",
      }
    }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1user~1{username}/delete",
        "isType": false,
        "name": "DELETE",
        "promise": Promise {},
        "typeDeclaration": "HTTP_DELETE",
      },
    },
    "externalImports": Map {},
    "imports": Map {
      "HTTP_GET" => Object {
        "isType": true,
        "name": "HTTP_GET",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/get@[object Object]:true" => "HTTP_GET",
            "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/put@[object Object]:true" => "HTTP_PUT",
            "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/delete@[object Object]:true" => "HTTP_DELETE",
            "tools@internal/tools.ts:true" => "Tools",
            "SchemaTypeCoder@undefined@components/User.ts:true" => "User",
          },
          "exports": Map {
            "HTTP_GET" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: never, path: {username: string}, header: never, body: undefined, context: Context, tools: Tools}) => {  
            status: 200, 
          contentType?: \\"application/xml\\",
          body?: User
          
        } | {  
            status: 200, 
          contentType?: \\"application/json\\",
          body?: User
          
        } | {  
            status: 400, 
          
          
          
        } | {  
            status: 404, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/get",
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_PUT" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: never, path: {username: string}, header: never, body: User, context: Context, tools: Tools}) => {  
            status: number | undefined, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/put",
              "isType": true,
              "name": "HTTP_PUT",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_DELETE" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: never, path: {username: string}, header: never, body: undefined, context: Context, tools: Tools}) => {  
            status: 400, 
          
          
          
        } | {  
            status: 404, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/delete",
              "isType": true,
              "name": "HTTP_DELETE",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "Context" => Object {
              "isType": true,
              "modulePath": "../../context/context.js",
            },
          },
          "imports": Map {
            "Tools" => Object {
              "isType": true,
              "name": "Tools",
              "script": Script {
                "cache": Map {
                  "tools@[object Object]:true" => "Tools",
                },
                "exports": Map {
                  "Tools" => Object {
                    "code": "
    {
        oneOf: (array: string[]) => string;
        randomFromSchema: (schema: JSONSchema6 ) => unknown;
        accepts: (contentType: string) => boolean;
    }",
                    "done": true,
                    "id": "tools",
                    "isType": true,
                    "name": "Tools",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": false,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "internal/tools.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "User" => Object {
              "isType": true,
              "name": "User",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "User",
                  "SchemaCoder@undefined@[object Object]:false" => "UserSchema",
                },
                "exports": Map {
                  "User" => Object {
                    "code": "{id: number,username: string,firstName: string,lastName: string,email: string,password: string,phone: string,userStatus: number}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "User",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "UserSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"username\\": {\\"type\\":\\"string\\"}, \\"firstName\\": {\\"type\\":\\"string\\"}, \\"lastName\\": {\\"type\\":\\"string\\"}, \\"email\\": {\\"type\\":\\"string\\"}, \\"password\\": {\\"type\\":\\"string\\"}, \\"phone\\": {\\"type\\":\\"string\\"}, \\"userStatus\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int32\\",\\"description\\":\\"User Status\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "UserSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/User.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/user/{username}.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "HTTP_PUT" => Object {
        "isType": true,
        "name": "HTTP_PUT",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/get@[object Object]:true" => "HTTP_GET",
            "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/put@[object Object]:true" => "HTTP_PUT",
            "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/delete@[object Object]:true" => "HTTP_DELETE",
            "tools@internal/tools.ts:true" => "Tools",
            "SchemaTypeCoder@undefined@components/User.ts:true" => "User",
          },
          "exports": Map {
            "HTTP_GET" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: never, path: {username: string}, header: never, body: undefined, context: Context, tools: Tools}) => {  
            status: 200, 
          contentType?: \\"application/xml\\",
          body?: User
          
        } | {  
            status: 200, 
          contentType?: \\"application/json\\",
          body?: User
          
        } | {  
            status: 400, 
          
          
          
        } | {  
            status: 404, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/get",
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_PUT" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: never, path: {username: string}, header: never, body: User, context: Context, tools: Tools}) => {  
            status: number | undefined, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/put",
              "isType": true,
              "name": "HTTP_PUT",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_DELETE" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: never, path: {username: string}, header: never, body: undefined, context: Context, tools: Tools}) => {  
            status: 400, 
          
          
          
        } | {  
            status: 404, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/delete",
              "isType": true,
              "name": "HTTP_DELETE",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "Context" => Object {
              "isType": true,
              "modulePath": "../../context/context.js",
            },
          },
          "imports": Map {
            "Tools" => Object {
              "isType": true,
              "name": "Tools",
              "script": Script {
                "cache": Map {
                  "tools@[object Object]:true" => "Tools",
                },
                "exports": Map {
                  "Tools" => Object {
                    "code": "
    {
        oneOf: (array: string[]) => string;
        randomFromSchema: (schema: JSONSchema6 ) => unknown;
        accepts: (contentType: string) => boolean;
    }",
                    "done": true,
                    "id": "tools",
                    "isType": true,
                    "name": "Tools",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": false,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "internal/tools.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "User" => Object {
              "isType": true,
              "name": "User",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "User",
                  "SchemaCoder@undefined@[object Object]:false" => "UserSchema",
                },
                "exports": Map {
                  "User" => Object {
                    "code": "{id: number,username: string,firstName: string,lastName: string,email: string,password: string,phone: string,userStatus: number}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "User",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "UserSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"username\\": {\\"type\\":\\"string\\"}, \\"firstName\\": {\\"type\\":\\"string\\"}, \\"lastName\\": {\\"type\\":\\"string\\"}, \\"email\\": {\\"type\\":\\"string\\"}, \\"password\\": {\\"type\\":\\"string\\"}, \\"phone\\": {\\"type\\":\\"string\\"}, \\"userStatus\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int32\\",\\"description\\":\\"User Status\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "UserSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/User.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/user/{username}.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "HTTP_DELETE" => Object {
        "isType": true,
        "name": "HTTP_DELETE",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/get@[object Object]:true" => "HTTP_GET",
            "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/put@[object Object]:true" => "HTTP_PUT",
            "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/delete@[object Object]:true" => "HTTP_DELETE",
            "tools@internal/tools.ts:true" => "Tools",
            "SchemaTypeCoder@undefined@components/User.ts:true" => "User",
          },
          "exports": Map {
            "HTTP_GET" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: never, path: {username: string}, header: never, body: undefined, context: Context, tools: Tools}) => {  
            status: 200, 
          contentType?: \\"application/xml\\",
          body?: User
          
        } | {  
            status: 200, 
          contentType?: \\"application/json\\",
          body?: User
          
        } | {  
            status: 400, 
          
          
          
        } | {  
            status: 404, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/get",
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_PUT" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: never, path: {username: string}, header: never, body: User, context: Context, tools: Tools}) => {  
            status: number | undefined, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/put",
              "isType": true,
              "name": "HTTP_PUT",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_DELETE" => Object {
              "code": "({ query, path, header, body, context, tools }: { query: never, path: {username: string}, header: never, body: undefined, context: Context, tools: Tools}) => {  
            status: 400, 
          
          
          
        } | {  
            status: 404, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/delete",
              "isType": true,
              "name": "HTTP_DELETE",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "Context" => Object {
              "isType": true,
              "modulePath": "../../context/context.js",
            },
          },
          "imports": Map {
            "Tools" => Object {
              "isType": true,
              "name": "Tools",
              "script": Script {
                "cache": Map {
                  "tools@[object Object]:true" => "Tools",
                },
                "exports": Map {
                  "Tools" => Object {
                    "code": "
    {
        oneOf: (array: string[]) => string;
        randomFromSchema: (schema: JSONSchema6 ) => unknown;
        accepts: (contentType: string) => boolean;
    }",
                    "done": true,
                    "id": "tools",
                    "isType": true,
                    "name": "Tools",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": false,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "internal/tools.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "User" => Object {
              "isType": true,
              "name": "User",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "User",
                  "SchemaCoder@undefined@[object Object]:false" => "UserSchema",
                },
                "exports": Map {
                  "User" => Object {
                    "code": "{id: number,username: string,firstName: string,lastName: string,email: string,password: string,phone: string,userStatus: number}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isType": true,
                    "name": "User",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                  "UserSchema" => Object {
                    "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"username\\": {\\"type\\":\\"string\\"}, \\"firstName\\": {\\"type\\":\\"string\\"}, \\"lastName\\": {\\"type\\":\\"string\\"}, \\"email\\": {\\"type\\":\\"string\\"}, \\"password\\": {\\"type\\":\\"string\\"}, \\"phone\\": {\\"type\\":\\"string\\"}, \\"userStatus\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int32\\",\\"description\\":\\"User Status\\"} }
      }
    ",
                    "done": true,
                    "id": "SchemaCoder@undefined",
                    "isType": false,
                    "name": "UserSchema",
                    "promise": Promise {},
                    "typeDeclaration": "JSONSchema6",
                  },
                },
                "externalImports": Map {
                  "JSONSchema6" => Object {
                    "isType": true,
                    "modulePath": "json-schema",
                  },
                },
                "imports": Map {},
                "path": "components/User.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/user/{username}.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "User" => Object {
        "isType": true,
        "name": "User",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "User",
            "SchemaCoder@undefined@[object Object]:false" => "UserSchema",
          },
          "exports": Map {
            "User" => Object {
              "code": "{id: number,username: string,firstName: string,lastName: string,email: string,password: string,phone: string,userStatus: number}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isType": true,
              "name": "User",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "UserSchema" => Object {
              "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"username\\": {\\"type\\":\\"string\\"}, \\"firstName\\": {\\"type\\":\\"string\\"}, \\"lastName\\": {\\"type\\":\\"string\\"}, \\"email\\": {\\"type\\":\\"string\\"}, \\"password\\": {\\"type\\":\\"string\\"}, \\"phone\\": {\\"type\\":\\"string\\"}, \\"userStatus\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int32\\",\\"description\\":\\"User Status\\"} }
      }
    ",
              "done": true,
              "id": "SchemaCoder@undefined",
              "isType": false,
              "name": "UserSchema",
              "promise": Promise {},
              "typeDeclaration": "JSONSchema6",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": true,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "components/User.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "UserSchema" => Object {
        "isType": false,
        "name": "UserSchema",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "User",
            "SchemaCoder@undefined@[object Object]:false" => "UserSchema",
          },
          "exports": Map {
            "User" => Object {
              "code": "{id: number,username: string,firstName: string,lastName: string,email: string,password: string,phone: string,userStatus: number}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isType": true,
              "name": "User",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "UserSchema" => Object {
              "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"username\\": {\\"type\\":\\"string\\"}, \\"firstName\\": {\\"type\\":\\"string\\"}, \\"lastName\\": {\\"type\\":\\"string\\"}, \\"email\\": {\\"type\\":\\"string\\"}, \\"password\\": {\\"type\\":\\"string\\"}, \\"phone\\": {\\"type\\":\\"string\\"}, \\"userStatus\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int32\\",\\"description\\":\\"User Status\\"} }
      }
    ",
              "done": true,
              "id": "SchemaCoder@undefined",
              "isType": false,
              "name": "UserSchema",
              "promise": Promise {},
              "typeDeclaration": "JSONSchema6",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": true,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "components/User.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/user/{username}.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/user/{username}.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/get@[object Object]:true" => "HTTP_GET",
      "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/put@[object Object]:true" => "HTTP_PUT",
      "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/delete@[object Object]:true" => "HTTP_DELETE",
      "tools@internal/tools.ts:true" => "Tools",
      "SchemaTypeCoder@undefined@components/User.ts:true" => "User",
    },
    "exports": Map {
      "HTTP_GET" => Object {
        "code": "({ query, path, header, body, context, tools }: { query: never, path: {username: string}, header: never, body: undefined, context: Context, tools: Tools}) => {  
            status: 200, 
          contentType?: \\"application/xml\\",
          body?: User
          
        } | {  
            status: 200, 
          contentType?: \\"application/json\\",
          body?: User
          
        } | {  
            status: 400, 
          
          
          
        } | {  
            status: 404, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/get",
        "isType": true,
        "name": "HTTP_GET",
        "promise": Promise {},
        "typeDeclaration": "",
      },
      "HTTP_PUT" => Object {
        "code": "({ query, path, header, body, context, tools }: { query: never, path: {username: string}, header: never, body: User, context: Context, tools: Tools}) => {  
            status: number | undefined, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/put",
        "isType": true,
        "name": "HTTP_PUT",
        "promise": Promise {},
        "typeDeclaration": "",
      },
      "HTTP_DELETE" => Object {
        "code": "({ query, path, header, body, context, tools }: { query: never, path: {username: string}, header: never, body: undefined, context: Context, tools: Tools}) => {  
            status: 400, 
          
          
          
        } | {  
            status: 404, 
          
          
          
        } | { status: 415, contentType: \\"text/plain\\", body: string }",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/delete",
        "isType": true,
        "name": "HTTP_DELETE",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {
      "Context" => Object {
        "isType": true,
        "modulePath": "../../context/context.js",
      },
    },
    "imports": Map {
      "Tools" => Object {
        "isType": true,
        "name": "Tools",
        "script": Script {
          "cache": Map {
            "tools@[object Object]:true" => "Tools",
          },
          "exports": Map {
            "Tools" => Object {
              "code": "
    {
        oneOf: (array: string[]) => string;
        randomFromSchema: (schema: JSONSchema6 ) => unknown;
        accepts: (contentType: string) => boolean;
    }",
              "done": true,
              "id": "tools",
              "isType": true,
              "name": "Tools",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": false,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "internal/tools.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "User" => Object {
        "isType": true,
        "name": "User",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "User",
            "SchemaCoder@undefined@[object Object]:false" => "UserSchema",
          },
          "exports": Map {
            "User" => Object {
              "code": "{id: number,username: string,firstName: string,lastName: string,email: string,password: string,phone: string,userStatus: number}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isType": true,
              "name": "User",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "UserSchema" => Object {
              "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"username\\": {\\"type\\":\\"string\\"}, \\"firstName\\": {\\"type\\":\\"string\\"}, \\"lastName\\": {\\"type\\":\\"string\\"}, \\"email\\": {\\"type\\":\\"string\\"}, \\"password\\": {\\"type\\":\\"string\\"}, \\"phone\\": {\\"type\\":\\"string\\"}, \\"userStatus\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int32\\",\\"description\\":\\"User Status\\"} }
      }
    ",
              "done": true,
              "id": "SchemaCoder@undefined",
              "isType": false,
              "name": "UserSchema",
              "promise": Promise {},
              "typeDeclaration": "JSONSchema6",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": true,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "components/User.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/user/{username}.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "components/Pet.ts" => Script {
    "cache": Map {
      "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
      "SchemaCoder@undefined@[object Object]:false" => "PetSchema",
      "SchemaTypeCoder@undefined@components/Category.ts:true" => "Category",
      "SchemaTypeCoder@undefined@components/Tag.ts:true" => "Tag",
      "SchemaCoder@undefined@components/Category.ts:false" => "CategorySchema",
      "SchemaCoder@undefined@components/Tag.ts:false" => "TagSchema",
    },
    "exports": Map {
      "Pet" => Object {
        "code": "{id: number,name: string,category: Category,photoUrls: Array<string>,tags: Array<Tag>,status: string}",
        "done": true,
        "id": "SchemaTypeCoder@undefined",
        "isType": true,
        "name": "Pet",
        "promise": Promise {},
        "typeDeclaration": "",
      },
      "PetSchema" => Object {
        "code": "
      {
        type: \\"object\\",
        required: [\\"name\\",\\"photoUrls\\"],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"}, \\"category\\": CategorySchema, \\"photoUrls\\": {
        type: \\"array\\",     
        items: {\\"type\\":\\"string\\"}
      }, \\"tags\\": {
        type: \\"array\\",     
        items: TagSchema
      }, \\"status\\": {\\"type\\":\\"string\\",\\"description\\":\\"pet status in the store\\",\\"enum\\":[\\"available\\",\\"pending\\",\\"sold\\"]} }
      }
    ",
        "done": true,
        "id": "SchemaCoder@undefined",
        "isType": false,
        "name": "PetSchema",
        "promise": Promise {},
        "typeDeclaration": "JSONSchema6",
      },
    },
    "externalImports": Map {
      "JSONSchema6" => Object {
        "isType": true,
        "modulePath": "json-schema",
      },
    },
    "imports": Map {
      "Category" => Object {
        "isType": true,
        "name": "Category",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
            "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
          },
          "exports": Map {
            "Category" => Object {
              "code": "{id: number,name: string}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isType": true,
              "name": "Category",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "CategorySchema" => Object {
              "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
              "done": true,
              "id": "SchemaCoder@undefined",
              "isType": false,
              "name": "CategorySchema",
              "promise": Promise {},
              "typeDeclaration": "JSONSchema6",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": true,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "components/Category.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Tag" => Object {
        "isType": true,
        "name": "Tag",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
            "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
          },
          "exports": Map {
            "Tag" => Object {
              "code": "{id: number,name: string}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isType": true,
              "name": "Tag",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "TagSchema" => Object {
              "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
              "done": true,
              "id": "SchemaCoder@undefined",
              "isType": false,
              "name": "TagSchema",
              "promise": Promise {},
              "typeDeclaration": "JSONSchema6",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": true,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "components/Tag.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "CategorySchema" => Object {
        "isType": false,
        "name": "CategorySchema",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
            "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
          },
          "exports": Map {
            "Category" => Object {
              "code": "{id: number,name: string}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isType": true,
              "name": "Category",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "CategorySchema" => Object {
              "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
              "done": true,
              "id": "SchemaCoder@undefined",
              "isType": false,
              "name": "CategorySchema",
              "promise": Promise {},
              "typeDeclaration": "JSONSchema6",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": true,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "components/Category.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "TagSchema" => Object {
        "isType": false,
        "name": "TagSchema",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
            "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
          },
          "exports": Map {
            "Tag" => Object {
              "code": "{id: number,name: string}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isType": true,
              "name": "Tag",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "TagSchema" => Object {
              "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
              "done": true,
              "id": "SchemaCoder@undefined",
              "isType": false,
              "name": "TagSchema",
              "promise": Promise {},
              "typeDeclaration": "JSONSchema6",
            },
          },
          "externalImports": Map {
            "JSONSchema6" => Object {
              "isType": true,
              "modulePath": "json-schema",
            },
          },
          "imports": Map {},
          "path": "components/Tag.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "components/Pet.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "internal/tools.ts" => Script {
    "cache": Map {
      "tools@[object Object]:true" => "Tools",
    },
    "exports": Map {
      "Tools" => Object {
        "code": "
    {
        oneOf: (array: string[]) => string;
        randomFromSchema: (schema: JSONSchema6 ) => unknown;
        accepts: (contentType: string) => boolean;
    }",
        "done": true,
        "id": "tools",
        "isType": true,
        "name": "Tools",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {
      "JSONSchema6" => Object {
        "isType": false,
        "modulePath": "json-schema",
      },
    },
    "imports": Map {},
    "path": "internal/tools.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "components/ApiResponse.ts" => Script {
    "cache": Map {
      "SchemaTypeCoder@undefined@[object Object]:true" => "ApiResponse",
      "SchemaCoder@undefined@[object Object]:false" => "ApiResponseSchema",
    },
    "exports": Map {
      "ApiResponse" => Object {
        "code": "{code: number,type: string,message: string}",
        "done": true,
        "id": "SchemaTypeCoder@undefined",
        "isType": true,
        "name": "ApiResponse",
        "promise": Promise {},
        "typeDeclaration": "",
      },
      "ApiResponseSchema" => Object {
        "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"code\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int32\\"}, \\"type\\": {\\"type\\":\\"string\\"}, \\"message\\": {\\"type\\":\\"string\\"} }
      }
    ",
        "done": true,
        "id": "SchemaCoder@undefined",
        "isType": false,
        "name": "ApiResponseSchema",
        "promise": Promise {},
        "typeDeclaration": "JSONSchema6",
      },
    },
    "externalImports": Map {
      "JSONSchema6" => Object {
        "isType": true,
        "modulePath": "json-schema",
      },
    },
    "imports": Map {},
    "path": "components/ApiResponse.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "components/Order.ts" => Script {
    "cache": Map {
      "SchemaTypeCoder@undefined@[object Object]:true" => "Order",
      "SchemaCoder@undefined@[object Object]:false" => "OrderSchema",
    },
    "exports": Map {
      "Order" => Object {
        "code": "{id: number,petId: number,quantity: number,shipDate: string,status: string,complete: boolean}",
        "done": true,
        "id": "SchemaTypeCoder@undefined",
        "isType": true,
        "name": "Order",
        "promise": Promise {},
        "typeDeclaration": "",
      },
      "OrderSchema" => Object {
        "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"petId\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"quantity\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int32\\"}, \\"shipDate\\": {\\"type\\":\\"string\\",\\"format\\":\\"date-time\\"}, \\"status\\": {\\"type\\":\\"string\\",\\"description\\":\\"Order Status\\",\\"enum\\":[\\"placed\\",\\"approved\\",\\"delivered\\"]}, \\"complete\\": {\\"type\\":\\"boolean\\"} }
      }
    ",
        "done": true,
        "id": "SchemaCoder@undefined",
        "isType": false,
        "name": "OrderSchema",
        "promise": Promise {},
        "typeDeclaration": "JSONSchema6",
      },
    },
    "externalImports": Map {
      "JSONSchema6" => Object {
        "isType": true,
        "modulePath": "json-schema",
      },
    },
    "imports": Map {},
    "path": "components/Order.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "components/User.ts" => Script {
    "cache": Map {
      "SchemaTypeCoder@undefined@[object Object]:true" => "User",
      "SchemaCoder@undefined@[object Object]:false" => "UserSchema",
    },
    "exports": Map {
      "User" => Object {
        "code": "{id: number,username: string,firstName: string,lastName: string,email: string,password: string,phone: string,userStatus: number}",
        "done": true,
        "id": "SchemaTypeCoder@undefined",
        "isType": true,
        "name": "User",
        "promise": Promise {},
        "typeDeclaration": "",
      },
      "UserSchema" => Object {
        "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"username\\": {\\"type\\":\\"string\\"}, \\"firstName\\": {\\"type\\":\\"string\\"}, \\"lastName\\": {\\"type\\":\\"string\\"}, \\"email\\": {\\"type\\":\\"string\\"}, \\"password\\": {\\"type\\":\\"string\\"}, \\"phone\\": {\\"type\\":\\"string\\"}, \\"userStatus\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int32\\",\\"description\\":\\"User Status\\"} }
      }
    ",
        "done": true,
        "id": "SchemaCoder@undefined",
        "isType": false,
        "name": "UserSchema",
        "promise": Promise {},
        "typeDeclaration": "JSONSchema6",
      },
    },
    "externalImports": Map {
      "JSONSchema6" => Object {
        "isType": true,
        "modulePath": "json-schema",
      },
    },
    "imports": Map {},
    "path": "components/User.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "components/Category.ts" => Script {
    "cache": Map {
      "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
      "SchemaCoder@undefined@[object Object]:false" => "CategorySchema",
    },
    "exports": Map {
      "Category" => Object {
        "code": "{id: number,name: string}",
        "done": true,
        "id": "SchemaTypeCoder@undefined",
        "isType": true,
        "name": "Category",
        "promise": Promise {},
        "typeDeclaration": "",
      },
      "CategorySchema" => Object {
        "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
        "done": true,
        "id": "SchemaCoder@undefined",
        "isType": false,
        "name": "CategorySchema",
        "promise": Promise {},
        "typeDeclaration": "JSONSchema6",
      },
    },
    "externalImports": Map {
      "JSONSchema6" => Object {
        "isType": true,
        "modulePath": "json-schema",
      },
    },
    "imports": Map {},
    "path": "components/Category.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "components/Tag.ts" => Script {
    "cache": Map {
      "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
      "SchemaCoder@undefined@[object Object]:false" => "TagSchema",
    },
    "exports": Map {
      "Tag" => Object {
        "code": "{id: number,name: string}",
        "done": true,
        "id": "SchemaTypeCoder@undefined",
        "isType": true,
        "name": "Tag",
        "promise": Promise {},
        "typeDeclaration": "",
      },
      "TagSchema" => Object {
        "code": "
      {
        type: \\"object\\",
        required: [],
        properties: { \\"id\\": {\\"type\\":\\"integer\\",\\"format\\":\\"int64\\"}, \\"name\\": {\\"type\\":\\"string\\"} }
      }
    ",
        "done": true,
        "id": "SchemaCoder@undefined",
        "isType": false,
        "name": "TagSchema",
        "promise": Promise {},
        "typeDeclaration": "JSONSchema6",
      },
    },
    "externalImports": Map {
      "JSONSchema6" => Object {
        "isType": true,
        "modulePath": "json-schema",
      },
    },
    "imports": Map {},
    "path": "components/Tag.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
}
`;
