// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`end-to-end test generates the same code for pet store that it did on the last test run 1`] = `
Map {
  "paths/pet.ts" => Script {
    "cache": Map {
      "OperationCoder@petstore.yaml#/paths/~1pet/post@[object Object]:false" => "POST",
      "OperationTypeCoder@petstore.yaml#/paths/~1pet/post@path-types/pet.types.ts:true:false" => "HTTP_POST",
      "OperationCoder@petstore.yaml#/paths/~1pet/put@[object Object]:false" => "PUT",
      "OperationTypeCoder@petstore.yaml#/paths/~1pet/put@path-types/pet.types.ts:true:false" => "HTTP_PUT",
    },
    "exports": Map {
      "POST" => Object {
        "code": "($) => {
      return $.response[200].random();
    }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1pet/post",
        "isDefault": false,
        "isType": false,
        "name": "POST",
        "promise": Promise {},
        "typeDeclaration": "HTTP_POST",
      },
      "PUT" => Object {
        "code": "($) => {
      return $.response[200].random();
    }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1pet/put",
        "isDefault": false,
        "isType": false,
        "name": "PUT",
        "promise": Promise {},
        "typeDeclaration": "HTTP_PUT",
      },
    },
    "externalImports": Map {},
    "imports": Map {
      "HTTP_POST" => Object {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_POST",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1pet/post@[object Object]:true" => "HTTP_POST",
            "OperationTypeCoder@petstore.yaml#/paths/~1pet/put@[object Object]:true" => "HTTP_PUT",
            "ContextCoder@petstore.yaml#/paths/~1pet/post@paths/$context.ts:false:true" => "Context",
            "SchemaTypeCoder@undefined@components/Pet.ts:true:false" => "Pet",
            "ContextCoder@petstore.yaml#/paths/~1pet/put@paths/$context.ts:false:true" => "Context2",
          },
          "exports": Map {
            "HTTP_POST" => Object {
              "code": "({ query, path, header, body, context }: { query: undefined, path: undefined, header: undefined, body: Pet, context: typeof Context, response: ResponseBuilderFactory<{
      200: {
          headers: {};
          content: {
\\"application/xml\\": { 
          schema:  Pet
       },
\\"application/json\\": { 
          schema:  Pet
       }
};
        },405: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 200, 
            contentType?: \\"application/xml\\",
            body?: Pet
          } | {  
            status: 200, 
            contentType?: \\"application/json\\",
            body?: Pet
          } | {  
            status: 405 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet/post",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_POST",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_PUT" => Object {
              "code": "({ query, path, header, body, context }: { query: undefined, path: undefined, header: undefined, body: Pet, context: typeof Context2, response: ResponseBuilderFactory<{
      200: {
          headers: {};
          content: {
\\"application/xml\\": { 
          schema:  Pet
       },
\\"application/json\\": { 
          schema:  Pet
       }
};
        },400: {
          headers: {};
          content: {};
        },404: {
          headers: {};
          content: {};
        },405: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 200, 
            contentType?: \\"application/xml\\",
            body?: Pet
          } | {  
            status: 200, 
            contentType?: \\"application/json\\",
            body?: Pet
          } | {  
            status: 400 
          } | {  
            status: 404 
          } | {  
            status: 405 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet/put",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_PUT",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "ResponseBuilderFactory" => Object {
              "isType": true,
              "modulePath": "../response-builder-factory.js",
            },
            "HttpStatusCode" => Object {
              "isType": true,
              "modulePath": "../response-builder-factory.js",
            },
          },
          "imports": Map {
            "Context" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": "{}",
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1pet/post",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Pet" => Object {
              "isDefault": false,
              "isType": true,
              "name": "Pet",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
                  "SchemaTypeCoder@undefined@components/Category.ts:true:false" => "Category",
                  "SchemaTypeCoder@undefined@components/Tag.ts:true:false" => "Tag",
                },
                "exports": Map {
                  "Pet" => Object {
                    "code": "{id?: number,name: string,category?: Category,photoUrls: Array<string>,tags?: Array<Tag>,status?: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Pet",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {
                  "Category" => Object {
                    "isDefault": false,
                    "isType": true,
                    "name": "Category",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                      },
                      "exports": Map {
                        "Category" => Object {
                          "code": "{id?: number,name?: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isDefault": false,
                          "isType": true,
                          "name": "Category",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                      },
                      "externalImports": Map {},
                      "imports": Map {},
                      "path": "components/Category.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "Tag" => Object {
                    "isDefault": false,
                    "isType": true,
                    "name": "Tag",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                      },
                      "exports": Map {
                        "Tag" => Object {
                          "code": "{id?: number,name?: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isDefault": false,
                          "isType": true,
                          "name": "Tag",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                      },
                      "externalImports": Map {},
                      "imports": Map {},
                      "path": "components/Tag.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                },
                "path": "components/Pet.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Context2" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": "{}",
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1pet/post",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/pet.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "HTTP_PUT" => Object {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_PUT",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1pet/post@[object Object]:true" => "HTTP_POST",
            "OperationTypeCoder@petstore.yaml#/paths/~1pet/put@[object Object]:true" => "HTTP_PUT",
            "ContextCoder@petstore.yaml#/paths/~1pet/post@paths/$context.ts:false:true" => "Context",
            "SchemaTypeCoder@undefined@components/Pet.ts:true:false" => "Pet",
            "ContextCoder@petstore.yaml#/paths/~1pet/put@paths/$context.ts:false:true" => "Context2",
          },
          "exports": Map {
            "HTTP_POST" => Object {
              "code": "({ query, path, header, body, context }: { query: undefined, path: undefined, header: undefined, body: Pet, context: typeof Context, response: ResponseBuilderFactory<{
      200: {
          headers: {};
          content: {
\\"application/xml\\": { 
          schema:  Pet
       },
\\"application/json\\": { 
          schema:  Pet
       }
};
        },405: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 200, 
            contentType?: \\"application/xml\\",
            body?: Pet
          } | {  
            status: 200, 
            contentType?: \\"application/json\\",
            body?: Pet
          } | {  
            status: 405 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet/post",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_POST",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_PUT" => Object {
              "code": "({ query, path, header, body, context }: { query: undefined, path: undefined, header: undefined, body: Pet, context: typeof Context2, response: ResponseBuilderFactory<{
      200: {
          headers: {};
          content: {
\\"application/xml\\": { 
          schema:  Pet
       },
\\"application/json\\": { 
          schema:  Pet
       }
};
        },400: {
          headers: {};
          content: {};
        },404: {
          headers: {};
          content: {};
        },405: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 200, 
            contentType?: \\"application/xml\\",
            body?: Pet
          } | {  
            status: 200, 
            contentType?: \\"application/json\\",
            body?: Pet
          } | {  
            status: 400 
          } | {  
            status: 404 
          } | {  
            status: 405 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet/put",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_PUT",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "ResponseBuilderFactory" => Object {
              "isType": true,
              "modulePath": "../response-builder-factory.js",
            },
            "HttpStatusCode" => Object {
              "isType": true,
              "modulePath": "../response-builder-factory.js",
            },
          },
          "imports": Map {
            "Context" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": "{}",
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1pet/post",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Pet" => Object {
              "isDefault": false,
              "isType": true,
              "name": "Pet",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
                  "SchemaTypeCoder@undefined@components/Category.ts:true:false" => "Category",
                  "SchemaTypeCoder@undefined@components/Tag.ts:true:false" => "Tag",
                },
                "exports": Map {
                  "Pet" => Object {
                    "code": "{id?: number,name: string,category?: Category,photoUrls: Array<string>,tags?: Array<Tag>,status?: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Pet",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {
                  "Category" => Object {
                    "isDefault": false,
                    "isType": true,
                    "name": "Category",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                      },
                      "exports": Map {
                        "Category" => Object {
                          "code": "{id?: number,name?: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isDefault": false,
                          "isType": true,
                          "name": "Category",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                      },
                      "externalImports": Map {},
                      "imports": Map {},
                      "path": "components/Category.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "Tag" => Object {
                    "isDefault": false,
                    "isType": true,
                    "name": "Tag",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                      },
                      "exports": Map {
                        "Tag" => Object {
                          "code": "{id?: number,name?: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isDefault": false,
                          "isType": true,
                          "name": "Tag",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                      },
                      "externalImports": Map {},
                      "imports": Map {},
                      "path": "components/Tag.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                },
                "path": "components/Pet.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Context2" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": "{}",
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1pet/post",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/pet.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/pet.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/pet.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@petstore.yaml#/paths/~1pet/post@[object Object]:true" => "HTTP_POST",
      "OperationTypeCoder@petstore.yaml#/paths/~1pet/put@[object Object]:true" => "HTTP_PUT",
      "ContextCoder@petstore.yaml#/paths/~1pet/post@paths/$context.ts:false:true" => "Context",
      "SchemaTypeCoder@undefined@components/Pet.ts:true:false" => "Pet",
      "ContextCoder@petstore.yaml#/paths/~1pet/put@paths/$context.ts:false:true" => "Context2",
    },
    "exports": Map {
      "HTTP_POST" => Object {
        "code": "({ query, path, header, body, context }: { query: undefined, path: undefined, header: undefined, body: Pet, context: typeof Context, response: ResponseBuilderFactory<{
      200: {
          headers: {};
          content: {
\\"application/xml\\": { 
          schema:  Pet
       },
\\"application/json\\": { 
          schema:  Pet
       }
};
        },405: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 200, 
            contentType?: \\"application/xml\\",
            body?: Pet
          } | {  
            status: 200, 
            contentType?: \\"application/json\\",
            body?: Pet
          } | {  
            status: 405 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet/post",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_POST",
        "promise": Promise {},
        "typeDeclaration": "",
      },
      "HTTP_PUT" => Object {
        "code": "({ query, path, header, body, context }: { query: undefined, path: undefined, header: undefined, body: Pet, context: typeof Context2, response: ResponseBuilderFactory<{
      200: {
          headers: {};
          content: {
\\"application/xml\\": { 
          schema:  Pet
       },
\\"application/json\\": { 
          schema:  Pet
       }
};
        },400: {
          headers: {};
          content: {};
        },404: {
          headers: {};
          content: {};
        },405: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 200, 
            contentType?: \\"application/xml\\",
            body?: Pet
          } | {  
            status: 200, 
            contentType?: \\"application/json\\",
            body?: Pet
          } | {  
            status: 400 
          } | {  
            status: 404 
          } | {  
            status: 405 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet/put",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_PUT",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {
      "ResponseBuilderFactory" => Object {
        "isType": true,
        "modulePath": "../response-builder-factory.js",
      },
      "HttpStatusCode" => Object {
        "isType": true,
        "modulePath": "../response-builder-factory.js",
      },
    },
    "imports": Map {
      "Context" => Object {
        "isDefault": true,
        "isType": false,
        "name": "Context",
        "script": Script {
          "cache": Map {
            "default" => "Context",
          },
          "exports": Map {
            "Context" => Object {
              "code": "{}",
              "done": true,
              "id": "ContextCoder@petstore.yaml#/paths/~1pet/post",
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {},
          "imports": Map {},
          "path": "paths/$context.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Pet" => Object {
        "isDefault": false,
        "isType": true,
        "name": "Pet",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
            "SchemaTypeCoder@undefined@components/Category.ts:true:false" => "Category",
            "SchemaTypeCoder@undefined@components/Tag.ts:true:false" => "Tag",
          },
          "exports": Map {
            "Pet" => Object {
              "code": "{id?: number,name: string,category?: Category,photoUrls: Array<string>,tags?: Array<Tag>,status?: string}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isDefault": false,
              "isType": true,
              "name": "Pet",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {},
          "imports": Map {
            "Category" => Object {
              "isDefault": false,
              "isType": true,
              "name": "Category",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                },
                "exports": Map {
                  "Category" => Object {
                    "code": "{id?: number,name?: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Category",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "components/Category.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Tag" => Object {
              "isDefault": false,
              "isType": true,
              "name": "Tag",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                },
                "exports": Map {
                  "Tag" => Object {
                    "code": "{id?: number,name?: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Tag",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "components/Tag.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "components/Pet.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Context2" => Object {
        "isDefault": true,
        "isType": false,
        "name": "Context",
        "script": Script {
          "cache": Map {
            "default" => "Context",
          },
          "exports": Map {
            "Context" => Object {
              "code": "{}",
              "done": true,
              "id": "ContextCoder@petstore.yaml#/paths/~1pet/post",
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {},
          "imports": Map {},
          "path": "paths/$context.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/pet.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/pet/findByStatus.ts" => Script {
    "cache": Map {
      "OperationCoder@petstore.yaml#/paths/~1pet~1findByStatus/get@[object Object]:false" => "GET",
      "OperationTypeCoder@petstore.yaml#/paths/~1pet~1findByStatus/get@path-types/pet/findByStatus.types.ts:true:false" => "HTTP_GET",
    },
    "exports": Map {
      "GET" => Object {
        "code": "($) => {
      return $.response[200].random();
    }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1pet~1findByStatus/get",
        "isDefault": false,
        "isType": false,
        "name": "GET",
        "promise": Promise {},
        "typeDeclaration": "HTTP_GET",
      },
    },
    "externalImports": Map {},
    "imports": Map {
      "HTTP_GET" => Object {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_GET",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1pet~1findByStatus/get@[object Object]:true" => "HTTP_GET",
            "ContextCoder@petstore.yaml#/paths/~1pet~1findByStatus/get@paths/pet/$context.ts:false:true" => "Context",
            "SchemaTypeCoder@undefined@components/Pet.ts:true:false" => "Pet",
          },
          "exports": Map {
            "HTTP_GET" => Object {
              "code": "({ query, path, header, body, context }: { query: {status?: string}, path: never, header: never, body: undefined, context: typeof Context, response: ResponseBuilderFactory<{
      200: {
          headers: {};
          content: {
\\"application/xml\\": { 
          schema:  Array<Pet>
       },
\\"application/json\\": { 
          schema:  Array<Pet>
       }
};
        },400: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 200, 
            contentType?: \\"application/xml\\",
            body?: Array<Pet>
          } | {  
            status: 200, 
            contentType?: \\"application/json\\",
            body?: Array<Pet>
          } | {  
            status: 400 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1findByStatus/get",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "ResponseBuilderFactory" => Object {
              "isType": true,
              "modulePath": "../../response-builder-factory.js",
            },
            "HttpStatusCode" => Object {
              "isType": true,
              "modulePath": "../../response-builder-factory.js",
            },
          },
          "imports": Map {
            "Context" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": Object {
                      "raw": "export { default } from \\"../$context.js\\"",
                    },
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1pet~1findByStatus/get",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/pet/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Pet" => Object {
              "isDefault": false,
              "isType": true,
              "name": "Pet",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
                  "SchemaTypeCoder@undefined@components/Category.ts:true:false" => "Category",
                  "SchemaTypeCoder@undefined@components/Tag.ts:true:false" => "Tag",
                },
                "exports": Map {
                  "Pet" => Object {
                    "code": "{id?: number,name: string,category?: Category,photoUrls: Array<string>,tags?: Array<Tag>,status?: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Pet",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {
                  "Category" => Object {
                    "isDefault": false,
                    "isType": true,
                    "name": "Category",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                      },
                      "exports": Map {
                        "Category" => Object {
                          "code": "{id?: number,name?: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isDefault": false,
                          "isType": true,
                          "name": "Category",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                      },
                      "externalImports": Map {},
                      "imports": Map {},
                      "path": "components/Category.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "Tag" => Object {
                    "isDefault": false,
                    "isType": true,
                    "name": "Tag",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                      },
                      "exports": Map {
                        "Tag" => Object {
                          "code": "{id?: number,name?: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isDefault": false,
                          "isType": true,
                          "name": "Tag",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                      },
                      "externalImports": Map {},
                      "imports": Map {},
                      "path": "components/Tag.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                },
                "path": "components/Pet.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/pet/findByStatus.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/pet/findByStatus.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/pet/findByStatus.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@petstore.yaml#/paths/~1pet~1findByStatus/get@[object Object]:true" => "HTTP_GET",
      "ContextCoder@petstore.yaml#/paths/~1pet~1findByStatus/get@paths/pet/$context.ts:false:true" => "Context",
      "SchemaTypeCoder@undefined@components/Pet.ts:true:false" => "Pet",
    },
    "exports": Map {
      "HTTP_GET" => Object {
        "code": "({ query, path, header, body, context }: { query: {status?: string}, path: never, header: never, body: undefined, context: typeof Context, response: ResponseBuilderFactory<{
      200: {
          headers: {};
          content: {
\\"application/xml\\": { 
          schema:  Array<Pet>
       },
\\"application/json\\": { 
          schema:  Array<Pet>
       }
};
        },400: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 200, 
            contentType?: \\"application/xml\\",
            body?: Array<Pet>
          } | {  
            status: 200, 
            contentType?: \\"application/json\\",
            body?: Array<Pet>
          } | {  
            status: 400 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1findByStatus/get",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_GET",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {
      "ResponseBuilderFactory" => Object {
        "isType": true,
        "modulePath": "../../response-builder-factory.js",
      },
      "HttpStatusCode" => Object {
        "isType": true,
        "modulePath": "../../response-builder-factory.js",
      },
    },
    "imports": Map {
      "Context" => Object {
        "isDefault": true,
        "isType": false,
        "name": "Context",
        "script": Script {
          "cache": Map {
            "default" => "Context",
          },
          "exports": Map {
            "Context" => Object {
              "code": Object {
                "raw": "export { default } from \\"../$context.js\\"",
              },
              "done": true,
              "id": "ContextCoder@petstore.yaml#/paths/~1pet~1findByStatus/get",
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {},
          "imports": Map {},
          "path": "paths/pet/$context.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Pet" => Object {
        "isDefault": false,
        "isType": true,
        "name": "Pet",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
            "SchemaTypeCoder@undefined@components/Category.ts:true:false" => "Category",
            "SchemaTypeCoder@undefined@components/Tag.ts:true:false" => "Tag",
          },
          "exports": Map {
            "Pet" => Object {
              "code": "{id?: number,name: string,category?: Category,photoUrls: Array<string>,tags?: Array<Tag>,status?: string}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isDefault": false,
              "isType": true,
              "name": "Pet",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {},
          "imports": Map {
            "Category" => Object {
              "isDefault": false,
              "isType": true,
              "name": "Category",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                },
                "exports": Map {
                  "Category" => Object {
                    "code": "{id?: number,name?: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Category",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "components/Category.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Tag" => Object {
              "isDefault": false,
              "isType": true,
              "name": "Tag",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                },
                "exports": Map {
                  "Tag" => Object {
                    "code": "{id?: number,name?: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Tag",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "components/Tag.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "components/Pet.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/pet/findByStatus.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/pet/findByTags.ts" => Script {
    "cache": Map {
      "OperationCoder@petstore.yaml#/paths/~1pet~1findByTags/get@[object Object]:false" => "GET",
      "OperationTypeCoder@petstore.yaml#/paths/~1pet~1findByTags/get@path-types/pet/findByTags.types.ts:true:false" => "HTTP_GET",
    },
    "exports": Map {
      "GET" => Object {
        "code": "($) => {
      return $.response[200].random();
    }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1pet~1findByTags/get",
        "isDefault": false,
        "isType": false,
        "name": "GET",
        "promise": Promise {},
        "typeDeclaration": "HTTP_GET",
      },
    },
    "externalImports": Map {},
    "imports": Map {
      "HTTP_GET" => Object {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_GET",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1pet~1findByTags/get@[object Object]:true" => "HTTP_GET",
            "ContextCoder@petstore.yaml#/paths/~1pet~1findByTags/get@paths/pet/$context.ts:false:true" => "Context",
            "SchemaTypeCoder@undefined@components/Pet.ts:true:false" => "Pet",
          },
          "exports": Map {
            "HTTP_GET" => Object {
              "code": "({ query, path, header, body, context }: { query: {tags?: Array<string>}, path: never, header: never, body: undefined, context: typeof Context, response: ResponseBuilderFactory<{
      200: {
          headers: {};
          content: {
\\"application/xml\\": { 
          schema:  Array<Pet>
       },
\\"application/json\\": { 
          schema:  Array<Pet>
       }
};
        },400: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 200, 
            contentType?: \\"application/xml\\",
            body?: Array<Pet>
          } | {  
            status: 200, 
            contentType?: \\"application/json\\",
            body?: Array<Pet>
          } | {  
            status: 400 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1findByTags/get",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "ResponseBuilderFactory" => Object {
              "isType": true,
              "modulePath": "../../response-builder-factory.js",
            },
            "HttpStatusCode" => Object {
              "isType": true,
              "modulePath": "../../response-builder-factory.js",
            },
          },
          "imports": Map {
            "Context" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": Object {
                      "raw": "export { default } from \\"../$context.js\\"",
                    },
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1pet~1findByStatus/get",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/pet/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Pet" => Object {
              "isDefault": false,
              "isType": true,
              "name": "Pet",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
                  "SchemaTypeCoder@undefined@components/Category.ts:true:false" => "Category",
                  "SchemaTypeCoder@undefined@components/Tag.ts:true:false" => "Tag",
                },
                "exports": Map {
                  "Pet" => Object {
                    "code": "{id?: number,name: string,category?: Category,photoUrls: Array<string>,tags?: Array<Tag>,status?: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Pet",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {
                  "Category" => Object {
                    "isDefault": false,
                    "isType": true,
                    "name": "Category",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                      },
                      "exports": Map {
                        "Category" => Object {
                          "code": "{id?: number,name?: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isDefault": false,
                          "isType": true,
                          "name": "Category",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                      },
                      "externalImports": Map {},
                      "imports": Map {},
                      "path": "components/Category.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "Tag" => Object {
                    "isDefault": false,
                    "isType": true,
                    "name": "Tag",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                      },
                      "exports": Map {
                        "Tag" => Object {
                          "code": "{id?: number,name?: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isDefault": false,
                          "isType": true,
                          "name": "Tag",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                      },
                      "externalImports": Map {},
                      "imports": Map {},
                      "path": "components/Tag.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                },
                "path": "components/Pet.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/pet/findByTags.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/pet/findByTags.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/pet/findByTags.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@petstore.yaml#/paths/~1pet~1findByTags/get@[object Object]:true" => "HTTP_GET",
      "ContextCoder@petstore.yaml#/paths/~1pet~1findByTags/get@paths/pet/$context.ts:false:true" => "Context",
      "SchemaTypeCoder@undefined@components/Pet.ts:true:false" => "Pet",
    },
    "exports": Map {
      "HTTP_GET" => Object {
        "code": "({ query, path, header, body, context }: { query: {tags?: Array<string>}, path: never, header: never, body: undefined, context: typeof Context, response: ResponseBuilderFactory<{
      200: {
          headers: {};
          content: {
\\"application/xml\\": { 
          schema:  Array<Pet>
       },
\\"application/json\\": { 
          schema:  Array<Pet>
       }
};
        },400: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 200, 
            contentType?: \\"application/xml\\",
            body?: Array<Pet>
          } | {  
            status: 200, 
            contentType?: \\"application/json\\",
            body?: Array<Pet>
          } | {  
            status: 400 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1findByTags/get",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_GET",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {
      "ResponseBuilderFactory" => Object {
        "isType": true,
        "modulePath": "../../response-builder-factory.js",
      },
      "HttpStatusCode" => Object {
        "isType": true,
        "modulePath": "../../response-builder-factory.js",
      },
    },
    "imports": Map {
      "Context" => Object {
        "isDefault": true,
        "isType": false,
        "name": "Context",
        "script": Script {
          "cache": Map {
            "default" => "Context",
          },
          "exports": Map {
            "Context" => Object {
              "code": Object {
                "raw": "export { default } from \\"../$context.js\\"",
              },
              "done": true,
              "id": "ContextCoder@petstore.yaml#/paths/~1pet~1findByStatus/get",
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {},
          "imports": Map {},
          "path": "paths/pet/$context.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Pet" => Object {
        "isDefault": false,
        "isType": true,
        "name": "Pet",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
            "SchemaTypeCoder@undefined@components/Category.ts:true:false" => "Category",
            "SchemaTypeCoder@undefined@components/Tag.ts:true:false" => "Tag",
          },
          "exports": Map {
            "Pet" => Object {
              "code": "{id?: number,name: string,category?: Category,photoUrls: Array<string>,tags?: Array<Tag>,status?: string}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isDefault": false,
              "isType": true,
              "name": "Pet",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {},
          "imports": Map {
            "Category" => Object {
              "isDefault": false,
              "isType": true,
              "name": "Category",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                },
                "exports": Map {
                  "Category" => Object {
                    "code": "{id?: number,name?: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Category",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "components/Category.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Tag" => Object {
              "isDefault": false,
              "isType": true,
              "name": "Tag",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                },
                "exports": Map {
                  "Tag" => Object {
                    "code": "{id?: number,name?: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Tag",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "components/Tag.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "components/Pet.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/pet/findByTags.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/pet/{petId}.ts" => Script {
    "cache": Map {
      "OperationCoder@petstore.yaml#/paths/~1pet~1{petId}/get@[object Object]:false" => "GET",
      "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/get@path-types/pet/{petId}.types.ts:true:false" => "HTTP_GET",
      "OperationCoder@petstore.yaml#/paths/~1pet~1{petId}/post@[object Object]:false" => "POST",
      "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/post@path-types/pet/{petId}.types.ts:true:false" => "HTTP_POST",
      "OperationCoder@petstore.yaml#/paths/~1pet~1{petId}/delete@[object Object]:false" => "DELETE",
      "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/delete@path-types/pet/{petId}.types.ts:true:false" => "HTTP_DELETE",
    },
    "exports": Map {
      "GET" => Object {
        "code": "($) => {
      return $.response[200].random();
    }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1pet~1{petId}/get",
        "isDefault": false,
        "isType": false,
        "name": "GET",
        "promise": Promise {},
        "typeDeclaration": "HTTP_GET",
      },
      "POST" => Object {
        "code": "() => { /* no response content specified in the OpenAPI document */ }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1pet~1{petId}/post",
        "isDefault": false,
        "isType": false,
        "name": "POST",
        "promise": Promise {},
        "typeDeclaration": "HTTP_POST",
      },
      "DELETE" => Object {
        "code": "() => { /* no response content specified in the OpenAPI document */ }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1pet~1{petId}/delete",
        "isDefault": false,
        "isType": false,
        "name": "DELETE",
        "promise": Promise {},
        "typeDeclaration": "HTTP_DELETE",
      },
    },
    "externalImports": Map {},
    "imports": Map {
      "HTTP_GET" => Object {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_GET",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/get@[object Object]:true" => "HTTP_GET",
            "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/post@[object Object]:true" => "HTTP_POST",
            "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/delete@[object Object]:true" => "HTTP_DELETE",
            "ContextCoder@petstore.yaml#/paths/~1pet~1{petId}/get@paths/pet/$context.ts:false:true" => "Context",
            "SchemaTypeCoder@undefined@components/Pet.ts:true:false" => "Pet",
            "ContextCoder@petstore.yaml#/paths/~1pet~1{petId}/post@paths/pet/$context.ts:false:true" => "Context2",
            "ContextCoder@petstore.yaml#/paths/~1pet~1{petId}/delete@paths/pet/$context.ts:false:true" => "Context3",
          },
          "exports": Map {
            "HTTP_GET" => Object {
              "code": "({ query, path, header, body, context }: { query: never, path: {petId: number}, header: never, body: undefined, context: typeof Context, response: ResponseBuilderFactory<{
      200: {
          headers: {};
          content: {
\\"application/xml\\": { 
          schema:  Pet
       },
\\"application/json\\": { 
          schema:  Pet
       }
};
        },400: {
          headers: {};
          content: {};
        },404: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 200, 
            contentType?: \\"application/xml\\",
            body?: Pet
          } | {  
            status: 200, 
            contentType?: \\"application/json\\",
            body?: Pet
          } | {  
            status: 400 
          } | {  
            status: 404 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/get",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_POST" => Object {
              "code": "({ query, path, header, body, context }: { query: {name?: number, status?: string}, path: {petId: number}, header: never, body: undefined, context: typeof Context2, response: ResponseBuilderFactory<{
      405: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 405 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/post",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_POST",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_DELETE" => Object {
              "code": "({ query, path, header, body, context }: { query: never, path: {petId: string}, header: {api_key?: string}, body: undefined, context: typeof Context3, response: ResponseBuilderFactory<{
      400: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 400 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/delete",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_DELETE",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "ResponseBuilderFactory" => Object {
              "isType": true,
              "modulePath": "../../response-builder-factory.js",
            },
            "HttpStatusCode" => Object {
              "isType": true,
              "modulePath": "../../response-builder-factory.js",
            },
          },
          "imports": Map {
            "Context" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": Object {
                      "raw": "export { default } from \\"../$context.js\\"",
                    },
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1pet~1findByStatus/get",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/pet/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Pet" => Object {
              "isDefault": false,
              "isType": true,
              "name": "Pet",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
                  "SchemaTypeCoder@undefined@components/Category.ts:true:false" => "Category",
                  "SchemaTypeCoder@undefined@components/Tag.ts:true:false" => "Tag",
                },
                "exports": Map {
                  "Pet" => Object {
                    "code": "{id?: number,name: string,category?: Category,photoUrls: Array<string>,tags?: Array<Tag>,status?: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Pet",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {
                  "Category" => Object {
                    "isDefault": false,
                    "isType": true,
                    "name": "Category",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                      },
                      "exports": Map {
                        "Category" => Object {
                          "code": "{id?: number,name?: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isDefault": false,
                          "isType": true,
                          "name": "Category",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                      },
                      "externalImports": Map {},
                      "imports": Map {},
                      "path": "components/Category.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "Tag" => Object {
                    "isDefault": false,
                    "isType": true,
                    "name": "Tag",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                      },
                      "exports": Map {
                        "Tag" => Object {
                          "code": "{id?: number,name?: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isDefault": false,
                          "isType": true,
                          "name": "Tag",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                      },
                      "externalImports": Map {},
                      "imports": Map {},
                      "path": "components/Tag.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                },
                "path": "components/Pet.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Context2" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": Object {
                      "raw": "export { default } from \\"../$context.js\\"",
                    },
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1pet~1findByStatus/get",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/pet/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Context3" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": Object {
                      "raw": "export { default } from \\"../$context.js\\"",
                    },
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1pet~1findByStatus/get",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/pet/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/pet/{petId}.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "HTTP_POST" => Object {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_POST",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/get@[object Object]:true" => "HTTP_GET",
            "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/post@[object Object]:true" => "HTTP_POST",
            "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/delete@[object Object]:true" => "HTTP_DELETE",
            "ContextCoder@petstore.yaml#/paths/~1pet~1{petId}/get@paths/pet/$context.ts:false:true" => "Context",
            "SchemaTypeCoder@undefined@components/Pet.ts:true:false" => "Pet",
            "ContextCoder@petstore.yaml#/paths/~1pet~1{petId}/post@paths/pet/$context.ts:false:true" => "Context2",
            "ContextCoder@petstore.yaml#/paths/~1pet~1{petId}/delete@paths/pet/$context.ts:false:true" => "Context3",
          },
          "exports": Map {
            "HTTP_GET" => Object {
              "code": "({ query, path, header, body, context }: { query: never, path: {petId: number}, header: never, body: undefined, context: typeof Context, response: ResponseBuilderFactory<{
      200: {
          headers: {};
          content: {
\\"application/xml\\": { 
          schema:  Pet
       },
\\"application/json\\": { 
          schema:  Pet
       }
};
        },400: {
          headers: {};
          content: {};
        },404: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 200, 
            contentType?: \\"application/xml\\",
            body?: Pet
          } | {  
            status: 200, 
            contentType?: \\"application/json\\",
            body?: Pet
          } | {  
            status: 400 
          } | {  
            status: 404 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/get",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_POST" => Object {
              "code": "({ query, path, header, body, context }: { query: {name?: number, status?: string}, path: {petId: number}, header: never, body: undefined, context: typeof Context2, response: ResponseBuilderFactory<{
      405: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 405 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/post",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_POST",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_DELETE" => Object {
              "code": "({ query, path, header, body, context }: { query: never, path: {petId: string}, header: {api_key?: string}, body: undefined, context: typeof Context3, response: ResponseBuilderFactory<{
      400: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 400 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/delete",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_DELETE",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "ResponseBuilderFactory" => Object {
              "isType": true,
              "modulePath": "../../response-builder-factory.js",
            },
            "HttpStatusCode" => Object {
              "isType": true,
              "modulePath": "../../response-builder-factory.js",
            },
          },
          "imports": Map {
            "Context" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": Object {
                      "raw": "export { default } from \\"../$context.js\\"",
                    },
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1pet~1findByStatus/get",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/pet/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Pet" => Object {
              "isDefault": false,
              "isType": true,
              "name": "Pet",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
                  "SchemaTypeCoder@undefined@components/Category.ts:true:false" => "Category",
                  "SchemaTypeCoder@undefined@components/Tag.ts:true:false" => "Tag",
                },
                "exports": Map {
                  "Pet" => Object {
                    "code": "{id?: number,name: string,category?: Category,photoUrls: Array<string>,tags?: Array<Tag>,status?: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Pet",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {
                  "Category" => Object {
                    "isDefault": false,
                    "isType": true,
                    "name": "Category",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                      },
                      "exports": Map {
                        "Category" => Object {
                          "code": "{id?: number,name?: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isDefault": false,
                          "isType": true,
                          "name": "Category",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                      },
                      "externalImports": Map {},
                      "imports": Map {},
                      "path": "components/Category.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "Tag" => Object {
                    "isDefault": false,
                    "isType": true,
                    "name": "Tag",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                      },
                      "exports": Map {
                        "Tag" => Object {
                          "code": "{id?: number,name?: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isDefault": false,
                          "isType": true,
                          "name": "Tag",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                      },
                      "externalImports": Map {},
                      "imports": Map {},
                      "path": "components/Tag.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                },
                "path": "components/Pet.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Context2" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": Object {
                      "raw": "export { default } from \\"../$context.js\\"",
                    },
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1pet~1findByStatus/get",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/pet/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Context3" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": Object {
                      "raw": "export { default } from \\"../$context.js\\"",
                    },
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1pet~1findByStatus/get",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/pet/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/pet/{petId}.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "HTTP_DELETE" => Object {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_DELETE",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/get@[object Object]:true" => "HTTP_GET",
            "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/post@[object Object]:true" => "HTTP_POST",
            "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/delete@[object Object]:true" => "HTTP_DELETE",
            "ContextCoder@petstore.yaml#/paths/~1pet~1{petId}/get@paths/pet/$context.ts:false:true" => "Context",
            "SchemaTypeCoder@undefined@components/Pet.ts:true:false" => "Pet",
            "ContextCoder@petstore.yaml#/paths/~1pet~1{petId}/post@paths/pet/$context.ts:false:true" => "Context2",
            "ContextCoder@petstore.yaml#/paths/~1pet~1{petId}/delete@paths/pet/$context.ts:false:true" => "Context3",
          },
          "exports": Map {
            "HTTP_GET" => Object {
              "code": "({ query, path, header, body, context }: { query: never, path: {petId: number}, header: never, body: undefined, context: typeof Context, response: ResponseBuilderFactory<{
      200: {
          headers: {};
          content: {
\\"application/xml\\": { 
          schema:  Pet
       },
\\"application/json\\": { 
          schema:  Pet
       }
};
        },400: {
          headers: {};
          content: {};
        },404: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 200, 
            contentType?: \\"application/xml\\",
            body?: Pet
          } | {  
            status: 200, 
            contentType?: \\"application/json\\",
            body?: Pet
          } | {  
            status: 400 
          } | {  
            status: 404 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/get",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_POST" => Object {
              "code": "({ query, path, header, body, context }: { query: {name?: number, status?: string}, path: {petId: number}, header: never, body: undefined, context: typeof Context2, response: ResponseBuilderFactory<{
      405: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 405 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/post",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_POST",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_DELETE" => Object {
              "code": "({ query, path, header, body, context }: { query: never, path: {petId: string}, header: {api_key?: string}, body: undefined, context: typeof Context3, response: ResponseBuilderFactory<{
      400: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 400 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/delete",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_DELETE",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "ResponseBuilderFactory" => Object {
              "isType": true,
              "modulePath": "../../response-builder-factory.js",
            },
            "HttpStatusCode" => Object {
              "isType": true,
              "modulePath": "../../response-builder-factory.js",
            },
          },
          "imports": Map {
            "Context" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": Object {
                      "raw": "export { default } from \\"../$context.js\\"",
                    },
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1pet~1findByStatus/get",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/pet/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Pet" => Object {
              "isDefault": false,
              "isType": true,
              "name": "Pet",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
                  "SchemaTypeCoder@undefined@components/Category.ts:true:false" => "Category",
                  "SchemaTypeCoder@undefined@components/Tag.ts:true:false" => "Tag",
                },
                "exports": Map {
                  "Pet" => Object {
                    "code": "{id?: number,name: string,category?: Category,photoUrls: Array<string>,tags?: Array<Tag>,status?: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Pet",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {
                  "Category" => Object {
                    "isDefault": false,
                    "isType": true,
                    "name": "Category",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                      },
                      "exports": Map {
                        "Category" => Object {
                          "code": "{id?: number,name?: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isDefault": false,
                          "isType": true,
                          "name": "Category",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                      },
                      "externalImports": Map {},
                      "imports": Map {},
                      "path": "components/Category.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                  "Tag" => Object {
                    "isDefault": false,
                    "isType": true,
                    "name": "Tag",
                    "script": Script {
                      "cache": Map {
                        "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                      },
                      "exports": Map {
                        "Tag" => Object {
                          "code": "{id?: number,name?: string}",
                          "done": true,
                          "id": "SchemaTypeCoder@undefined",
                          "isDefault": false,
                          "isType": true,
                          "name": "Tag",
                          "promise": Promise {},
                          "typeDeclaration": "",
                        },
                      },
                      "externalImports": Map {},
                      "imports": Map {},
                      "path": "components/Tag.ts",
                      "repository": Repository {
                        "scripts": [Circular],
                        "writeFiles": [Function],
                      },
                      "typeCache": Map {},
                    },
                  },
                },
                "path": "components/Pet.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Context2" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": Object {
                      "raw": "export { default } from \\"../$context.js\\"",
                    },
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1pet~1findByStatus/get",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/pet/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Context3" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": Object {
                      "raw": "export { default } from \\"../$context.js\\"",
                    },
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1pet~1findByStatus/get",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/pet/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/pet/{petId}.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/pet/{petId}.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/pet/{petId}.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/get@[object Object]:true" => "HTTP_GET",
      "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/post@[object Object]:true" => "HTTP_POST",
      "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/delete@[object Object]:true" => "HTTP_DELETE",
      "ContextCoder@petstore.yaml#/paths/~1pet~1{petId}/get@paths/pet/$context.ts:false:true" => "Context",
      "SchemaTypeCoder@undefined@components/Pet.ts:true:false" => "Pet",
      "ContextCoder@petstore.yaml#/paths/~1pet~1{petId}/post@paths/pet/$context.ts:false:true" => "Context2",
      "ContextCoder@petstore.yaml#/paths/~1pet~1{petId}/delete@paths/pet/$context.ts:false:true" => "Context3",
    },
    "exports": Map {
      "HTTP_GET" => Object {
        "code": "({ query, path, header, body, context }: { query: never, path: {petId: number}, header: never, body: undefined, context: typeof Context, response: ResponseBuilderFactory<{
      200: {
          headers: {};
          content: {
\\"application/xml\\": { 
          schema:  Pet
       },
\\"application/json\\": { 
          schema:  Pet
       }
};
        },400: {
          headers: {};
          content: {};
        },404: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 200, 
            contentType?: \\"application/xml\\",
            body?: Pet
          } | {  
            status: 200, 
            contentType?: \\"application/json\\",
            body?: Pet
          } | {  
            status: 400 
          } | {  
            status: 404 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/get",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_GET",
        "promise": Promise {},
        "typeDeclaration": "",
      },
      "HTTP_POST" => Object {
        "code": "({ query, path, header, body, context }: { query: {name?: number, status?: string}, path: {petId: number}, header: never, body: undefined, context: typeof Context2, response: ResponseBuilderFactory<{
      405: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 405 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/post",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_POST",
        "promise": Promise {},
        "typeDeclaration": "",
      },
      "HTTP_DELETE" => Object {
        "code": "({ query, path, header, body, context }: { query: never, path: {petId: string}, header: {api_key?: string}, body: undefined, context: typeof Context3, response: ResponseBuilderFactory<{
      400: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 400 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}/delete",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_DELETE",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {
      "ResponseBuilderFactory" => Object {
        "isType": true,
        "modulePath": "../../response-builder-factory.js",
      },
      "HttpStatusCode" => Object {
        "isType": true,
        "modulePath": "../../response-builder-factory.js",
      },
    },
    "imports": Map {
      "Context" => Object {
        "isDefault": true,
        "isType": false,
        "name": "Context",
        "script": Script {
          "cache": Map {
            "default" => "Context",
          },
          "exports": Map {
            "Context" => Object {
              "code": Object {
                "raw": "export { default } from \\"../$context.js\\"",
              },
              "done": true,
              "id": "ContextCoder@petstore.yaml#/paths/~1pet~1findByStatus/get",
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {},
          "imports": Map {},
          "path": "paths/pet/$context.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Pet" => Object {
        "isDefault": false,
        "isType": true,
        "name": "Pet",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
            "SchemaTypeCoder@undefined@components/Category.ts:true:false" => "Category",
            "SchemaTypeCoder@undefined@components/Tag.ts:true:false" => "Tag",
          },
          "exports": Map {
            "Pet" => Object {
              "code": "{id?: number,name: string,category?: Category,photoUrls: Array<string>,tags?: Array<Tag>,status?: string}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isDefault": false,
              "isType": true,
              "name": "Pet",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {},
          "imports": Map {
            "Category" => Object {
              "isDefault": false,
              "isType": true,
              "name": "Category",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
                },
                "exports": Map {
                  "Category" => Object {
                    "code": "{id?: number,name?: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Category",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "components/Category.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Tag" => Object {
              "isDefault": false,
              "isType": true,
              "name": "Tag",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
                },
                "exports": Map {
                  "Tag" => Object {
                    "code": "{id?: number,name?: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Tag",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "components/Tag.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "components/Pet.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Context2" => Object {
        "isDefault": true,
        "isType": false,
        "name": "Context",
        "script": Script {
          "cache": Map {
            "default" => "Context",
          },
          "exports": Map {
            "Context" => Object {
              "code": Object {
                "raw": "export { default } from \\"../$context.js\\"",
              },
              "done": true,
              "id": "ContextCoder@petstore.yaml#/paths/~1pet~1findByStatus/get",
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {},
          "imports": Map {},
          "path": "paths/pet/$context.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Context3" => Object {
        "isDefault": true,
        "isType": false,
        "name": "Context",
        "script": Script {
          "cache": Map {
            "default" => "Context",
          },
          "exports": Map {
            "Context" => Object {
              "code": Object {
                "raw": "export { default } from \\"../$context.js\\"",
              },
              "done": true,
              "id": "ContextCoder@petstore.yaml#/paths/~1pet~1findByStatus/get",
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {},
          "imports": Map {},
          "path": "paths/pet/$context.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/pet/{petId}.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/pet/{petId}/uploadImage.ts" => Script {
    "cache": Map {
      "OperationCoder@petstore.yaml#/paths/~1pet~1{petId}~1uploadImage/post@[object Object]:false" => "POST",
      "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}~1uploadImage/post@path-types/pet/{petId}/uploadImage.types.ts:true:false" => "HTTP_POST",
    },
    "exports": Map {
      "POST" => Object {
        "code": "($) => {
      return $.response[200].random();
    }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1pet~1{petId}~1uploadImage/post",
        "isDefault": false,
        "isType": false,
        "name": "POST",
        "promise": Promise {},
        "typeDeclaration": "HTTP_POST",
      },
    },
    "externalImports": Map {},
    "imports": Map {
      "HTTP_POST" => Object {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_POST",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}~1uploadImage/post@[object Object]:true" => "HTTP_POST",
            "ContextCoder@petstore.yaml#/paths/~1pet~1{petId}~1uploadImage/post@paths/pet/{petId}/$context.ts:false:true" => "Context",
            "SchemaTypeCoder@undefined@components/ApiResponse.ts:true:false" => "ApiResponse",
          },
          "exports": Map {
            "HTTP_POST" => Object {
              "code": "({ query, path, header, body, context }: { query: {additionalMetadata?: number}, path: {petId: number}, header: never, body: undefined, context: typeof Context, response: ResponseBuilderFactory<{
      200: {
          headers: {};
          content: {
\\"application/json\\": { 
          schema:  ApiResponse
       }
};
        }
      }> }) => {  
            status: 200, 
            contentType?: \\"application/json\\",
            body?: ApiResponse
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}~1uploadImage/post",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_POST",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "ResponseBuilderFactory" => Object {
              "isType": true,
              "modulePath": "../../../response-builder-factory.js",
            },
            "HttpStatusCode" => Object {
              "isType": true,
              "modulePath": "../../../response-builder-factory.js",
            },
          },
          "imports": Map {
            "Context" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": Object {
                      "raw": "export { default } from \\"../$context.js\\"",
                    },
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1pet~1{petId}~1uploadImage/post",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/pet/{petId}/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "ApiResponse" => Object {
              "isDefault": false,
              "isType": true,
              "name": "ApiResponse",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "ApiResponse",
                },
                "exports": Map {
                  "ApiResponse" => Object {
                    "code": "{code?: number,type?: string,message?: string}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "ApiResponse",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "components/ApiResponse.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/pet/{petId}/uploadImage.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/pet/{petId}/uploadImage.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/pet/{petId}/uploadImage.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}~1uploadImage/post@[object Object]:true" => "HTTP_POST",
      "ContextCoder@petstore.yaml#/paths/~1pet~1{petId}~1uploadImage/post@paths/pet/{petId}/$context.ts:false:true" => "Context",
      "SchemaTypeCoder@undefined@components/ApiResponse.ts:true:false" => "ApiResponse",
    },
    "exports": Map {
      "HTTP_POST" => Object {
        "code": "({ query, path, header, body, context }: { query: {additionalMetadata?: number}, path: {petId: number}, header: never, body: undefined, context: typeof Context, response: ResponseBuilderFactory<{
      200: {
          headers: {};
          content: {
\\"application/json\\": { 
          schema:  ApiResponse
       }
};
        }
      }> }) => {  
            status: 200, 
            contentType?: \\"application/json\\",
            body?: ApiResponse
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1pet~1{petId}~1uploadImage/post",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_POST",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {
      "ResponseBuilderFactory" => Object {
        "isType": true,
        "modulePath": "../../../response-builder-factory.js",
      },
      "HttpStatusCode" => Object {
        "isType": true,
        "modulePath": "../../../response-builder-factory.js",
      },
    },
    "imports": Map {
      "Context" => Object {
        "isDefault": true,
        "isType": false,
        "name": "Context",
        "script": Script {
          "cache": Map {
            "default" => "Context",
          },
          "exports": Map {
            "Context" => Object {
              "code": Object {
                "raw": "export { default } from \\"../$context.js\\"",
              },
              "done": true,
              "id": "ContextCoder@petstore.yaml#/paths/~1pet~1{petId}~1uploadImage/post",
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {},
          "imports": Map {},
          "path": "paths/pet/{petId}/$context.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "ApiResponse" => Object {
        "isDefault": false,
        "isType": true,
        "name": "ApiResponse",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "ApiResponse",
          },
          "exports": Map {
            "ApiResponse" => Object {
              "code": "{code?: number,type?: string,message?: string}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isDefault": false,
              "isType": true,
              "name": "ApiResponse",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {},
          "imports": Map {},
          "path": "components/ApiResponse.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/pet/{petId}/uploadImage.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/store/inventory.ts" => Script {
    "cache": Map {
      "OperationCoder@petstore.yaml#/paths/~1store~1inventory/get@[object Object]:false" => "GET",
      "OperationTypeCoder@petstore.yaml#/paths/~1store~1inventory/get@path-types/store/inventory.types.ts:true:false" => "HTTP_GET",
    },
    "exports": Map {
      "GET" => Object {
        "code": "($) => {
      return $.response[200].random();
    }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1store~1inventory/get",
        "isDefault": false,
        "isType": false,
        "name": "GET",
        "promise": Promise {},
        "typeDeclaration": "HTTP_GET",
      },
    },
    "externalImports": Map {},
    "imports": Map {
      "HTTP_GET" => Object {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_GET",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1store~1inventory/get@[object Object]:true" => "HTTP_GET",
            "ContextCoder@petstore.yaml#/paths/~1store~1inventory/get@paths/store/$context.ts:false:true" => "Context",
          },
          "exports": Map {
            "HTTP_GET" => Object {
              "code": "({ query, path, header, body, context }: { query: undefined, path: undefined, header: undefined, body: undefined, context: typeof Context, response: ResponseBuilderFactory<{
      200: {
          headers: {};
          content: {
\\"application/json\\": { 
          schema:  {[key: string]: number}
       }
};
        }
      }> }) => {  
            status: 200, 
            contentType?: \\"application/json\\",
            body?: {[key: string]: number}
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1store~1inventory/get",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "ResponseBuilderFactory" => Object {
              "isType": true,
              "modulePath": "../../response-builder-factory.js",
            },
            "HttpStatusCode" => Object {
              "isType": true,
              "modulePath": "../../response-builder-factory.js",
            },
          },
          "imports": Map {
            "Context" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": Object {
                      "raw": "export { default } from \\"../$context.js\\"",
                    },
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1store~1inventory/get",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/store/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/store/inventory.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/store/inventory.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/store/inventory.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@petstore.yaml#/paths/~1store~1inventory/get@[object Object]:true" => "HTTP_GET",
      "ContextCoder@petstore.yaml#/paths/~1store~1inventory/get@paths/store/$context.ts:false:true" => "Context",
    },
    "exports": Map {
      "HTTP_GET" => Object {
        "code": "({ query, path, header, body, context }: { query: undefined, path: undefined, header: undefined, body: undefined, context: typeof Context, response: ResponseBuilderFactory<{
      200: {
          headers: {};
          content: {
\\"application/json\\": { 
          schema:  {[key: string]: number}
       }
};
        }
      }> }) => {  
            status: 200, 
            contentType?: \\"application/json\\",
            body?: {[key: string]: number}
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1store~1inventory/get",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_GET",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {
      "ResponseBuilderFactory" => Object {
        "isType": true,
        "modulePath": "../../response-builder-factory.js",
      },
      "HttpStatusCode" => Object {
        "isType": true,
        "modulePath": "../../response-builder-factory.js",
      },
    },
    "imports": Map {
      "Context" => Object {
        "isDefault": true,
        "isType": false,
        "name": "Context",
        "script": Script {
          "cache": Map {
            "default" => "Context",
          },
          "exports": Map {
            "Context" => Object {
              "code": Object {
                "raw": "export { default } from \\"../$context.js\\"",
              },
              "done": true,
              "id": "ContextCoder@petstore.yaml#/paths/~1store~1inventory/get",
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {},
          "imports": Map {},
          "path": "paths/store/$context.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/store/inventory.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/store/order.ts" => Script {
    "cache": Map {
      "OperationCoder@petstore.yaml#/paths/~1store~1order/post@[object Object]:false" => "POST",
      "OperationTypeCoder@petstore.yaml#/paths/~1store~1order/post@path-types/store/order.types.ts:true:false" => "HTTP_POST",
    },
    "exports": Map {
      "POST" => Object {
        "code": "($) => {
      return $.response[200].random();
    }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1store~1order/post",
        "isDefault": false,
        "isType": false,
        "name": "POST",
        "promise": Promise {},
        "typeDeclaration": "HTTP_POST",
      },
    },
    "externalImports": Map {},
    "imports": Map {
      "HTTP_POST" => Object {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_POST",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1store~1order/post@[object Object]:true" => "HTTP_POST",
            "ContextCoder@petstore.yaml#/paths/~1store~1order/post@paths/store/$context.ts:false:true" => "Context",
            "SchemaTypeCoder@undefined@components/Order.ts:true:false" => "Order",
          },
          "exports": Map {
            "HTTP_POST" => Object {
              "code": "({ query, path, header, body, context }: { query: undefined, path: undefined, header: undefined, body: Order, context: typeof Context, response: ResponseBuilderFactory<{
      200: {
          headers: {};
          content: {
\\"application/json\\": { 
          schema:  Order
       }
};
        },405: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 200, 
            contentType?: \\"application/json\\",
            body?: Order
          } | {  
            status: 405 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1store~1order/post",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_POST",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "ResponseBuilderFactory" => Object {
              "isType": true,
              "modulePath": "../../response-builder-factory.js",
            },
            "HttpStatusCode" => Object {
              "isType": true,
              "modulePath": "../../response-builder-factory.js",
            },
          },
          "imports": Map {
            "Context" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": Object {
                      "raw": "export { default } from \\"../$context.js\\"",
                    },
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1store~1inventory/get",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/store/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Order" => Object {
              "isDefault": false,
              "isType": true,
              "name": "Order",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Order",
                },
                "exports": Map {
                  "Order" => Object {
                    "code": "{id?: number,petId?: number,quantity?: number,shipDate?: string,status?: string,complete?: boolean}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Order",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "components/Order.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/store/order.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/store/order.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/store/order.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@petstore.yaml#/paths/~1store~1order/post@[object Object]:true" => "HTTP_POST",
      "ContextCoder@petstore.yaml#/paths/~1store~1order/post@paths/store/$context.ts:false:true" => "Context",
      "SchemaTypeCoder@undefined@components/Order.ts:true:false" => "Order",
    },
    "exports": Map {
      "HTTP_POST" => Object {
        "code": "({ query, path, header, body, context }: { query: undefined, path: undefined, header: undefined, body: Order, context: typeof Context, response: ResponseBuilderFactory<{
      200: {
          headers: {};
          content: {
\\"application/json\\": { 
          schema:  Order
       }
};
        },405: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 200, 
            contentType?: \\"application/json\\",
            body?: Order
          } | {  
            status: 405 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1store~1order/post",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_POST",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {
      "ResponseBuilderFactory" => Object {
        "isType": true,
        "modulePath": "../../response-builder-factory.js",
      },
      "HttpStatusCode" => Object {
        "isType": true,
        "modulePath": "../../response-builder-factory.js",
      },
    },
    "imports": Map {
      "Context" => Object {
        "isDefault": true,
        "isType": false,
        "name": "Context",
        "script": Script {
          "cache": Map {
            "default" => "Context",
          },
          "exports": Map {
            "Context" => Object {
              "code": Object {
                "raw": "export { default } from \\"../$context.js\\"",
              },
              "done": true,
              "id": "ContextCoder@petstore.yaml#/paths/~1store~1inventory/get",
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {},
          "imports": Map {},
          "path": "paths/store/$context.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Order" => Object {
        "isDefault": false,
        "isType": true,
        "name": "Order",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Order",
          },
          "exports": Map {
            "Order" => Object {
              "code": "{id?: number,petId?: number,quantity?: number,shipDate?: string,status?: string,complete?: boolean}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isDefault": false,
              "isType": true,
              "name": "Order",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {},
          "imports": Map {},
          "path": "components/Order.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/store/order.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/store/order/{orderId}.ts" => Script {
    "cache": Map {
      "OperationCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/get@[object Object]:false" => "GET",
      "OperationTypeCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/get@path-types/store/order/{orderId}.types.ts:true:false" => "HTTP_GET",
      "OperationCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/delete@[object Object]:false" => "DELETE",
      "OperationTypeCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/delete@path-types/store/order/{orderId}.types.ts:true:false" => "HTTP_DELETE",
    },
    "exports": Map {
      "GET" => Object {
        "code": "($) => {
      return $.response[200].random();
    }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/get",
        "isDefault": false,
        "isType": false,
        "name": "GET",
        "promise": Promise {},
        "typeDeclaration": "HTTP_GET",
      },
      "DELETE" => Object {
        "code": "() => { /* no response content specified in the OpenAPI document */ }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/delete",
        "isDefault": false,
        "isType": false,
        "name": "DELETE",
        "promise": Promise {},
        "typeDeclaration": "HTTP_DELETE",
      },
    },
    "externalImports": Map {},
    "imports": Map {
      "HTTP_GET" => Object {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_GET",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/get@[object Object]:true" => "HTTP_GET",
            "OperationTypeCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/delete@[object Object]:true" => "HTTP_DELETE",
            "ContextCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/get@paths/store/order/$context.ts:false:true" => "Context",
            "SchemaTypeCoder@undefined@components/Order.ts:true:false" => "Order",
            "ContextCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/delete@paths/store/order/$context.ts:false:true" => "Context2",
          },
          "exports": Map {
            "HTTP_GET" => Object {
              "code": "({ query, path, header, body, context }: { query: never, path: {orderId: number}, header: never, body: undefined, context: typeof Context, response: ResponseBuilderFactory<{
      200: {
          headers: {};
          content: {
\\"application/xml\\": { 
          schema:  Order
       },
\\"application/json\\": { 
          schema:  Order
       }
};
        },400: {
          headers: {};
          content: {};
        },404: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 200, 
            contentType?: \\"application/xml\\",
            body?: Order
          } | {  
            status: 200, 
            contentType?: \\"application/json\\",
            body?: Order
          } | {  
            status: 400 
          } | {  
            status: 404 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/get",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_DELETE" => Object {
              "code": "({ query, path, header, body, context }: { query: never, path: {orderId: number}, header: never, body: undefined, context: typeof Context2, response: ResponseBuilderFactory<{
      400: {
          headers: {};
          content: {};
        },404: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 400 
          } | {  
            status: 404 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/delete",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_DELETE",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "ResponseBuilderFactory" => Object {
              "isType": true,
              "modulePath": "../../../response-builder-factory.js",
            },
            "HttpStatusCode" => Object {
              "isType": true,
              "modulePath": "../../../response-builder-factory.js",
            },
          },
          "imports": Map {
            "Context" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": Object {
                      "raw": "export { default } from \\"../$context.js\\"",
                    },
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/get",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/store/order/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Order" => Object {
              "isDefault": false,
              "isType": true,
              "name": "Order",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Order",
                },
                "exports": Map {
                  "Order" => Object {
                    "code": "{id?: number,petId?: number,quantity?: number,shipDate?: string,status?: string,complete?: boolean}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Order",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "components/Order.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Context2" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": Object {
                      "raw": "export { default } from \\"../$context.js\\"",
                    },
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/get",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/store/order/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/store/order/{orderId}.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "HTTP_DELETE" => Object {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_DELETE",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/get@[object Object]:true" => "HTTP_GET",
            "OperationTypeCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/delete@[object Object]:true" => "HTTP_DELETE",
            "ContextCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/get@paths/store/order/$context.ts:false:true" => "Context",
            "SchemaTypeCoder@undefined@components/Order.ts:true:false" => "Order",
            "ContextCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/delete@paths/store/order/$context.ts:false:true" => "Context2",
          },
          "exports": Map {
            "HTTP_GET" => Object {
              "code": "({ query, path, header, body, context }: { query: never, path: {orderId: number}, header: never, body: undefined, context: typeof Context, response: ResponseBuilderFactory<{
      200: {
          headers: {};
          content: {
\\"application/xml\\": { 
          schema:  Order
       },
\\"application/json\\": { 
          schema:  Order
       }
};
        },400: {
          headers: {};
          content: {};
        },404: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 200, 
            contentType?: \\"application/xml\\",
            body?: Order
          } | {  
            status: 200, 
            contentType?: \\"application/json\\",
            body?: Order
          } | {  
            status: 400 
          } | {  
            status: 404 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/get",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_DELETE" => Object {
              "code": "({ query, path, header, body, context }: { query: never, path: {orderId: number}, header: never, body: undefined, context: typeof Context2, response: ResponseBuilderFactory<{
      400: {
          headers: {};
          content: {};
        },404: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 400 
          } | {  
            status: 404 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/delete",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_DELETE",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "ResponseBuilderFactory" => Object {
              "isType": true,
              "modulePath": "../../../response-builder-factory.js",
            },
            "HttpStatusCode" => Object {
              "isType": true,
              "modulePath": "../../../response-builder-factory.js",
            },
          },
          "imports": Map {
            "Context" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": Object {
                      "raw": "export { default } from \\"../$context.js\\"",
                    },
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/get",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/store/order/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Order" => Object {
              "isDefault": false,
              "isType": true,
              "name": "Order",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "Order",
                },
                "exports": Map {
                  "Order" => Object {
                    "code": "{id?: number,petId?: number,quantity?: number,shipDate?: string,status?: string,complete?: boolean}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "Order",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "components/Order.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Context2" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": Object {
                      "raw": "export { default } from \\"../$context.js\\"",
                    },
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/get",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/store/order/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/store/order/{orderId}.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/store/order/{orderId}.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/store/order/{orderId}.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/get@[object Object]:true" => "HTTP_GET",
      "OperationTypeCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/delete@[object Object]:true" => "HTTP_DELETE",
      "ContextCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/get@paths/store/order/$context.ts:false:true" => "Context",
      "SchemaTypeCoder@undefined@components/Order.ts:true:false" => "Order",
      "ContextCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/delete@paths/store/order/$context.ts:false:true" => "Context2",
    },
    "exports": Map {
      "HTTP_GET" => Object {
        "code": "({ query, path, header, body, context }: { query: never, path: {orderId: number}, header: never, body: undefined, context: typeof Context, response: ResponseBuilderFactory<{
      200: {
          headers: {};
          content: {
\\"application/xml\\": { 
          schema:  Order
       },
\\"application/json\\": { 
          schema:  Order
       }
};
        },400: {
          headers: {};
          content: {};
        },404: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 200, 
            contentType?: \\"application/xml\\",
            body?: Order
          } | {  
            status: 200, 
            contentType?: \\"application/json\\",
            body?: Order
          } | {  
            status: 400 
          } | {  
            status: 404 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/get",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_GET",
        "promise": Promise {},
        "typeDeclaration": "",
      },
      "HTTP_DELETE" => Object {
        "code": "({ query, path, header, body, context }: { query: never, path: {orderId: number}, header: never, body: undefined, context: typeof Context2, response: ResponseBuilderFactory<{
      400: {
          headers: {};
          content: {};
        },404: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 400 
          } | {  
            status: 404 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/delete",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_DELETE",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {
      "ResponseBuilderFactory" => Object {
        "isType": true,
        "modulePath": "../../../response-builder-factory.js",
      },
      "HttpStatusCode" => Object {
        "isType": true,
        "modulePath": "../../../response-builder-factory.js",
      },
    },
    "imports": Map {
      "Context" => Object {
        "isDefault": true,
        "isType": false,
        "name": "Context",
        "script": Script {
          "cache": Map {
            "default" => "Context",
          },
          "exports": Map {
            "Context" => Object {
              "code": Object {
                "raw": "export { default } from \\"../$context.js\\"",
              },
              "done": true,
              "id": "ContextCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/get",
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {},
          "imports": Map {},
          "path": "paths/store/order/$context.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Order" => Object {
        "isDefault": false,
        "isType": true,
        "name": "Order",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Order",
          },
          "exports": Map {
            "Order" => Object {
              "code": "{id?: number,petId?: number,quantity?: number,shipDate?: string,status?: string,complete?: boolean}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isDefault": false,
              "isType": true,
              "name": "Order",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {},
          "imports": Map {},
          "path": "components/Order.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Context2" => Object {
        "isDefault": true,
        "isType": false,
        "name": "Context",
        "script": Script {
          "cache": Map {
            "default" => "Context",
          },
          "exports": Map {
            "Context" => Object {
              "code": Object {
                "raw": "export { default } from \\"../$context.js\\"",
              },
              "done": true,
              "id": "ContextCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/get",
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {},
          "imports": Map {},
          "path": "paths/store/order/$context.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/store/order/{orderId}.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/user.ts" => Script {
    "cache": Map {
      "OperationCoder@petstore.yaml#/paths/~1user/post@[object Object]:false" => "POST",
      "OperationTypeCoder@petstore.yaml#/paths/~1user/post@path-types/user.types.ts:true:false" => "HTTP_POST",
    },
    "exports": Map {
      "POST" => Object {
        "code": "($) => {
      return $.response[200].random();
    }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1user/post",
        "isDefault": false,
        "isType": false,
        "name": "POST",
        "promise": Promise {},
        "typeDeclaration": "HTTP_POST",
      },
    },
    "externalImports": Map {},
    "imports": Map {
      "HTTP_POST" => Object {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_POST",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1user/post@[object Object]:true" => "HTTP_POST",
            "ContextCoder@petstore.yaml#/paths/~1user/post@paths/$context.ts:false:true" => "Context",
            "SchemaTypeCoder@undefined@components/User.ts:true:false" => "User",
          },
          "exports": Map {
            "HTTP_POST" => Object {
              "code": "({ query, path, header, body, context }: { query: undefined, path: undefined, header: undefined, body: User, context: typeof Context, response: ResponseBuilderFactory<{
      [statusCode in HttpStatusCode]: {
          headers: {};
          content: {
\\"application/json\\": { 
          schema:  User
       },
\\"application/xml\\": { 
          schema:  User
       }
};
        }
      }> }) => {  
            status: number | undefined, 
            contentType?: \\"application/json\\",
            body?: User
          } | {  
            status: number | undefined, 
            contentType?: \\"application/xml\\",
            body?: User
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1user/post",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_POST",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "ResponseBuilderFactory" => Object {
              "isType": true,
              "modulePath": "../response-builder-factory.js",
            },
            "HttpStatusCode" => Object {
              "isType": true,
              "modulePath": "../response-builder-factory.js",
            },
          },
          "imports": Map {
            "Context" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": "{}",
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1pet/post",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "User" => Object {
              "isDefault": false,
              "isType": true,
              "name": "User",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "User",
                },
                "exports": Map {
                  "User" => Object {
                    "code": "{id?: number,username?: string,firstName?: string,lastName?: string,email?: string,password?: string,phone?: string,userStatus?: number}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "User",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "components/User.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/user.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/user.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/user.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@petstore.yaml#/paths/~1user/post@[object Object]:true" => "HTTP_POST",
      "ContextCoder@petstore.yaml#/paths/~1user/post@paths/$context.ts:false:true" => "Context",
      "SchemaTypeCoder@undefined@components/User.ts:true:false" => "User",
    },
    "exports": Map {
      "HTTP_POST" => Object {
        "code": "({ query, path, header, body, context }: { query: undefined, path: undefined, header: undefined, body: User, context: typeof Context, response: ResponseBuilderFactory<{
      [statusCode in HttpStatusCode]: {
          headers: {};
          content: {
\\"application/json\\": { 
          schema:  User
       },
\\"application/xml\\": { 
          schema:  User
       }
};
        }
      }> }) => {  
            status: number | undefined, 
            contentType?: \\"application/json\\",
            body?: User
          } | {  
            status: number | undefined, 
            contentType?: \\"application/xml\\",
            body?: User
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1user/post",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_POST",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {
      "ResponseBuilderFactory" => Object {
        "isType": true,
        "modulePath": "../response-builder-factory.js",
      },
      "HttpStatusCode" => Object {
        "isType": true,
        "modulePath": "../response-builder-factory.js",
      },
    },
    "imports": Map {
      "Context" => Object {
        "isDefault": true,
        "isType": false,
        "name": "Context",
        "script": Script {
          "cache": Map {
            "default" => "Context",
          },
          "exports": Map {
            "Context" => Object {
              "code": "{}",
              "done": true,
              "id": "ContextCoder@petstore.yaml#/paths/~1pet/post",
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {},
          "imports": Map {},
          "path": "paths/$context.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "User" => Object {
        "isDefault": false,
        "isType": true,
        "name": "User",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "User",
          },
          "exports": Map {
            "User" => Object {
              "code": "{id?: number,username?: string,firstName?: string,lastName?: string,email?: string,password?: string,phone?: string,userStatus?: number}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isDefault": false,
              "isType": true,
              "name": "User",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {},
          "imports": Map {},
          "path": "components/User.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/user.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/user/createWithList.ts" => Script {
    "cache": Map {
      "OperationCoder@petstore.yaml#/paths/~1user~1createWithList/post@[object Object]:false" => "POST",
      "OperationTypeCoder@petstore.yaml#/paths/~1user~1createWithList/post@path-types/user/createWithList.types.ts:true:false" => "HTTP_POST",
    },
    "exports": Map {
      "POST" => Object {
        "code": "($) => {
      return $.response[200].random();
    }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1user~1createWithList/post",
        "isDefault": false,
        "isType": false,
        "name": "POST",
        "promise": Promise {},
        "typeDeclaration": "HTTP_POST",
      },
    },
    "externalImports": Map {},
    "imports": Map {
      "HTTP_POST" => Object {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_POST",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1user~1createWithList/post@[object Object]:true" => "HTTP_POST",
            "ContextCoder@petstore.yaml#/paths/~1user~1createWithList/post@paths/user/$context.ts:false:true" => "Context",
            "SchemaTypeCoder@undefined@components/User.ts:true:false" => "User",
          },
          "exports": Map {
            "HTTP_POST" => Object {
              "code": "({ query, path, header, body, context }: { query: undefined, path: undefined, header: undefined, body: Array<User>, context: typeof Context, response: ResponseBuilderFactory<{
      200: {
          headers: {};
          content: {
\\"application/xml\\": { 
          schema:  User
       },
\\"application/json\\": { 
          schema:  User
       }
};
        },[statusCode in Exclude<HttpStatusCode, 200>]: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 200, 
            contentType?: \\"application/xml\\",
            body?: User
          } | {  
            status: 200, 
            contentType?: \\"application/json\\",
            body?: User
          } | {  
            status: number | undefined 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1createWithList/post",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_POST",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "ResponseBuilderFactory" => Object {
              "isType": true,
              "modulePath": "../../response-builder-factory.js",
            },
            "HttpStatusCode" => Object {
              "isType": true,
              "modulePath": "../../response-builder-factory.js",
            },
          },
          "imports": Map {
            "Context" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": Object {
                      "raw": "export { default } from \\"../$context.js\\"",
                    },
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1user~1createWithList/post",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/user/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "User" => Object {
              "isDefault": false,
              "isType": true,
              "name": "User",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "User",
                },
                "exports": Map {
                  "User" => Object {
                    "code": "{id?: number,username?: string,firstName?: string,lastName?: string,email?: string,password?: string,phone?: string,userStatus?: number}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "User",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "components/User.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/user/createWithList.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/user/createWithList.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/user/createWithList.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@petstore.yaml#/paths/~1user~1createWithList/post@[object Object]:true" => "HTTP_POST",
      "ContextCoder@petstore.yaml#/paths/~1user~1createWithList/post@paths/user/$context.ts:false:true" => "Context",
      "SchemaTypeCoder@undefined@components/User.ts:true:false" => "User",
    },
    "exports": Map {
      "HTTP_POST" => Object {
        "code": "({ query, path, header, body, context }: { query: undefined, path: undefined, header: undefined, body: Array<User>, context: typeof Context, response: ResponseBuilderFactory<{
      200: {
          headers: {};
          content: {
\\"application/xml\\": { 
          schema:  User
       },
\\"application/json\\": { 
          schema:  User
       }
};
        },[statusCode in Exclude<HttpStatusCode, 200>]: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 200, 
            contentType?: \\"application/xml\\",
            body?: User
          } | {  
            status: 200, 
            contentType?: \\"application/json\\",
            body?: User
          } | {  
            status: number | undefined 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1createWithList/post",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_POST",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {
      "ResponseBuilderFactory" => Object {
        "isType": true,
        "modulePath": "../../response-builder-factory.js",
      },
      "HttpStatusCode" => Object {
        "isType": true,
        "modulePath": "../../response-builder-factory.js",
      },
    },
    "imports": Map {
      "Context" => Object {
        "isDefault": true,
        "isType": false,
        "name": "Context",
        "script": Script {
          "cache": Map {
            "default" => "Context",
          },
          "exports": Map {
            "Context" => Object {
              "code": Object {
                "raw": "export { default } from \\"../$context.js\\"",
              },
              "done": true,
              "id": "ContextCoder@petstore.yaml#/paths/~1user~1createWithList/post",
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {},
          "imports": Map {},
          "path": "paths/user/$context.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "User" => Object {
        "isDefault": false,
        "isType": true,
        "name": "User",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "User",
          },
          "exports": Map {
            "User" => Object {
              "code": "{id?: number,username?: string,firstName?: string,lastName?: string,email?: string,password?: string,phone?: string,userStatus?: number}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isDefault": false,
              "isType": true,
              "name": "User",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {},
          "imports": Map {},
          "path": "components/User.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/user/createWithList.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/user/login.ts" => Script {
    "cache": Map {
      "OperationCoder@petstore.yaml#/paths/~1user~1login/get@[object Object]:false" => "GET",
      "OperationTypeCoder@petstore.yaml#/paths/~1user~1login/get@path-types/user/login.types.ts:true:false" => "HTTP_GET",
    },
    "exports": Map {
      "GET" => Object {
        "code": "($) => {
      return $.response[200].random();
    }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1user~1login/get",
        "isDefault": false,
        "isType": false,
        "name": "GET",
        "promise": Promise {},
        "typeDeclaration": "HTTP_GET",
      },
    },
    "externalImports": Map {},
    "imports": Map {
      "HTTP_GET" => Object {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_GET",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1user~1login/get@[object Object]:true" => "HTTP_GET",
            "ContextCoder@petstore.yaml#/paths/~1user~1login/get@paths/user/$context.ts:false:true" => "Context",
          },
          "exports": Map {
            "HTTP_GET" => Object {
              "code": "({ query, path, header, body, context }: { query: {username?: string, password?: string}, path: never, header: never, body: undefined, context: typeof Context, response: ResponseBuilderFactory<{
      200: {
          headers: {
\\"X-Rate-Limit\\": { schema: number},
\\"X-Expires-After\\": { schema: string}
};
          content: {
\\"application/xml\\": { 
          schema:  string
       },
\\"application/json\\": { 
          schema:  string
       }
};
        },400: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 200, 
            contentType?: \\"application/xml\\",
            body?: string
          } | {  
            status: 200, 
            contentType?: \\"application/json\\",
            body?: string
          } | {  
            status: 400 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1login/get",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "ResponseBuilderFactory" => Object {
              "isType": true,
              "modulePath": "../../response-builder-factory.js",
            },
            "HttpStatusCode" => Object {
              "isType": true,
              "modulePath": "../../response-builder-factory.js",
            },
          },
          "imports": Map {
            "Context" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": Object {
                      "raw": "export { default } from \\"../$context.js\\"",
                    },
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1user~1createWithList/post",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/user/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/user/login.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/user/login.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/user/login.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@petstore.yaml#/paths/~1user~1login/get@[object Object]:true" => "HTTP_GET",
      "ContextCoder@petstore.yaml#/paths/~1user~1login/get@paths/user/$context.ts:false:true" => "Context",
    },
    "exports": Map {
      "HTTP_GET" => Object {
        "code": "({ query, path, header, body, context }: { query: {username?: string, password?: string}, path: never, header: never, body: undefined, context: typeof Context, response: ResponseBuilderFactory<{
      200: {
          headers: {
\\"X-Rate-Limit\\": { schema: number},
\\"X-Expires-After\\": { schema: string}
};
          content: {
\\"application/xml\\": { 
          schema:  string
       },
\\"application/json\\": { 
          schema:  string
       }
};
        },400: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 200, 
            contentType?: \\"application/xml\\",
            body?: string
          } | {  
            status: 200, 
            contentType?: \\"application/json\\",
            body?: string
          } | {  
            status: 400 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1login/get",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_GET",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {
      "ResponseBuilderFactory" => Object {
        "isType": true,
        "modulePath": "../../response-builder-factory.js",
      },
      "HttpStatusCode" => Object {
        "isType": true,
        "modulePath": "../../response-builder-factory.js",
      },
    },
    "imports": Map {
      "Context" => Object {
        "isDefault": true,
        "isType": false,
        "name": "Context",
        "script": Script {
          "cache": Map {
            "default" => "Context",
          },
          "exports": Map {
            "Context" => Object {
              "code": Object {
                "raw": "export { default } from \\"../$context.js\\"",
              },
              "done": true,
              "id": "ContextCoder@petstore.yaml#/paths/~1user~1createWithList/post",
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {},
          "imports": Map {},
          "path": "paths/user/$context.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/user/login.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/user/logout.ts" => Script {
    "cache": Map {
      "OperationCoder@petstore.yaml#/paths/~1user~1logout/get@[object Object]:false" => "GET",
      "OperationTypeCoder@petstore.yaml#/paths/~1user~1logout/get@path-types/user/logout.types.ts:true:false" => "HTTP_GET",
    },
    "exports": Map {
      "GET" => Object {
        "code": "() => { /* no response content specified in the OpenAPI document */ }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1user~1logout/get",
        "isDefault": false,
        "isType": false,
        "name": "GET",
        "promise": Promise {},
        "typeDeclaration": "HTTP_GET",
      },
    },
    "externalImports": Map {},
    "imports": Map {
      "HTTP_GET" => Object {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_GET",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1user~1logout/get@[object Object]:true" => "HTTP_GET",
            "ContextCoder@petstore.yaml#/paths/~1user~1logout/get@paths/user/$context.ts:false:true" => "Context",
          },
          "exports": Map {
            "HTTP_GET" => Object {
              "code": "({ query, path, header, body, context }: { query: never, path: never, header: never, body: undefined, context: typeof Context, response: ResponseBuilderFactory<{
      [statusCode in HttpStatusCode]: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: number | undefined 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1logout/get",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "ResponseBuilderFactory" => Object {
              "isType": true,
              "modulePath": "../../response-builder-factory.js",
            },
            "HttpStatusCode" => Object {
              "isType": true,
              "modulePath": "../../response-builder-factory.js",
            },
          },
          "imports": Map {
            "Context" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": Object {
                      "raw": "export { default } from \\"../$context.js\\"",
                    },
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1user~1createWithList/post",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/user/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/user/logout.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/user/logout.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/user/logout.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@petstore.yaml#/paths/~1user~1logout/get@[object Object]:true" => "HTTP_GET",
      "ContextCoder@petstore.yaml#/paths/~1user~1logout/get@paths/user/$context.ts:false:true" => "Context",
    },
    "exports": Map {
      "HTTP_GET" => Object {
        "code": "({ query, path, header, body, context }: { query: never, path: never, header: never, body: undefined, context: typeof Context, response: ResponseBuilderFactory<{
      [statusCode in HttpStatusCode]: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: number | undefined 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1logout/get",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_GET",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {
      "ResponseBuilderFactory" => Object {
        "isType": true,
        "modulePath": "../../response-builder-factory.js",
      },
      "HttpStatusCode" => Object {
        "isType": true,
        "modulePath": "../../response-builder-factory.js",
      },
    },
    "imports": Map {
      "Context" => Object {
        "isDefault": true,
        "isType": false,
        "name": "Context",
        "script": Script {
          "cache": Map {
            "default" => "Context",
          },
          "exports": Map {
            "Context" => Object {
              "code": Object {
                "raw": "export { default } from \\"../$context.js\\"",
              },
              "done": true,
              "id": "ContextCoder@petstore.yaml#/paths/~1user~1createWithList/post",
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {},
          "imports": Map {},
          "path": "paths/user/$context.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/user/logout.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/user/{username}.ts" => Script {
    "cache": Map {
      "OperationCoder@petstore.yaml#/paths/~1user~1{username}/get@[object Object]:false" => "GET",
      "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/get@path-types/user/{username}.types.ts:true:false" => "HTTP_GET",
      "OperationCoder@petstore.yaml#/paths/~1user~1{username}/put@[object Object]:false" => "PUT",
      "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/put@path-types/user/{username}.types.ts:true:false" => "HTTP_PUT",
      "OperationCoder@petstore.yaml#/paths/~1user~1{username}/delete@[object Object]:false" => "DELETE",
      "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/delete@path-types/user/{username}.types.ts:true:false" => "HTTP_DELETE",
    },
    "exports": Map {
      "GET" => Object {
        "code": "($) => {
      return $.response[200].random();
    }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1user~1{username}/get",
        "isDefault": false,
        "isType": false,
        "name": "GET",
        "promise": Promise {},
        "typeDeclaration": "HTTP_GET",
      },
      "PUT" => Object {
        "code": "() => { /* no response content specified in the OpenAPI document */ }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1user~1{username}/put",
        "isDefault": false,
        "isType": false,
        "name": "PUT",
        "promise": Promise {},
        "typeDeclaration": "HTTP_PUT",
      },
      "DELETE" => Object {
        "code": "() => { /* no response content specified in the OpenAPI document */ }",
        "done": true,
        "id": "OperationCoder@petstore.yaml#/paths/~1user~1{username}/delete",
        "isDefault": false,
        "isType": false,
        "name": "DELETE",
        "promise": Promise {},
        "typeDeclaration": "HTTP_DELETE",
      },
    },
    "externalImports": Map {},
    "imports": Map {
      "HTTP_GET" => Object {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_GET",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/get@[object Object]:true" => "HTTP_GET",
            "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/put@[object Object]:true" => "HTTP_PUT",
            "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/delete@[object Object]:true" => "HTTP_DELETE",
            "ContextCoder@petstore.yaml#/paths/~1user~1{username}/get@paths/user/$context.ts:false:true" => "Context",
            "SchemaTypeCoder@undefined@components/User.ts:true:false" => "User",
            "ContextCoder@petstore.yaml#/paths/~1user~1{username}/put@paths/user/$context.ts:false:true" => "Context2",
            "ContextCoder@petstore.yaml#/paths/~1user~1{username}/delete@paths/user/$context.ts:false:true" => "Context3",
          },
          "exports": Map {
            "HTTP_GET" => Object {
              "code": "({ query, path, header, body, context }: { query: never, path: {username: string}, header: never, body: undefined, context: typeof Context, response: ResponseBuilderFactory<{
      200: {
          headers: {};
          content: {
\\"application/xml\\": { 
          schema:  User
       },
\\"application/json\\": { 
          schema:  User
       }
};
        },400: {
          headers: {};
          content: {};
        },404: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 200, 
            contentType?: \\"application/xml\\",
            body?: User
          } | {  
            status: 200, 
            contentType?: \\"application/json\\",
            body?: User
          } | {  
            status: 400 
          } | {  
            status: 404 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/get",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_PUT" => Object {
              "code": "({ query, path, header, body, context }: { query: never, path: {username: string}, header: never, body: User, context: typeof Context2, response: ResponseBuilderFactory<{
      [statusCode in HttpStatusCode]: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: number | undefined 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/put",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_PUT",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_DELETE" => Object {
              "code": "({ query, path, header, body, context }: { query: never, path: {username: string}, header: never, body: undefined, context: typeof Context3, response: ResponseBuilderFactory<{
      400: {
          headers: {};
          content: {};
        },404: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 400 
          } | {  
            status: 404 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/delete",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_DELETE",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "ResponseBuilderFactory" => Object {
              "isType": true,
              "modulePath": "../../response-builder-factory.js",
            },
            "HttpStatusCode" => Object {
              "isType": true,
              "modulePath": "../../response-builder-factory.js",
            },
          },
          "imports": Map {
            "Context" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": Object {
                      "raw": "export { default } from \\"../$context.js\\"",
                    },
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1user~1createWithList/post",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/user/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "User" => Object {
              "isDefault": false,
              "isType": true,
              "name": "User",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "User",
                },
                "exports": Map {
                  "User" => Object {
                    "code": "{id?: number,username?: string,firstName?: string,lastName?: string,email?: string,password?: string,phone?: string,userStatus?: number}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "User",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "components/User.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Context2" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": Object {
                      "raw": "export { default } from \\"../$context.js\\"",
                    },
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1user~1createWithList/post",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/user/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Context3" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": Object {
                      "raw": "export { default } from \\"../$context.js\\"",
                    },
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1user~1createWithList/post",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/user/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/user/{username}.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "HTTP_PUT" => Object {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_PUT",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/get@[object Object]:true" => "HTTP_GET",
            "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/put@[object Object]:true" => "HTTP_PUT",
            "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/delete@[object Object]:true" => "HTTP_DELETE",
            "ContextCoder@petstore.yaml#/paths/~1user~1{username}/get@paths/user/$context.ts:false:true" => "Context",
            "SchemaTypeCoder@undefined@components/User.ts:true:false" => "User",
            "ContextCoder@petstore.yaml#/paths/~1user~1{username}/put@paths/user/$context.ts:false:true" => "Context2",
            "ContextCoder@petstore.yaml#/paths/~1user~1{username}/delete@paths/user/$context.ts:false:true" => "Context3",
          },
          "exports": Map {
            "HTTP_GET" => Object {
              "code": "({ query, path, header, body, context }: { query: never, path: {username: string}, header: never, body: undefined, context: typeof Context, response: ResponseBuilderFactory<{
      200: {
          headers: {};
          content: {
\\"application/xml\\": { 
          schema:  User
       },
\\"application/json\\": { 
          schema:  User
       }
};
        },400: {
          headers: {};
          content: {};
        },404: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 200, 
            contentType?: \\"application/xml\\",
            body?: User
          } | {  
            status: 200, 
            contentType?: \\"application/json\\",
            body?: User
          } | {  
            status: 400 
          } | {  
            status: 404 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/get",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_PUT" => Object {
              "code": "({ query, path, header, body, context }: { query: never, path: {username: string}, header: never, body: User, context: typeof Context2, response: ResponseBuilderFactory<{
      [statusCode in HttpStatusCode]: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: number | undefined 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/put",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_PUT",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_DELETE" => Object {
              "code": "({ query, path, header, body, context }: { query: never, path: {username: string}, header: never, body: undefined, context: typeof Context3, response: ResponseBuilderFactory<{
      400: {
          headers: {};
          content: {};
        },404: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 400 
          } | {  
            status: 404 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/delete",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_DELETE",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "ResponseBuilderFactory" => Object {
              "isType": true,
              "modulePath": "../../response-builder-factory.js",
            },
            "HttpStatusCode" => Object {
              "isType": true,
              "modulePath": "../../response-builder-factory.js",
            },
          },
          "imports": Map {
            "Context" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": Object {
                      "raw": "export { default } from \\"../$context.js\\"",
                    },
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1user~1createWithList/post",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/user/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "User" => Object {
              "isDefault": false,
              "isType": true,
              "name": "User",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "User",
                },
                "exports": Map {
                  "User" => Object {
                    "code": "{id?: number,username?: string,firstName?: string,lastName?: string,email?: string,password?: string,phone?: string,userStatus?: number}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "User",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "components/User.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Context2" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": Object {
                      "raw": "export { default } from \\"../$context.js\\"",
                    },
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1user~1createWithList/post",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/user/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Context3" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": Object {
                      "raw": "export { default } from \\"../$context.js\\"",
                    },
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1user~1createWithList/post",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/user/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/user/{username}.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "HTTP_DELETE" => Object {
        "isDefault": false,
        "isType": true,
        "name": "HTTP_DELETE",
        "script": Script {
          "cache": Map {
            "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/get@[object Object]:true" => "HTTP_GET",
            "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/put@[object Object]:true" => "HTTP_PUT",
            "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/delete@[object Object]:true" => "HTTP_DELETE",
            "ContextCoder@petstore.yaml#/paths/~1user~1{username}/get@paths/user/$context.ts:false:true" => "Context",
            "SchemaTypeCoder@undefined@components/User.ts:true:false" => "User",
            "ContextCoder@petstore.yaml#/paths/~1user~1{username}/put@paths/user/$context.ts:false:true" => "Context2",
            "ContextCoder@petstore.yaml#/paths/~1user~1{username}/delete@paths/user/$context.ts:false:true" => "Context3",
          },
          "exports": Map {
            "HTTP_GET" => Object {
              "code": "({ query, path, header, body, context }: { query: never, path: {username: string}, header: never, body: undefined, context: typeof Context, response: ResponseBuilderFactory<{
      200: {
          headers: {};
          content: {
\\"application/xml\\": { 
          schema:  User
       },
\\"application/json\\": { 
          schema:  User
       }
};
        },400: {
          headers: {};
          content: {};
        },404: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 200, 
            contentType?: \\"application/xml\\",
            body?: User
          } | {  
            status: 200, 
            contentType?: \\"application/json\\",
            body?: User
          } | {  
            status: 400 
          } | {  
            status: 404 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/get",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_GET",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_PUT" => Object {
              "code": "({ query, path, header, body, context }: { query: never, path: {username: string}, header: never, body: User, context: typeof Context2, response: ResponseBuilderFactory<{
      [statusCode in HttpStatusCode]: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: number | undefined 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/put",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_PUT",
              "promise": Promise {},
              "typeDeclaration": "",
            },
            "HTTP_DELETE" => Object {
              "code": "({ query, path, header, body, context }: { query: never, path: {username: string}, header: never, body: undefined, context: typeof Context3, response: ResponseBuilderFactory<{
      400: {
          headers: {};
          content: {};
        },404: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 400 
          } | {  
            status: 404 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
              "done": true,
              "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/delete",
              "isDefault": false,
              "isType": true,
              "name": "HTTP_DELETE",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {
            "ResponseBuilderFactory" => Object {
              "isType": true,
              "modulePath": "../../response-builder-factory.js",
            },
            "HttpStatusCode" => Object {
              "isType": true,
              "modulePath": "../../response-builder-factory.js",
            },
          },
          "imports": Map {
            "Context" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": Object {
                      "raw": "export { default } from \\"../$context.js\\"",
                    },
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1user~1createWithList/post",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/user/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "User" => Object {
              "isDefault": false,
              "isType": true,
              "name": "User",
              "script": Script {
                "cache": Map {
                  "SchemaTypeCoder@undefined@[object Object]:true" => "User",
                },
                "exports": Map {
                  "User" => Object {
                    "code": "{id?: number,username?: string,firstName?: string,lastName?: string,email?: string,password?: string,phone?: string,userStatus?: number}",
                    "done": true,
                    "id": "SchemaTypeCoder@undefined",
                    "isDefault": false,
                    "isType": true,
                    "name": "User",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "components/User.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Context2" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": Object {
                      "raw": "export { default } from \\"../$context.js\\"",
                    },
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1user~1createWithList/post",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/user/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
            "Context3" => Object {
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "script": Script {
                "cache": Map {
                  "default" => "Context",
                },
                "exports": Map {
                  "Context" => Object {
                    "code": Object {
                      "raw": "export { default } from \\"../$context.js\\"",
                    },
                    "done": true,
                    "id": "ContextCoder@petstore.yaml#/paths/~1user~1createWithList/post",
                    "isDefault": true,
                    "isType": false,
                    "name": "Context",
                    "promise": Promise {},
                    "typeDeclaration": "",
                  },
                },
                "externalImports": Map {},
                "imports": Map {},
                "path": "paths/user/$context.ts",
                "repository": Repository {
                  "scripts": [Circular],
                  "writeFiles": [Function],
                },
                "typeCache": Map {},
              },
            },
          },
          "path": "path-types/user/{username}.types.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "paths/user/{username}.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "path-types/user/{username}.types.ts" => Script {
    "cache": Map {
      "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/get@[object Object]:true" => "HTTP_GET",
      "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/put@[object Object]:true" => "HTTP_PUT",
      "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/delete@[object Object]:true" => "HTTP_DELETE",
      "ContextCoder@petstore.yaml#/paths/~1user~1{username}/get@paths/user/$context.ts:false:true" => "Context",
      "SchemaTypeCoder@undefined@components/User.ts:true:false" => "User",
      "ContextCoder@petstore.yaml#/paths/~1user~1{username}/put@paths/user/$context.ts:false:true" => "Context2",
      "ContextCoder@petstore.yaml#/paths/~1user~1{username}/delete@paths/user/$context.ts:false:true" => "Context3",
    },
    "exports": Map {
      "HTTP_GET" => Object {
        "code": "({ query, path, header, body, context }: { query: never, path: {username: string}, header: never, body: undefined, context: typeof Context, response: ResponseBuilderFactory<{
      200: {
          headers: {};
          content: {
\\"application/xml\\": { 
          schema:  User
       },
\\"application/json\\": { 
          schema:  User
       }
};
        },400: {
          headers: {};
          content: {};
        },404: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 200, 
            contentType?: \\"application/xml\\",
            body?: User
          } | {  
            status: 200, 
            contentType?: \\"application/json\\",
            body?: User
          } | {  
            status: 400 
          } | {  
            status: 404 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/get",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_GET",
        "promise": Promise {},
        "typeDeclaration": "",
      },
      "HTTP_PUT" => Object {
        "code": "({ query, path, header, body, context }: { query: never, path: {username: string}, header: never, body: User, context: typeof Context2, response: ResponseBuilderFactory<{
      [statusCode in HttpStatusCode]: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: number | undefined 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/put",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_PUT",
        "promise": Promise {},
        "typeDeclaration": "",
      },
      "HTTP_DELETE" => Object {
        "code": "({ query, path, header, body, context }: { query: never, path: {username: string}, header: never, body: undefined, context: typeof Context3, response: ResponseBuilderFactory<{
      400: {
          headers: {};
          content: {};
        },404: {
          headers: {};
          content: {};
        }
      }> }) => {  
            status: 400 
          } | {  
            status: 404 
          } | { status: 415, contentType: \\"text/plain\\", body: string }
    | void",
        "done": true,
        "id": "OperationTypeCoder@petstore.yaml#/paths/~1user~1{username}/delete",
        "isDefault": false,
        "isType": true,
        "name": "HTTP_DELETE",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {
      "ResponseBuilderFactory" => Object {
        "isType": true,
        "modulePath": "../../response-builder-factory.js",
      },
      "HttpStatusCode" => Object {
        "isType": true,
        "modulePath": "../../response-builder-factory.js",
      },
    },
    "imports": Map {
      "Context" => Object {
        "isDefault": true,
        "isType": false,
        "name": "Context",
        "script": Script {
          "cache": Map {
            "default" => "Context",
          },
          "exports": Map {
            "Context" => Object {
              "code": Object {
                "raw": "export { default } from \\"../$context.js\\"",
              },
              "done": true,
              "id": "ContextCoder@petstore.yaml#/paths/~1user~1createWithList/post",
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {},
          "imports": Map {},
          "path": "paths/user/$context.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "User" => Object {
        "isDefault": false,
        "isType": true,
        "name": "User",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "User",
          },
          "exports": Map {
            "User" => Object {
              "code": "{id?: number,username?: string,firstName?: string,lastName?: string,email?: string,password?: string,phone?: string,userStatus?: number}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isDefault": false,
              "isType": true,
              "name": "User",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {},
          "imports": Map {},
          "path": "components/User.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Context2" => Object {
        "isDefault": true,
        "isType": false,
        "name": "Context",
        "script": Script {
          "cache": Map {
            "default" => "Context",
          },
          "exports": Map {
            "Context" => Object {
              "code": Object {
                "raw": "export { default } from \\"../$context.js\\"",
              },
              "done": true,
              "id": "ContextCoder@petstore.yaml#/paths/~1user~1createWithList/post",
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {},
          "imports": Map {},
          "path": "paths/user/$context.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Context3" => Object {
        "isDefault": true,
        "isType": false,
        "name": "Context",
        "script": Script {
          "cache": Map {
            "default" => "Context",
          },
          "exports": Map {
            "Context" => Object {
              "code": Object {
                "raw": "export { default } from \\"../$context.js\\"",
              },
              "done": true,
              "id": "ContextCoder@petstore.yaml#/paths/~1user~1createWithList/post",
              "isDefault": true,
              "isType": false,
              "name": "Context",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {},
          "imports": Map {},
          "path": "paths/user/$context.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "path-types/user/{username}.types.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/$context.ts" => Script {
    "cache": Map {
      "default" => "Context",
    },
    "exports": Map {
      "Context" => Object {
        "code": "{}",
        "done": true,
        "id": "ContextCoder@petstore.yaml#/paths/~1pet/post",
        "isDefault": true,
        "isType": false,
        "name": "Context",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {},
    "imports": Map {},
    "path": "paths/$context.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "components/Pet.ts" => Script {
    "cache": Map {
      "SchemaTypeCoder@undefined@[object Object]:true" => "Pet",
      "SchemaTypeCoder@undefined@components/Category.ts:true:false" => "Category",
      "SchemaTypeCoder@undefined@components/Tag.ts:true:false" => "Tag",
    },
    "exports": Map {
      "Pet" => Object {
        "code": "{id?: number,name: string,category?: Category,photoUrls: Array<string>,tags?: Array<Tag>,status?: string}",
        "done": true,
        "id": "SchemaTypeCoder@undefined",
        "isDefault": false,
        "isType": true,
        "name": "Pet",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {},
    "imports": Map {
      "Category" => Object {
        "isDefault": false,
        "isType": true,
        "name": "Category",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
          },
          "exports": Map {
            "Category" => Object {
              "code": "{id?: number,name?: string}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isDefault": false,
              "isType": true,
              "name": "Category",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {},
          "imports": Map {},
          "path": "components/Category.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
      "Tag" => Object {
        "isDefault": false,
        "isType": true,
        "name": "Tag",
        "script": Script {
          "cache": Map {
            "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
          },
          "exports": Map {
            "Tag" => Object {
              "code": "{id?: number,name?: string}",
              "done": true,
              "id": "SchemaTypeCoder@undefined",
              "isDefault": false,
              "isType": true,
              "name": "Tag",
              "promise": Promise {},
              "typeDeclaration": "",
            },
          },
          "externalImports": Map {},
          "imports": Map {},
          "path": "components/Tag.ts",
          "repository": Repository {
            "scripts": [Circular],
            "writeFiles": [Function],
          },
          "typeCache": Map {},
        },
      },
    },
    "path": "components/Pet.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/pet/$context.ts" => Script {
    "cache": Map {
      "default" => "Context",
    },
    "exports": Map {
      "Context" => Object {
        "code": Object {
          "raw": "export { default } from \\"../$context.js\\"",
        },
        "done": true,
        "id": "ContextCoder@petstore.yaml#/paths/~1pet~1findByStatus/get",
        "isDefault": true,
        "isType": false,
        "name": "Context",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {},
    "imports": Map {},
    "path": "paths/pet/$context.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/pet/{petId}/$context.ts" => Script {
    "cache": Map {
      "default" => "Context",
    },
    "exports": Map {
      "Context" => Object {
        "code": Object {
          "raw": "export { default } from \\"../$context.js\\"",
        },
        "done": true,
        "id": "ContextCoder@petstore.yaml#/paths/~1pet~1{petId}~1uploadImage/post",
        "isDefault": true,
        "isType": false,
        "name": "Context",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {},
    "imports": Map {},
    "path": "paths/pet/{petId}/$context.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "components/ApiResponse.ts" => Script {
    "cache": Map {
      "SchemaTypeCoder@undefined@[object Object]:true" => "ApiResponse",
    },
    "exports": Map {
      "ApiResponse" => Object {
        "code": "{code?: number,type?: string,message?: string}",
        "done": true,
        "id": "SchemaTypeCoder@undefined",
        "isDefault": false,
        "isType": true,
        "name": "ApiResponse",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {},
    "imports": Map {},
    "path": "components/ApiResponse.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/store/$context.ts" => Script {
    "cache": Map {
      "default" => "Context",
    },
    "exports": Map {
      "Context" => Object {
        "code": Object {
          "raw": "export { default } from \\"../$context.js\\"",
        },
        "done": true,
        "id": "ContextCoder@petstore.yaml#/paths/~1store~1inventory/get",
        "isDefault": true,
        "isType": false,
        "name": "Context",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {},
    "imports": Map {},
    "path": "paths/store/$context.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "components/Order.ts" => Script {
    "cache": Map {
      "SchemaTypeCoder@undefined@[object Object]:true" => "Order",
    },
    "exports": Map {
      "Order" => Object {
        "code": "{id?: number,petId?: number,quantity?: number,shipDate?: string,status?: string,complete?: boolean}",
        "done": true,
        "id": "SchemaTypeCoder@undefined",
        "isDefault": false,
        "isType": true,
        "name": "Order",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {},
    "imports": Map {},
    "path": "components/Order.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/store/order/$context.ts" => Script {
    "cache": Map {
      "default" => "Context",
    },
    "exports": Map {
      "Context" => Object {
        "code": Object {
          "raw": "export { default } from \\"../$context.js\\"",
        },
        "done": true,
        "id": "ContextCoder@petstore.yaml#/paths/~1store~1order~1{orderId}/get",
        "isDefault": true,
        "isType": false,
        "name": "Context",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {},
    "imports": Map {},
    "path": "paths/store/order/$context.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "components/User.ts" => Script {
    "cache": Map {
      "SchemaTypeCoder@undefined@[object Object]:true" => "User",
    },
    "exports": Map {
      "User" => Object {
        "code": "{id?: number,username?: string,firstName?: string,lastName?: string,email?: string,password?: string,phone?: string,userStatus?: number}",
        "done": true,
        "id": "SchemaTypeCoder@undefined",
        "isDefault": false,
        "isType": true,
        "name": "User",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {},
    "imports": Map {},
    "path": "components/User.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "paths/user/$context.ts" => Script {
    "cache": Map {
      "default" => "Context",
    },
    "exports": Map {
      "Context" => Object {
        "code": Object {
          "raw": "export { default } from \\"../$context.js\\"",
        },
        "done": true,
        "id": "ContextCoder@petstore.yaml#/paths/~1user~1createWithList/post",
        "isDefault": true,
        "isType": false,
        "name": "Context",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {},
    "imports": Map {},
    "path": "paths/user/$context.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "components/Category.ts" => Script {
    "cache": Map {
      "SchemaTypeCoder@undefined@[object Object]:true" => "Category",
    },
    "exports": Map {
      "Category" => Object {
        "code": "{id?: number,name?: string}",
        "done": true,
        "id": "SchemaTypeCoder@undefined",
        "isDefault": false,
        "isType": true,
        "name": "Category",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {},
    "imports": Map {},
    "path": "components/Category.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
  "components/Tag.ts" => Script {
    "cache": Map {
      "SchemaTypeCoder@undefined@[object Object]:true" => "Tag",
    },
    "exports": Map {
      "Tag" => Object {
        "code": "{id?: number,name?: string}",
        "done": true,
        "id": "SchemaTypeCoder@undefined",
        "isDefault": false,
        "isType": true,
        "name": "Tag",
        "promise": Promise {},
        "typeDeclaration": "",
      },
    },
    "externalImports": Map {},
    "imports": Map {},
    "path": "components/Tag.ts",
    "repository": Repository {
      "scripts": [Circular],
      "writeFiles": [Function],
    },
    "typeCache": Map {},
  },
}
`;
